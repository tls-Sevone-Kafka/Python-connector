# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlowFalconInterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'direction': 'int',
        'interface_num': 'int',
        'source_ip': 'str'
    }

    attribute_map = {
        'direction': 'direction',
        'interface_num': 'interfaceNum',
        'source_ip': 'sourceIp'
    }

    def __init__(self, direction=None, interface_num=None, source_ip=None):  # noqa: E501
        """FlowFalconInterface - a model defined in Swagger"""  # noqa: E501
        self._direction = None
        self._interface_num = None
        self._source_ip = None
        self.discriminator = None
        self.direction = direction
        self.interface_num = interface_num
        self.source_ip = source_ip

    @property
    def direction(self):
        """Gets the direction of this FlowFalconInterface.  # noqa: E501


        :return: The direction of this FlowFalconInterface.  # noqa: E501
        :rtype: int
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this FlowFalconInterface.


        :param direction: The direction of this FlowFalconInterface.  # noqa: E501
        :type: int
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")  # noqa: E501

        self._direction = direction

    @property
    def interface_num(self):
        """Gets the interface_num of this FlowFalconInterface.  # noqa: E501


        :return: The interface_num of this FlowFalconInterface.  # noqa: E501
        :rtype: int
        """
        return self._interface_num

    @interface_num.setter
    def interface_num(self, interface_num):
        """Sets the interface_num of this FlowFalconInterface.


        :param interface_num: The interface_num of this FlowFalconInterface.  # noqa: E501
        :type: int
        """
        if interface_num is None:
            raise ValueError("Invalid value for `interface_num`, must not be `None`")  # noqa: E501

        self._interface_num = interface_num

    @property
    def source_ip(self):
        """Gets the source_ip of this FlowFalconInterface.  # noqa: E501


        :return: The source_ip of this FlowFalconInterface.  # noqa: E501
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this FlowFalconInterface.


        :param source_ip: The source_ip of this FlowFalconInterface.  # noqa: E501
        :type: str
        """
        if source_ip is None:
            raise ValueError("Invalid value for `source_ip`, must not be `None`")  # noqa: E501

        self._source_ip = source_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlowFalconInterface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowFalconInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
