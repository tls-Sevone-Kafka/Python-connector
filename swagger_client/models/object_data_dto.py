# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ObjectDataDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'object_id': 'int',
        'timestamp': 'int',
        'indicator_data_dtos': 'list[IndicatorDataDto]'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'object_id': 'objectId',
        'timestamp': 'timestamp',
        'indicator_data_dtos': 'indicatorDataDtos'
    }

    def __init__(self, device_id=None, object_id=None, timestamp=None, indicator_data_dtos=None):  # noqa: E501
        """ObjectDataDto - a model defined in Swagger"""  # noqa: E501
        self._device_id = None
        self._object_id = None
        self._timestamp = None
        self._indicator_data_dtos = None
        self.discriminator = None
        self.device_id = device_id
        self.object_id = object_id
        self.timestamp = timestamp
        if indicator_data_dtos is not None:
            self.indicator_data_dtos = indicator_data_dtos

    @property
    def device_id(self):
        """Gets the device_id of this ObjectDataDto.  # noqa: E501


        :return: The device_id of this ObjectDataDto.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ObjectDataDto.


        :param device_id: The device_id of this ObjectDataDto.  # noqa: E501
        :type: int
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def object_id(self):
        """Gets the object_id of this ObjectDataDto.  # noqa: E501


        :return: The object_id of this ObjectDataDto.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ObjectDataDto.


        :param object_id: The object_id of this ObjectDataDto.  # noqa: E501
        :type: int
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")  # noqa: E501

        self._object_id = object_id

    @property
    def timestamp(self):
        """Gets the timestamp of this ObjectDataDto.  # noqa: E501

        Unix timestamp with milliseconds format  # noqa: E501

        :return: The timestamp of this ObjectDataDto.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ObjectDataDto.

        Unix timestamp with milliseconds format  # noqa: E501

        :param timestamp: The timestamp of this ObjectDataDto.  # noqa: E501
        :type: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def indicator_data_dtos(self):
        """Gets the indicator_data_dtos of this ObjectDataDto.  # noqa: E501


        :return: The indicator_data_dtos of this ObjectDataDto.  # noqa: E501
        :rtype: list[IndicatorDataDto]
        """
        return self._indicator_data_dtos

    @indicator_data_dtos.setter
    def indicator_data_dtos(self, indicator_data_dtos):
        """Sets the indicator_data_dtos of this ObjectDataDto.


        :param indicator_data_dtos: The indicator_data_dtos of this ObjectDataDto.  # noqa: E501
        :type: list[IndicatorDataDto]
        """

        self._indicator_data_dtos = indicator_data_dtos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ObjectDataDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectDataDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
