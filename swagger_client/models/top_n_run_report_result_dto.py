# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TopNRunReportResultDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result': 'list[TopNResultDto]',
        'time_ranges': 'list[TimeRangeDto]',
        'attachment_type': 'str'
    }

    attribute_map = {
        'result': 'result',
        'time_ranges': 'timeRanges',
        'attachment_type': 'attachmentType'
    }

    def __init__(self, result=None, time_ranges=None, attachment_type=None):  # noqa: E501
        """TopNRunReportResultDto - a model defined in Swagger"""  # noqa: E501
        self._result = None
        self._time_ranges = None
        self._attachment_type = None
        self.discriminator = None
        self.result = result
        if time_ranges is not None:
            self.time_ranges = time_ranges
        if attachment_type is not None:
            self.attachment_type = attachment_type

    @property
    def result(self):
        """Gets the result of this TopNRunReportResultDto.  # noqa: E501


        :return: The result of this TopNRunReportResultDto.  # noqa: E501
        :rtype: list[TopNResultDto]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this TopNRunReportResultDto.


        :param result: The result of this TopNRunReportResultDto.  # noqa: E501
        :type: list[TopNResultDto]
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def time_ranges(self):
        """Gets the time_ranges of this TopNRunReportResultDto.  # noqa: E501


        :return: The time_ranges of this TopNRunReportResultDto.  # noqa: E501
        :rtype: list[TimeRangeDto]
        """
        return self._time_ranges

    @time_ranges.setter
    def time_ranges(self, time_ranges):
        """Sets the time_ranges of this TopNRunReportResultDto.


        :param time_ranges: The time_ranges of this TopNRunReportResultDto.  # noqa: E501
        :type: list[TimeRangeDto]
        """

        self._time_ranges = time_ranges

    @property
    def attachment_type(self):
        """Gets the attachment_type of this TopNRunReportResultDto.  # noqa: E501


        :return: The attachment_type of this TopNRunReportResultDto.  # noqa: E501
        :rtype: str
        """
        return self._attachment_type

    @attachment_type.setter
    def attachment_type(self, attachment_type):
        """Sets the attachment_type of this TopNRunReportResultDto.


        :param attachment_type: The attachment_type of this TopNRunReportResultDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALERT", "PERFORMANCE_METRICS", "TOP_N", "GROUP_METRICS", "TOPOLOGY", "NETFLOW"]  # noqa: E501
        if attachment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `attachment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(attachment_type, allowed_values)
            )

        self._attachment_type = attachment_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopNRunReportResultDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopNRunReportResultDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
