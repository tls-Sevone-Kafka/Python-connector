# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataPointDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'float',
        'time': 'int',
        'focus': 'int'
    }

    attribute_map = {
        'value': 'value',
        'time': 'time',
        'focus': 'focus'
    }

    def __init__(self, value=None, time=None, focus=None):  # noqa: E501
        """DataPointDto - a model defined in Swagger"""  # noqa: E501
        self._value = None
        self._time = None
        self._focus = None
        self.discriminator = None
        self.value = value
        self.time = time
        self.focus = focus

    @property
    def value(self):
        """Gets the value of this DataPointDto.  # noqa: E501


        :return: The value of this DataPointDto.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DataPointDto.


        :param value: The value of this DataPointDto.  # noqa: E501
        :type: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def time(self):
        """Gets the time of this DataPointDto.  # noqa: E501

        Unix timestamp with milliseconds proximity  # noqa: E501

        :return: The time of this DataPointDto.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DataPointDto.

        Unix timestamp with milliseconds proximity  # noqa: E501

        :param time: The time of this DataPointDto.  # noqa: E501
        :type: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def focus(self):
        """Gets the focus of this DataPointDto.  # noqa: E501


        :return: The focus of this DataPointDto.  # noqa: E501
        :rtype: int
        """
        return self._focus

    @focus.setter
    def focus(self, focus):
        """Sets the focus of this DataPointDto.


        :param focus: The focus of this DataPointDto.  # noqa: E501
        :type: int
        """
        if focus is None:
            raise ValueError("Invalid value for `focus`, must not be `None`")  # noqa: E501

        self._focus = focus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataPointDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataPointDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
