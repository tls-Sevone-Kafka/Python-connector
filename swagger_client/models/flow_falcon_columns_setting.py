# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlowFalconColumnsSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'columns': 'list[PairLongInteger]',
        'sort_col': 'PairLongInteger',
        'order': 'str'
    }

    attribute_map = {
        'columns': 'columns',
        'sort_col': 'sortCol',
        'order': 'order'
    }

    def __init__(self, columns=None, sort_col=None, order=None):  # noqa: E501
        """FlowFalconColumnsSetting - a model defined in Swagger"""  # noqa: E501
        self._columns = None
        self._sort_col = None
        self._order = None
        self.discriminator = None
        if columns is not None:
            self.columns = columns
        if sort_col is not None:
            self.sort_col = sort_col
        if order is not None:
            self.order = order

    @property
    def columns(self):
        """Gets the columns of this FlowFalconColumnsSetting.  # noqa: E501


        :return: The columns of this FlowFalconColumnsSetting.  # noqa: E501
        :rtype: list[PairLongInteger]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this FlowFalconColumnsSetting.


        :param columns: The columns of this FlowFalconColumnsSetting.  # noqa: E501
        :type: list[PairLongInteger]
        """

        self._columns = columns

    @property
    def sort_col(self):
        """Gets the sort_col of this FlowFalconColumnsSetting.  # noqa: E501


        :return: The sort_col of this FlowFalconColumnsSetting.  # noqa: E501
        :rtype: PairLongInteger
        """
        return self._sort_col

    @sort_col.setter
    def sort_col(self, sort_col):
        """Sets the sort_col of this FlowFalconColumnsSetting.


        :param sort_col: The sort_col of this FlowFalconColumnsSetting.  # noqa: E501
        :type: PairLongInteger
        """

        self._sort_col = sort_col

    @property
    def order(self):
        """Gets the order of this FlowFalconColumnsSetting.  # noqa: E501


        :return: The order of this FlowFalconColumnsSetting.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this FlowFalconColumnsSetting.


        :param order: The order of this FlowFalconColumnsSetting.  # noqa: E501
        :type: str
        """

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlowFalconColumnsSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowFalconColumnsSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
