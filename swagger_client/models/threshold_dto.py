# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ThresholdDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'device_id': 'int',
        'policy_id': 'int',
        'group_id': 'int',
        'severity': 'int',
        'trigger_expression': 'str',
        'clear_expression': 'str',
        'user_enabled': 'int',
        'policy_enabled': 'int',
        'mail_to': 'str',
        'mail_once': 'bool',
        'mail_period': 'int',
        'last_updated': 'int',
        'use_default_traps': 'bool',
        'use_device_traps': 'bool',
        'use_custom_traps': 'bool',
        'trigger_message': 'str',
        'clear_message': 'str',
        'append_condition_messages': 'bool',
        'type': 'str',
        'peer_id': 'int',
        'flow_dto': 'FlowDto',
        'trigger_conditions': 'list[ThresholdConditionDto]',
        'clear_conditions': 'list[ThresholdConditionDto]',
        'absolute_times': 'list[ThresholdAbsoluteTimeDto]',
        'relative_times': 'list[ThresholdRelativeTimeDto]',
        'trap_destinations': 'list[ThresholdTrapDestinationDto]',
        'device_group': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'device_id': 'deviceId',
        'policy_id': 'policyId',
        'group_id': 'groupId',
        'severity': 'severity',
        'trigger_expression': 'triggerExpression',
        'clear_expression': 'clearExpression',
        'user_enabled': 'userEnabled',
        'policy_enabled': 'policyEnabled',
        'mail_to': 'mailTo',
        'mail_once': 'mailOnce',
        'mail_period': 'mailPeriod',
        'last_updated': 'lastUpdated',
        'use_default_traps': 'useDefaultTraps',
        'use_device_traps': 'useDeviceTraps',
        'use_custom_traps': 'useCustomTraps',
        'trigger_message': 'triggerMessage',
        'clear_message': 'clearMessage',
        'append_condition_messages': 'appendConditionMessages',
        'type': 'type',
        'peer_id': 'peerId',
        'flow_dto': 'flowDto',
        'trigger_conditions': 'triggerConditions',
        'clear_conditions': 'clearConditions',
        'absolute_times': 'absoluteTimes',
        'relative_times': 'relativeTimes',
        'trap_destinations': 'trapDestinations',
        'device_group': 'deviceGroup'
    }

    def __init__(self, id=None, name=None, description=None, device_id=None, policy_id=None, group_id=None, severity=None, trigger_expression=None, clear_expression=None, user_enabled=None, policy_enabled=None, mail_to=None, mail_once=None, mail_period=None, last_updated=None, use_default_traps=None, use_device_traps=None, use_custom_traps=None, trigger_message=None, clear_message=None, append_condition_messages=None, type=None, peer_id=None, flow_dto=None, trigger_conditions=None, clear_conditions=None, absolute_times=None, relative_times=None, trap_destinations=None, device_group=None):  # noqa: E501
        """ThresholdDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._device_id = None
        self._policy_id = None
        self._group_id = None
        self._severity = None
        self._trigger_expression = None
        self._clear_expression = None
        self._user_enabled = None
        self._policy_enabled = None
        self._mail_to = None
        self._mail_once = None
        self._mail_period = None
        self._last_updated = None
        self._use_default_traps = None
        self._use_device_traps = None
        self._use_custom_traps = None
        self._trigger_message = None
        self._clear_message = None
        self._append_condition_messages = None
        self._type = None
        self._peer_id = None
        self._flow_dto = None
        self._trigger_conditions = None
        self._clear_conditions = None
        self._absolute_times = None
        self._relative_times = None
        self._trap_destinations = None
        self._device_group = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if device_id is not None:
            self.device_id = device_id
        if policy_id is not None:
            self.policy_id = policy_id
        if group_id is not None:
            self.group_id = group_id
        if severity is not None:
            self.severity = severity
        if trigger_expression is not None:
            self.trigger_expression = trigger_expression
        if clear_expression is not None:
            self.clear_expression = clear_expression
        if user_enabled is not None:
            self.user_enabled = user_enabled
        if policy_enabled is not None:
            self.policy_enabled = policy_enabled
        if mail_to is not None:
            self.mail_to = mail_to
        if mail_once is not None:
            self.mail_once = mail_once
        if mail_period is not None:
            self.mail_period = mail_period
        if last_updated is not None:
            self.last_updated = last_updated
        if use_default_traps is not None:
            self.use_default_traps = use_default_traps
        if use_device_traps is not None:
            self.use_device_traps = use_device_traps
        if use_custom_traps is not None:
            self.use_custom_traps = use_custom_traps
        if trigger_message is not None:
            self.trigger_message = trigger_message
        if clear_message is not None:
            self.clear_message = clear_message
        if append_condition_messages is not None:
            self.append_condition_messages = append_condition_messages
        if type is not None:
            self.type = type
        if peer_id is not None:
            self.peer_id = peer_id
        if flow_dto is not None:
            self.flow_dto = flow_dto
        if trigger_conditions is not None:
            self.trigger_conditions = trigger_conditions
        if clear_conditions is not None:
            self.clear_conditions = clear_conditions
        if absolute_times is not None:
            self.absolute_times = absolute_times
        if relative_times is not None:
            self.relative_times = relative_times
        if trap_destinations is not None:
            self.trap_destinations = trap_destinations
        if device_group is not None:
            self.device_group = device_group

    @property
    def id(self):
        """Gets the id of this ThresholdDto.  # noqa: E501

        [Output Only]  # noqa: E501

        :return: The id of this ThresholdDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ThresholdDto.

        [Output Only]  # noqa: E501

        :param id: The id of this ThresholdDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ThresholdDto.  # noqa: E501


        :return: The name of this ThresholdDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ThresholdDto.


        :param name: The name of this ThresholdDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ThresholdDto.  # noqa: E501


        :return: The description of this ThresholdDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ThresholdDto.


        :param description: The description of this ThresholdDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_id(self):
        """Gets the device_id of this ThresholdDto.  # noqa: E501

        [Output Only]  # noqa: E501

        :return: The device_id of this ThresholdDto.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ThresholdDto.

        [Output Only]  # noqa: E501

        :param device_id: The device_id of this ThresholdDto.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def policy_id(self):
        """Gets the policy_id of this ThresholdDto.  # noqa: E501

        [Output Only]  # noqa: E501

        :return: The policy_id of this ThresholdDto.  # noqa: E501
        :rtype: int
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this ThresholdDto.

        [Output Only]  # noqa: E501

        :param policy_id: The policy_id of this ThresholdDto.  # noqa: E501
        :type: int
        """

        self._policy_id = policy_id

    @property
    def group_id(self):
        """Gets the group_id of this ThresholdDto.  # noqa: E501

        [Output Only]  # noqa: E501

        :return: The group_id of this ThresholdDto.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ThresholdDto.

        [Output Only]  # noqa: E501

        :param group_id: The group_id of this ThresholdDto.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def severity(self):
        """Gets the severity of this ThresholdDto.  # noqa: E501


        :return: The severity of this ThresholdDto.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ThresholdDto.


        :param severity: The severity of this ThresholdDto.  # noqa: E501
        :type: int
        """

        self._severity = severity

    @property
    def trigger_expression(self):
        """Gets the trigger_expression of this ThresholdDto.  # noqa: E501

        Specify the criteria under which a triggered alert is generated for the threshold. The criteria is defined in disjunctive normal form in which propositions are the id fields of ThresholdConditionDto(s) in the 'triggerConditions' field. We use '|' to denote the 'or' relation and ',' to denote the 'and' relation. For example, suppose that there are three conditions with ids 1,2 and 3, a triggerExpression '1,2|3' means that when either condition 1 and condition 2 hold or condition 3 hold, the threshold alert is triggered.  # noqa: E501

        :return: The trigger_expression of this ThresholdDto.  # noqa: E501
        :rtype: str
        """
        return self._trigger_expression

    @trigger_expression.setter
    def trigger_expression(self, trigger_expression):
        """Sets the trigger_expression of this ThresholdDto.

        Specify the criteria under which a triggered alert is generated for the threshold. The criteria is defined in disjunctive normal form in which propositions are the id fields of ThresholdConditionDto(s) in the 'triggerConditions' field. We use '|' to denote the 'or' relation and ',' to denote the 'and' relation. For example, suppose that there are three conditions with ids 1,2 and 3, a triggerExpression '1,2|3' means that when either condition 1 and condition 2 hold or condition 3 hold, the threshold alert is triggered.  # noqa: E501

        :param trigger_expression: The trigger_expression of this ThresholdDto.  # noqa: E501
        :type: str
        """

        self._trigger_expression = trigger_expression

    @property
    def clear_expression(self):
        """Gets the clear_expression of this ThresholdDto.  # noqa: E501

        Specify the criteria under which a cleared alert is generated for the threshold. The criteria is defined in disjunctive normal form in which propositions are the id fields of ThresholdConditionDto(s) in the 'clearConditions' field. We use '|' to denote the 'or' relation and ',' to denote the 'and' relation. For example, suppose that there are three conditions with ids 1,2 and 3, a clearExpression may be '1,2|3' means that when either condition 1 and condition 2 hold or condition 3 hold, the threshold alert is cleared.  # noqa: E501

        :return: The clear_expression of this ThresholdDto.  # noqa: E501
        :rtype: str
        """
        return self._clear_expression

    @clear_expression.setter
    def clear_expression(self, clear_expression):
        """Sets the clear_expression of this ThresholdDto.

        Specify the criteria under which a cleared alert is generated for the threshold. The criteria is defined in disjunctive normal form in which propositions are the id fields of ThresholdConditionDto(s) in the 'clearConditions' field. We use '|' to denote the 'or' relation and ',' to denote the 'and' relation. For example, suppose that there are three conditions with ids 1,2 and 3, a clearExpression may be '1,2|3' means that when either condition 1 and condition 2 hold or condition 3 hold, the threshold alert is cleared.  # noqa: E501

        :param clear_expression: The clear_expression of this ThresholdDto.  # noqa: E501
        :type: str
        """

        self._clear_expression = clear_expression

    @property
    def user_enabled(self):
        """Gets the user_enabled of this ThresholdDto.  # noqa: E501


        :return: The user_enabled of this ThresholdDto.  # noqa: E501
        :rtype: int
        """
        return self._user_enabled

    @user_enabled.setter
    def user_enabled(self, user_enabled):
        """Sets the user_enabled of this ThresholdDto.


        :param user_enabled: The user_enabled of this ThresholdDto.  # noqa: E501
        :type: int
        """

        self._user_enabled = user_enabled

    @property
    def policy_enabled(self):
        """Gets the policy_enabled of this ThresholdDto.  # noqa: E501

        [Output Only]  # noqa: E501

        :return: The policy_enabled of this ThresholdDto.  # noqa: E501
        :rtype: int
        """
        return self._policy_enabled

    @policy_enabled.setter
    def policy_enabled(self, policy_enabled):
        """Sets the policy_enabled of this ThresholdDto.

        [Output Only]  # noqa: E501

        :param policy_enabled: The policy_enabled of this ThresholdDto.  # noqa: E501
        :type: int
        """

        self._policy_enabled = policy_enabled

    @property
    def mail_to(self):
        """Gets the mail_to of this ThresholdDto.  # noqa: E501


        :return: The mail_to of this ThresholdDto.  # noqa: E501
        :rtype: str
        """
        return self._mail_to

    @mail_to.setter
    def mail_to(self, mail_to):
        """Sets the mail_to of this ThresholdDto.


        :param mail_to: The mail_to of this ThresholdDto.  # noqa: E501
        :type: str
        """

        self._mail_to = mail_to

    @property
    def mail_once(self):
        """Gets the mail_once of this ThresholdDto.  # noqa: E501


        :return: The mail_once of this ThresholdDto.  # noqa: E501
        :rtype: bool
        """
        return self._mail_once

    @mail_once.setter
    def mail_once(self, mail_once):
        """Sets the mail_once of this ThresholdDto.


        :param mail_once: The mail_once of this ThresholdDto.  # noqa: E501
        :type: bool
        """

        self._mail_once = mail_once

    @property
    def mail_period(self):
        """Gets the mail_period of this ThresholdDto.  # noqa: E501


        :return: The mail_period of this ThresholdDto.  # noqa: E501
        :rtype: int
        """
        return self._mail_period

    @mail_period.setter
    def mail_period(self, mail_period):
        """Sets the mail_period of this ThresholdDto.


        :param mail_period: The mail_period of this ThresholdDto.  # noqa: E501
        :type: int
        """

        self._mail_period = mail_period

    @property
    def last_updated(self):
        """Gets the last_updated of this ThresholdDto.  # noqa: E501

        Unix timestamp with milliseconds format  # noqa: E501

        :return: The last_updated of this ThresholdDto.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ThresholdDto.

        Unix timestamp with milliseconds format  # noqa: E501

        :param last_updated: The last_updated of this ThresholdDto.  # noqa: E501
        :type: int
        """

        self._last_updated = last_updated

    @property
    def use_default_traps(self):
        """Gets the use_default_traps of this ThresholdDto.  # noqa: E501


        :return: The use_default_traps of this ThresholdDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_default_traps

    @use_default_traps.setter
    def use_default_traps(self, use_default_traps):
        """Sets the use_default_traps of this ThresholdDto.


        :param use_default_traps: The use_default_traps of this ThresholdDto.  # noqa: E501
        :type: bool
        """

        self._use_default_traps = use_default_traps

    @property
    def use_device_traps(self):
        """Gets the use_device_traps of this ThresholdDto.  # noqa: E501


        :return: The use_device_traps of this ThresholdDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_device_traps

    @use_device_traps.setter
    def use_device_traps(self, use_device_traps):
        """Sets the use_device_traps of this ThresholdDto.


        :param use_device_traps: The use_device_traps of this ThresholdDto.  # noqa: E501
        :type: bool
        """

        self._use_device_traps = use_device_traps

    @property
    def use_custom_traps(self):
        """Gets the use_custom_traps of this ThresholdDto.  # noqa: E501


        :return: The use_custom_traps of this ThresholdDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_custom_traps

    @use_custom_traps.setter
    def use_custom_traps(self, use_custom_traps):
        """Sets the use_custom_traps of this ThresholdDto.


        :param use_custom_traps: The use_custom_traps of this ThresholdDto.  # noqa: E501
        :type: bool
        """

        self._use_custom_traps = use_custom_traps

    @property
    def trigger_message(self):
        """Gets the trigger_message of this ThresholdDto.  # noqa: E501


        :return: The trigger_message of this ThresholdDto.  # noqa: E501
        :rtype: str
        """
        return self._trigger_message

    @trigger_message.setter
    def trigger_message(self, trigger_message):
        """Sets the trigger_message of this ThresholdDto.


        :param trigger_message: The trigger_message of this ThresholdDto.  # noqa: E501
        :type: str
        """

        self._trigger_message = trigger_message

    @property
    def clear_message(self):
        """Gets the clear_message of this ThresholdDto.  # noqa: E501


        :return: The clear_message of this ThresholdDto.  # noqa: E501
        :rtype: str
        """
        return self._clear_message

    @clear_message.setter
    def clear_message(self, clear_message):
        """Sets the clear_message of this ThresholdDto.


        :param clear_message: The clear_message of this ThresholdDto.  # noqa: E501
        :type: str
        """

        self._clear_message = clear_message

    @property
    def append_condition_messages(self):
        """Gets the append_condition_messages of this ThresholdDto.  # noqa: E501


        :return: The append_condition_messages of this ThresholdDto.  # noqa: E501
        :rtype: bool
        """
        return self._append_condition_messages

    @append_condition_messages.setter
    def append_condition_messages(self, append_condition_messages):
        """Sets the append_condition_messages of this ThresholdDto.


        :param append_condition_messages: The append_condition_messages of this ThresholdDto.  # noqa: E501
        :type: bool
        """

        self._append_condition_messages = append_condition_messages

    @property
    def type(self):
        """Gets the type of this ThresholdDto.  # noqa: E501

        [Output Only]  # noqa: E501

        :return: The type of this ThresholdDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ThresholdDto.

        [Output Only]  # noqa: E501

        :param type: The type of this ThresholdDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def peer_id(self):
        """Gets the peer_id of this ThresholdDto.  # noqa: E501

        [Output Only]  # noqa: E501

        :return: The peer_id of this ThresholdDto.  # noqa: E501
        :rtype: int
        """
        return self._peer_id

    @peer_id.setter
    def peer_id(self, peer_id):
        """Sets the peer_id of this ThresholdDto.

        [Output Only]  # noqa: E501

        :param peer_id: The peer_id of this ThresholdDto.  # noqa: E501
        :type: int
        """

        self._peer_id = peer_id

    @property
    def flow_dto(self):
        """Gets the flow_dto of this ThresholdDto.  # noqa: E501


        :return: The flow_dto of this ThresholdDto.  # noqa: E501
        :rtype: FlowDto
        """
        return self._flow_dto

    @flow_dto.setter
    def flow_dto(self, flow_dto):
        """Sets the flow_dto of this ThresholdDto.


        :param flow_dto: The flow_dto of this ThresholdDto.  # noqa: E501
        :type: FlowDto
        """

        self._flow_dto = flow_dto

    @property
    def trigger_conditions(self):
        """Gets the trigger_conditions of this ThresholdDto.  # noqa: E501

        Caveat: in order to do CRUD on trigger conditions of an existing threshold, use the /flow/{deviceId}/{thresholdId}/{triggerType}/conditions endpoints. The 'PUT /flow/{deviceId}/{thresholdId}' endpoint does not update trigger conditions for an existing threshold  # noqa: E501

        :return: The trigger_conditions of this ThresholdDto.  # noqa: E501
        :rtype: list[ThresholdConditionDto]
        """
        return self._trigger_conditions

    @trigger_conditions.setter
    def trigger_conditions(self, trigger_conditions):
        """Sets the trigger_conditions of this ThresholdDto.

        Caveat: in order to do CRUD on trigger conditions of an existing threshold, use the /flow/{deviceId}/{thresholdId}/{triggerType}/conditions endpoints. The 'PUT /flow/{deviceId}/{thresholdId}' endpoint does not update trigger conditions for an existing threshold  # noqa: E501

        :param trigger_conditions: The trigger_conditions of this ThresholdDto.  # noqa: E501
        :type: list[ThresholdConditionDto]
        """

        self._trigger_conditions = trigger_conditions

    @property
    def clear_conditions(self):
        """Gets the clear_conditions of this ThresholdDto.  # noqa: E501

        Caveat: in order to do CRUD on clear conditions of an existing threshold, use the /flow/{deviceId}/{thresholdId}/{triggerType}/conditions endpoints. The 'PUT /flow/{deviceId}/{thresholdId}' endpoint does not update clear conditions for an existing threshold  # noqa: E501

        :return: The clear_conditions of this ThresholdDto.  # noqa: E501
        :rtype: list[ThresholdConditionDto]
        """
        return self._clear_conditions

    @clear_conditions.setter
    def clear_conditions(self, clear_conditions):
        """Sets the clear_conditions of this ThresholdDto.

        Caveat: in order to do CRUD on clear conditions of an existing threshold, use the /flow/{deviceId}/{thresholdId}/{triggerType}/conditions endpoints. The 'PUT /flow/{deviceId}/{thresholdId}' endpoint does not update clear conditions for an existing threshold  # noqa: E501

        :param clear_conditions: The clear_conditions of this ThresholdDto.  # noqa: E501
        :type: list[ThresholdConditionDto]
        """

        self._clear_conditions = clear_conditions

    @property
    def absolute_times(self):
        """Gets the absolute_times of this ThresholdDto.  # noqa: E501


        :return: The absolute_times of this ThresholdDto.  # noqa: E501
        :rtype: list[ThresholdAbsoluteTimeDto]
        """
        return self._absolute_times

    @absolute_times.setter
    def absolute_times(self, absolute_times):
        """Sets the absolute_times of this ThresholdDto.


        :param absolute_times: The absolute_times of this ThresholdDto.  # noqa: E501
        :type: list[ThresholdAbsoluteTimeDto]
        """

        self._absolute_times = absolute_times

    @property
    def relative_times(self):
        """Gets the relative_times of this ThresholdDto.  # noqa: E501


        :return: The relative_times of this ThresholdDto.  # noqa: E501
        :rtype: list[ThresholdRelativeTimeDto]
        """
        return self._relative_times

    @relative_times.setter
    def relative_times(self, relative_times):
        """Sets the relative_times of this ThresholdDto.


        :param relative_times: The relative_times of this ThresholdDto.  # noqa: E501
        :type: list[ThresholdRelativeTimeDto]
        """

        self._relative_times = relative_times

    @property
    def trap_destinations(self):
        """Gets the trap_destinations of this ThresholdDto.  # noqa: E501


        :return: The trap_destinations of this ThresholdDto.  # noqa: E501
        :rtype: list[ThresholdTrapDestinationDto]
        """
        return self._trap_destinations

    @trap_destinations.setter
    def trap_destinations(self, trap_destinations):
        """Sets the trap_destinations of this ThresholdDto.


        :param trap_destinations: The trap_destinations of this ThresholdDto.  # noqa: E501
        :type: list[ThresholdTrapDestinationDto]
        """

        self._trap_destinations = trap_destinations

    @property
    def device_group(self):
        """Gets the device_group of this ThresholdDto.  # noqa: E501


        :return: The device_group of this ThresholdDto.  # noqa: E501
        :rtype: bool
        """
        return self._device_group

    @device_group.setter
    def device_group(self, device_group):
        """Sets the device_group of this ThresholdDto.


        :param device_group: The device_group of this ThresholdDto.  # noqa: E501
        :type: bool
        """

        self._device_group = device_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThresholdDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThresholdDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
