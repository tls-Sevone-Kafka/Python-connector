# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TopologyLayout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'directionality': 'str',
        'groups': 'list[int]',
        'graph_height': 'str',
        'graph_width': 'str'
    }

    attribute_map = {
        'type': 'type',
        'directionality': 'directionality',
        'groups': 'groups',
        'graph_height': 'graphHeight',
        'graph_width': 'graphWidth'
    }

    def __init__(self, type=None, directionality=None, groups=None, graph_height=None, graph_width=None):  # noqa: E501
        """TopologyLayout - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._directionality = None
        self._groups = None
        self._graph_height = None
        self._graph_width = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if directionality is not None:
            self.directionality = directionality
        if groups is not None:
            self.groups = groups
        if graph_height is not None:
            self.graph_height = graph_height
        if graph_width is not None:
            self.graph_width = graph_width

    @property
    def type(self):
        """Gets the type of this TopologyLayout.  # noqa: E501


        :return: The type of this TopologyLayout.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TopologyLayout.


        :param type: The type of this TopologyLayout.  # noqa: E501
        :type: str
        """
        allowed_values = ["horizontal", "vertical", "concentric"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def directionality(self):
        """Gets the directionality of this TopologyLayout.  # noqa: E501


        :return: The directionality of this TopologyLayout.  # noqa: E501
        :rtype: str
        """
        return self._directionality

    @directionality.setter
    def directionality(self, directionality):
        """Sets the directionality of this TopologyLayout.


        :param directionality: The directionality of this TopologyLayout.  # noqa: E501
        :type: str
        """
        allowed_values = ["LeftToRight", "RightToLeft", "TopToBottom", "BottomToTop"]  # noqa: E501
        if directionality not in allowed_values:
            raise ValueError(
                "Invalid value for `directionality` ({0}), must be one of {1}"  # noqa: E501
                .format(directionality, allowed_values)
            )

        self._directionality = directionality

    @property
    def groups(self):
        """Gets the groups of this TopologyLayout.  # noqa: E501


        :return: The groups of this TopologyLayout.  # noqa: E501
        :rtype: list[int]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this TopologyLayout.


        :param groups: The groups of this TopologyLayout.  # noqa: E501
        :type: list[int]
        """

        self._groups = groups

    @property
    def graph_height(self):
        """Gets the graph_height of this TopologyLayout.  # noqa: E501


        :return: The graph_height of this TopologyLayout.  # noqa: E501
        :rtype: str
        """
        return self._graph_height

    @graph_height.setter
    def graph_height(self, graph_height):
        """Sets the graph_height of this TopologyLayout.


        :param graph_height: The graph_height of this TopologyLayout.  # noqa: E501
        :type: str
        """
        allowed_values = ["Small", "Medium", "Large"]  # noqa: E501
        if graph_height not in allowed_values:
            raise ValueError(
                "Invalid value for `graph_height` ({0}), must be one of {1}"  # noqa: E501
                .format(graph_height, allowed_values)
            )

        self._graph_height = graph_height

    @property
    def graph_width(self):
        """Gets the graph_width of this TopologyLayout.  # noqa: E501


        :return: The graph_width of this TopologyLayout.  # noqa: E501
        :rtype: str
        """
        return self._graph_width

    @graph_width.setter
    def graph_width(self, graph_width):
        """Sets the graph_width of this TopologyLayout.


        :param graph_width: The graph_width of this TopologyLayout.  # noqa: E501
        :type: str
        """
        allowed_values = ["Small", "Medium", "Large"]  # noqa: E501
        if graph_width not in allowed_values:
            raise ValueError(
                "Invalid value for `graph_width` ({0}), must be one of {1}"  # noqa: E501
                .format(graph_width, allowed_values)
            )

        self._graph_width = graph_width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopologyLayout, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopologyLayout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
