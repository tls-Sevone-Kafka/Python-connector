# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RawDataSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_aggregation': 'DataAggregationSetting',
        'raw_data': 'RawDataSetting',
        'units': 'UnitsSetting',
        'work_hours': 'WorkHoursSetting',
        'csv': 'CSVSetting'
    }

    attribute_map = {
        'data_aggregation': 'dataAggregation',
        'raw_data': 'rawData',
        'units': 'units',
        'work_hours': 'workHours',
        'csv': 'csv'
    }

    def __init__(self, data_aggregation=None, raw_data=None, units=None, work_hours=None, csv=None):  # noqa: E501
        """RawDataSettings - a model defined in Swagger"""  # noqa: E501
        self._data_aggregation = None
        self._raw_data = None
        self._units = None
        self._work_hours = None
        self._csv = None
        self.discriminator = None
        if data_aggregation is not None:
            self.data_aggregation = data_aggregation
        self.raw_data = raw_data
        self.units = units
        if work_hours is not None:
            self.work_hours = work_hours
        if csv is not None:
            self.csv = csv

    @property
    def data_aggregation(self):
        """Gets the data_aggregation of this RawDataSettings.  # noqa: E501


        :return: The data_aggregation of this RawDataSettings.  # noqa: E501
        :rtype: DataAggregationSetting
        """
        return self._data_aggregation

    @data_aggregation.setter
    def data_aggregation(self, data_aggregation):
        """Sets the data_aggregation of this RawDataSettings.


        :param data_aggregation: The data_aggregation of this RawDataSettings.  # noqa: E501
        :type: DataAggregationSetting
        """

        self._data_aggregation = data_aggregation

    @property
    def raw_data(self):
        """Gets the raw_data of this RawDataSettings.  # noqa: E501


        :return: The raw_data of this RawDataSettings.  # noqa: E501
        :rtype: RawDataSetting
        """
        return self._raw_data

    @raw_data.setter
    def raw_data(self, raw_data):
        """Sets the raw_data of this RawDataSettings.


        :param raw_data: The raw_data of this RawDataSettings.  # noqa: E501
        :type: RawDataSetting
        """
        if raw_data is None:
            raise ValueError("Invalid value for `raw_data`, must not be `None`")  # noqa: E501

        self._raw_data = raw_data

    @property
    def units(self):
        """Gets the units of this RawDataSettings.  # noqa: E501


        :return: The units of this RawDataSettings.  # noqa: E501
        :rtype: UnitsSetting
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this RawDataSettings.


        :param units: The units of this RawDataSettings.  # noqa: E501
        :type: UnitsSetting
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")  # noqa: E501

        self._units = units

    @property
    def work_hours(self):
        """Gets the work_hours of this RawDataSettings.  # noqa: E501


        :return: The work_hours of this RawDataSettings.  # noqa: E501
        :rtype: WorkHoursSetting
        """
        return self._work_hours

    @work_hours.setter
    def work_hours(self, work_hours):
        """Sets the work_hours of this RawDataSettings.


        :param work_hours: The work_hours of this RawDataSettings.  # noqa: E501
        :type: WorkHoursSetting
        """

        self._work_hours = work_hours

    @property
    def csv(self):
        """Gets the csv of this RawDataSettings.  # noqa: E501


        :return: The csv of this RawDataSettings.  # noqa: E501
        :rtype: CSVSetting
        """
        return self._csv

    @csv.setter
    def csv(self, csv):
        """Sets the csv of this RawDataSettings.


        :param csv: The csv of this RawDataSettings.  # noqa: E501
        :type: CSVSetting
        """

        self._csv = csv

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RawDataSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RawDataSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
