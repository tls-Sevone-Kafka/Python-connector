# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlowDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'interface_id': 'int',
        'direction_id': 'int',
        'view_id': 'int',
        'filter_id': 'int',
        'trigger_duration': 'int',
        'clear_duration': 'int'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'interface_id': 'interfaceId',
        'direction_id': 'directionId',
        'view_id': 'viewId',
        'filter_id': 'filterId',
        'trigger_duration': 'triggerDuration',
        'clear_duration': 'clearDuration'
    }

    def __init__(self, device_id=None, interface_id=None, direction_id=None, view_id=None, filter_id=None, trigger_duration=None, clear_duration=None):  # noqa: E501
        """FlowDto - a model defined in Swagger"""  # noqa: E501
        self._device_id = None
        self._interface_id = None
        self._direction_id = None
        self._view_id = None
        self._filter_id = None
        self._trigger_duration = None
        self._clear_duration = None
        self.discriminator = None
        if device_id is not None:
            self.device_id = device_id
        if interface_id is not None:
            self.interface_id = interface_id
        if direction_id is not None:
            self.direction_id = direction_id
        if view_id is not None:
            self.view_id = view_id
        if filter_id is not None:
            self.filter_id = filter_id
        if trigger_duration is not None:
            self.trigger_duration = trigger_duration
        if clear_duration is not None:
            self.clear_duration = clear_duration

    @property
    def device_id(self):
        """Gets the device_id of this FlowDto.  # noqa: E501


        :return: The device_id of this FlowDto.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this FlowDto.


        :param device_id: The device_id of this FlowDto.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def interface_id(self):
        """Gets the interface_id of this FlowDto.  # noqa: E501


        :return: The interface_id of this FlowDto.  # noqa: E501
        :rtype: int
        """
        return self._interface_id

    @interface_id.setter
    def interface_id(self, interface_id):
        """Sets the interface_id of this FlowDto.


        :param interface_id: The interface_id of this FlowDto.  # noqa: E501
        :type: int
        """

        self._interface_id = interface_id

    @property
    def direction_id(self):
        """Gets the direction_id of this FlowDto.  # noqa: E501


        :return: The direction_id of this FlowDto.  # noqa: E501
        :rtype: int
        """
        return self._direction_id

    @direction_id.setter
    def direction_id(self, direction_id):
        """Sets the direction_id of this FlowDto.


        :param direction_id: The direction_id of this FlowDto.  # noqa: E501
        :type: int
        """

        self._direction_id = direction_id

    @property
    def view_id(self):
        """Gets the view_id of this FlowDto.  # noqa: E501


        :return: The view_id of this FlowDto.  # noqa: E501
        :rtype: int
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this FlowDto.


        :param view_id: The view_id of this FlowDto.  # noqa: E501
        :type: int
        """

        self._view_id = view_id

    @property
    def filter_id(self):
        """Gets the filter_id of this FlowDto.  # noqa: E501


        :return: The filter_id of this FlowDto.  # noqa: E501
        :rtype: int
        """
        return self._filter_id

    @filter_id.setter
    def filter_id(self, filter_id):
        """Sets the filter_id of this FlowDto.


        :param filter_id: The filter_id of this FlowDto.  # noqa: E501
        :type: int
        """

        self._filter_id = filter_id

    @property
    def trigger_duration(self):
        """Gets the trigger_duration of this FlowDto.  # noqa: E501


        :return: The trigger_duration of this FlowDto.  # noqa: E501
        :rtype: int
        """
        return self._trigger_duration

    @trigger_duration.setter
    def trigger_duration(self, trigger_duration):
        """Sets the trigger_duration of this FlowDto.


        :param trigger_duration: The trigger_duration of this FlowDto.  # noqa: E501
        :type: int
        """

        self._trigger_duration = trigger_duration

    @property
    def clear_duration(self):
        """Gets the clear_duration of this FlowDto.  # noqa: E501


        :return: The clear_duration of this FlowDto.  # noqa: E501
        :rtype: int
        """
        return self._clear_duration

    @clear_duration.setter
    def clear_duration(self, clear_duration):
        """Sets the clear_duration of this FlowDto.


        :param clear_duration: The clear_duration of this FlowDto.  # noqa: E501
        :type: int
        """

        self._clear_duration = clear_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlowDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
