# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetFlowDeviceFilterDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ids': 'list[int]',
        'origin_ip': 'str',
        'versions': 'str',
        'peers': 'list[int]',
        'name': 'str',
        'system_name': 'str',
        'override_name': 'int',
        'visible': 'int',
        'allowed': 'bool',
        'search_text': 'str'
    }

    attribute_map = {
        'ids': 'ids',
        'origin_ip': 'originIp',
        'versions': 'versions',
        'peers': 'peers',
        'name': 'name',
        'system_name': 'systemName',
        'override_name': 'overrideName',
        'visible': 'visible',
        'allowed': 'allowed',
        'search_text': 'searchText'
    }

    def __init__(self, ids=None, origin_ip=None, versions=None, peers=None, name=None, system_name=None, override_name=None, visible=None, allowed=None, search_text=None):  # noqa: E501
        """NetFlowDeviceFilterDto - a model defined in Swagger"""  # noqa: E501
        self._ids = None
        self._origin_ip = None
        self._versions = None
        self._peers = None
        self._name = None
        self._system_name = None
        self._override_name = None
        self._visible = None
        self._allowed = None
        self._search_text = None
        self.discriminator = None
        if ids is not None:
            self.ids = ids
        if origin_ip is not None:
            self.origin_ip = origin_ip
        if versions is not None:
            self.versions = versions
        if peers is not None:
            self.peers = peers
        if name is not None:
            self.name = name
        if system_name is not None:
            self.system_name = system_name
        if override_name is not None:
            self.override_name = override_name
        if visible is not None:
            self.visible = visible
        if allowed is not None:
            self.allowed = allowed
        if search_text is not None:
            self.search_text = search_text

    @property
    def ids(self):
        """Gets the ids of this NetFlowDeviceFilterDto.  # noqa: E501


        :return: The ids of this NetFlowDeviceFilterDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this NetFlowDeviceFilterDto.


        :param ids: The ids of this NetFlowDeviceFilterDto.  # noqa: E501
        :type: list[int]
        """

        self._ids = ids

    @property
    def origin_ip(self):
        """Gets the origin_ip of this NetFlowDeviceFilterDto.  # noqa: E501


        :return: The origin_ip of this NetFlowDeviceFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._origin_ip

    @origin_ip.setter
    def origin_ip(self, origin_ip):
        """Sets the origin_ip of this NetFlowDeviceFilterDto.


        :param origin_ip: The origin_ip of this NetFlowDeviceFilterDto.  # noqa: E501
        :type: str
        """

        self._origin_ip = origin_ip

    @property
    def versions(self):
        """Gets the versions of this NetFlowDeviceFilterDto.  # noqa: E501


        :return: The versions of this NetFlowDeviceFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this NetFlowDeviceFilterDto.


        :param versions: The versions of this NetFlowDeviceFilterDto.  # noqa: E501
        :type: str
        """

        self._versions = versions

    @property
    def peers(self):
        """Gets the peers of this NetFlowDeviceFilterDto.  # noqa: E501


        :return: The peers of this NetFlowDeviceFilterDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._peers

    @peers.setter
    def peers(self, peers):
        """Sets the peers of this NetFlowDeviceFilterDto.


        :param peers: The peers of this NetFlowDeviceFilterDto.  # noqa: E501
        :type: list[int]
        """

        self._peers = peers

    @property
    def name(self):
        """Gets the name of this NetFlowDeviceFilterDto.  # noqa: E501


        :return: The name of this NetFlowDeviceFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetFlowDeviceFilterDto.


        :param name: The name of this NetFlowDeviceFilterDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def system_name(self):
        """Gets the system_name of this NetFlowDeviceFilterDto.  # noqa: E501


        :return: The system_name of this NetFlowDeviceFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this NetFlowDeviceFilterDto.


        :param system_name: The system_name of this NetFlowDeviceFilterDto.  # noqa: E501
        :type: str
        """

        self._system_name = system_name

    @property
    def override_name(self):
        """Gets the override_name of this NetFlowDeviceFilterDto.  # noqa: E501


        :return: The override_name of this NetFlowDeviceFilterDto.  # noqa: E501
        :rtype: int
        """
        return self._override_name

    @override_name.setter
    def override_name(self, override_name):
        """Sets the override_name of this NetFlowDeviceFilterDto.


        :param override_name: The override_name of this NetFlowDeviceFilterDto.  # noqa: E501
        :type: int
        """

        self._override_name = override_name

    @property
    def visible(self):
        """Gets the visible of this NetFlowDeviceFilterDto.  # noqa: E501


        :return: The visible of this NetFlowDeviceFilterDto.  # noqa: E501
        :rtype: int
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this NetFlowDeviceFilterDto.


        :param visible: The visible of this NetFlowDeviceFilterDto.  # noqa: E501
        :type: int
        """

        self._visible = visible

    @property
    def allowed(self):
        """Gets the allowed of this NetFlowDeviceFilterDto.  # noqa: E501


        :return: The allowed of this NetFlowDeviceFilterDto.  # noqa: E501
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this NetFlowDeviceFilterDto.


        :param allowed: The allowed of this NetFlowDeviceFilterDto.  # noqa: E501
        :type: bool
        """

        self._allowed = allowed

    @property
    def search_text(self):
        """Gets the search_text of this NetFlowDeviceFilterDto.  # noqa: E501


        :return: The search_text of this NetFlowDeviceFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._search_text

    @search_text.setter
    def search_text(self, search_text):
        """Sets the search_text of this NetFlowDeviceFilterDto.


        :param search_text: The search_text of this NetFlowDeviceFilterDto.  # noqa: E501
        :type: str
        """

        self._search_text = search_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetFlowDeviceFilterDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetFlowDeviceFilterDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
