# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeAlert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'severity': 'int',
        'device_id': 'int',
        'device_name': 'str',
        'start_time': 'int',
        'end_time': 'int',
        'message': 'str',
        'assigned_name': 'str',
        'occurrences': 'int'
    }

    attribute_map = {
        'id': 'id',
        'severity': 'severity',
        'device_id': 'deviceId',
        'device_name': 'deviceName',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'message': 'message',
        'assigned_name': 'assignedName',
        'occurrences': 'occurrences'
    }

    def __init__(self, id=None, severity=None, device_id=None, device_name=None, start_time=None, end_time=None, message=None, assigned_name=None, occurrences=None):  # noqa: E501
        """NodeAlert - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._severity = None
        self._device_id = None
        self._device_name = None
        self._start_time = None
        self._end_time = None
        self._message = None
        self._assigned_name = None
        self._occurrences = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if severity is not None:
            self.severity = severity
        if device_id is not None:
            self.device_id = device_id
        if device_name is not None:
            self.device_name = device_name
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if message is not None:
            self.message = message
        if assigned_name is not None:
            self.assigned_name = assigned_name
        if occurrences is not None:
            self.occurrences = occurrences

    @property
    def id(self):
        """Gets the id of this NodeAlert.  # noqa: E501


        :return: The id of this NodeAlert.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeAlert.


        :param id: The id of this NodeAlert.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def severity(self):
        """Gets the severity of this NodeAlert.  # noqa: E501


        :return: The severity of this NodeAlert.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this NodeAlert.


        :param severity: The severity of this NodeAlert.  # noqa: E501
        :type: int
        """

        self._severity = severity

    @property
    def device_id(self):
        """Gets the device_id of this NodeAlert.  # noqa: E501


        :return: The device_id of this NodeAlert.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this NodeAlert.


        :param device_id: The device_id of this NodeAlert.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def device_name(self):
        """Gets the device_name of this NodeAlert.  # noqa: E501


        :return: The device_name of this NodeAlert.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this NodeAlert.


        :param device_name: The device_name of this NodeAlert.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def start_time(self):
        """Gets the start_time of this NodeAlert.  # noqa: E501

        Unix timestamp with milliseconds proximity  # noqa: E501

        :return: The start_time of this NodeAlert.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this NodeAlert.

        Unix timestamp with milliseconds proximity  # noqa: E501

        :param start_time: The start_time of this NodeAlert.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this NodeAlert.  # noqa: E501

        Unix timestamp with milliseconds proximity  # noqa: E501

        :return: The end_time of this NodeAlert.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this NodeAlert.

        Unix timestamp with milliseconds proximity  # noqa: E501

        :param end_time: The end_time of this NodeAlert.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def message(self):
        """Gets the message of this NodeAlert.  # noqa: E501


        :return: The message of this NodeAlert.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NodeAlert.


        :param message: The message of this NodeAlert.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def assigned_name(self):
        """Gets the assigned_name of this NodeAlert.  # noqa: E501


        :return: The assigned_name of this NodeAlert.  # noqa: E501
        :rtype: str
        """
        return self._assigned_name

    @assigned_name.setter
    def assigned_name(self, assigned_name):
        """Sets the assigned_name of this NodeAlert.


        :param assigned_name: The assigned_name of this NodeAlert.  # noqa: E501
        :type: str
        """

        self._assigned_name = assigned_name

    @property
    def occurrences(self):
        """Gets the occurrences of this NodeAlert.  # noqa: E501


        :return: The occurrences of this NodeAlert.  # noqa: E501
        :rtype: int
        """
        return self._occurrences

    @occurrences.setter
    def occurrences(self, occurrences):
        """Sets the occurrences of this NodeAlert.


        :param occurrences: The occurrences of this NodeAlert.  # noqa: E501
        :type: int
        """

        self._occurrences = occurrences

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeAlert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeAlert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
