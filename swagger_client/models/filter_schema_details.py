# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilterSchemaDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'group': 'str',
        'id': 'str',
        'operations': 'list[str]',
        'values': 'dict(str, str)',
        'values_data_store': 'FilterDataStoreDetails',
        'values_description': 'str',
        'filter_expression': 'str',
        'filter_expression_text': 'str'
    }

    attribute_map = {
        'title': 'title',
        'group': 'group',
        'id': 'id',
        'operations': 'operations',
        'values': 'values',
        'values_data_store': 'valuesDataStore',
        'values_description': 'valuesDescription',
        'filter_expression': 'filterExpression',
        'filter_expression_text': 'filterExpressionText'
    }

    def __init__(self, title=None, group=None, id=None, operations=None, values=None, values_data_store=None, values_description=None, filter_expression=None, filter_expression_text=None):  # noqa: E501
        """FilterSchemaDetails - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._group = None
        self._id = None
        self._operations = None
        self._values = None
        self._values_data_store = None
        self._values_description = None
        self._filter_expression = None
        self._filter_expression_text = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if group is not None:
            self.group = group
        if id is not None:
            self.id = id
        if operations is not None:
            self.operations = operations
        if values is not None:
            self.values = values
        if values_data_store is not None:
            self.values_data_store = values_data_store
        if values_description is not None:
            self.values_description = values_description
        if filter_expression is not None:
            self.filter_expression = filter_expression
        if filter_expression_text is not None:
            self.filter_expression_text = filter_expression_text

    @property
    def title(self):
        """Gets the title of this FilterSchemaDetails.  # noqa: E501


        :return: The title of this FilterSchemaDetails.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FilterSchemaDetails.


        :param title: The title of this FilterSchemaDetails.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def group(self):
        """Gets the group of this FilterSchemaDetails.  # noqa: E501


        :return: The group of this FilterSchemaDetails.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this FilterSchemaDetails.


        :param group: The group of this FilterSchemaDetails.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this FilterSchemaDetails.  # noqa: E501


        :return: The id of this FilterSchemaDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FilterSchemaDetails.


        :param id: The id of this FilterSchemaDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def operations(self):
        """Gets the operations of this FilterSchemaDetails.  # noqa: E501


        :return: The operations of this FilterSchemaDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this FilterSchemaDetails.


        :param operations: The operations of this FilterSchemaDetails.  # noqa: E501
        :type: list[str]
        """

        self._operations = operations

    @property
    def values(self):
        """Gets the values of this FilterSchemaDetails.  # noqa: E501


        :return: The values of this FilterSchemaDetails.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this FilterSchemaDetails.


        :param values: The values of this FilterSchemaDetails.  # noqa: E501
        :type: dict(str, str)
        """

        self._values = values

    @property
    def values_data_store(self):
        """Gets the values_data_store of this FilterSchemaDetails.  # noqa: E501


        :return: The values_data_store of this FilterSchemaDetails.  # noqa: E501
        :rtype: FilterDataStoreDetails
        """
        return self._values_data_store

    @values_data_store.setter
    def values_data_store(self, values_data_store):
        """Sets the values_data_store of this FilterSchemaDetails.


        :param values_data_store: The values_data_store of this FilterSchemaDetails.  # noqa: E501
        :type: FilterDataStoreDetails
        """

        self._values_data_store = values_data_store

    @property
    def values_description(self):
        """Gets the values_description of this FilterSchemaDetails.  # noqa: E501


        :return: The values_description of this FilterSchemaDetails.  # noqa: E501
        :rtype: str
        """
        return self._values_description

    @values_description.setter
    def values_description(self, values_description):
        """Sets the values_description of this FilterSchemaDetails.


        :param values_description: The values_description of this FilterSchemaDetails.  # noqa: E501
        :type: str
        """

        self._values_description = values_description

    @property
    def filter_expression(self):
        """Gets the filter_expression of this FilterSchemaDetails.  # noqa: E501


        :return: The filter_expression of this FilterSchemaDetails.  # noqa: E501
        :rtype: str
        """
        return self._filter_expression

    @filter_expression.setter
    def filter_expression(self, filter_expression):
        """Sets the filter_expression of this FilterSchemaDetails.


        :param filter_expression: The filter_expression of this FilterSchemaDetails.  # noqa: E501
        :type: str
        """

        self._filter_expression = filter_expression

    @property
    def filter_expression_text(self):
        """Gets the filter_expression_text of this FilterSchemaDetails.  # noqa: E501


        :return: The filter_expression_text of this FilterSchemaDetails.  # noqa: E501
        :rtype: str
        """
        return self._filter_expression_text

    @filter_expression_text.setter
    def filter_expression_text(self, filter_expression_text):
        """Sets the filter_expression_text of this FilterSchemaDetails.


        :param filter_expression_text: The filter_expression_text of this FilterSchemaDetails.  # noqa: E501
        :type: str
        """

        self._filter_expression_text = filter_expression_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterSchemaDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterSchemaDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
