# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceAlertsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'is_deleted': 'bool',
        'is_new': 'bool',
        'name': 'str',
        'alternate_name': 'str',
        'description': 'str',
        'ip_address': 'str',
        'manual_ip': 'bool',
        'peer_id': 'int',
        'poll_frequency': 'int',
        'date_added': 'int',
        'last_discovery': 'int',
        'allow_delete': 'bool',
        'disable_polling': 'bool',
        'disable_concurrent_polling': 'bool',
        'disable_thresholding': 'bool',
        'timezone': 'str',
        'workhours_group_id': 'int',
        'num_elements': 'int',
        'plugin_info': 'dict(str, PluginInfoResponse)',
        'objects': 'list[DeviceObjectDto]',
        'plugin_manager_id': 'int',
        'is_queued_for_deletion': 'bool',
        'queued_user': 'int',
        'queued_time': 'int',
        'ips_update_time': 'float',
        'ips15min': 'float',
        'ips1hour': 'float',
        'ips2hour': 'float',
        'ips6hour': 'float',
        'ips24hour': 'float',
        'ips7day': 'float',
        'alerts': 'list[AlertDto]'
    }

    attribute_map = {
        'id': 'id',
        'is_deleted': 'isDeleted',
        'is_new': 'isNew',
        'name': 'name',
        'alternate_name': 'alternateName',
        'description': 'description',
        'ip_address': 'ipAddress',
        'manual_ip': 'manualIP',
        'peer_id': 'peerId',
        'poll_frequency': 'pollFrequency',
        'date_added': 'dateAdded',
        'last_discovery': 'lastDiscovery',
        'allow_delete': 'allowDelete',
        'disable_polling': 'disablePolling',
        'disable_concurrent_polling': 'disableConcurrentPolling',
        'disable_thresholding': 'disableThresholding',
        'timezone': 'timezone',
        'workhours_group_id': 'workhoursGroupId',
        'num_elements': 'numElements',
        'plugin_info': 'pluginInfo',
        'objects': 'objects',
        'plugin_manager_id': 'pluginManagerId',
        'is_queued_for_deletion': 'isQueuedForDeletion',
        'queued_user': 'queuedUser',
        'queued_time': 'queuedTime',
        'ips_update_time': 'ipsUpdateTime',
        'ips15min': 'ips15min',
        'ips1hour': 'ips1hour',
        'ips2hour': 'ips2hour',
        'ips6hour': 'ips6hour',
        'ips24hour': 'ips24hour',
        'ips7day': 'ips7day',
        'alerts': 'alerts'
    }

    def __init__(self, id=None, is_deleted=None, is_new=None, name=None, alternate_name=None, description=None, ip_address=None, manual_ip=None, peer_id=None, poll_frequency=None, date_added=None, last_discovery=None, allow_delete=None, disable_polling=None, disable_concurrent_polling=None, disable_thresholding=None, timezone=None, workhours_group_id=None, num_elements=None, plugin_info=None, objects=None, plugin_manager_id=None, is_queued_for_deletion=None, queued_user=None, queued_time=None, ips_update_time=None, ips15min=None, ips1hour=None, ips2hour=None, ips6hour=None, ips24hour=None, ips7day=None, alerts=None):  # noqa: E501
        """DeviceAlertsDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._is_deleted = None
        self._is_new = None
        self._name = None
        self._alternate_name = None
        self._description = None
        self._ip_address = None
        self._manual_ip = None
        self._peer_id = None
        self._poll_frequency = None
        self._date_added = None
        self._last_discovery = None
        self._allow_delete = None
        self._disable_polling = None
        self._disable_concurrent_polling = None
        self._disable_thresholding = None
        self._timezone = None
        self._workhours_group_id = None
        self._num_elements = None
        self._plugin_info = None
        self._objects = None
        self._plugin_manager_id = None
        self._is_queued_for_deletion = None
        self._queued_user = None
        self._queued_time = None
        self._ips_update_time = None
        self._ips15min = None
        self._ips1hour = None
        self._ips2hour = None
        self._ips6hour = None
        self._ips24hour = None
        self._ips7day = None
        self._alerts = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if is_new is not None:
            self.is_new = is_new
        if name is not None:
            self.name = name
        if alternate_name is not None:
            self.alternate_name = alternate_name
        if description is not None:
            self.description = description
        if ip_address is not None:
            self.ip_address = ip_address
        if manual_ip is not None:
            self.manual_ip = manual_ip
        if peer_id is not None:
            self.peer_id = peer_id
        if poll_frequency is not None:
            self.poll_frequency = poll_frequency
        if date_added is not None:
            self.date_added = date_added
        if last_discovery is not None:
            self.last_discovery = last_discovery
        if allow_delete is not None:
            self.allow_delete = allow_delete
        if disable_polling is not None:
            self.disable_polling = disable_polling
        if disable_concurrent_polling is not None:
            self.disable_concurrent_polling = disable_concurrent_polling
        if disable_thresholding is not None:
            self.disable_thresholding = disable_thresholding
        if timezone is not None:
            self.timezone = timezone
        if workhours_group_id is not None:
            self.workhours_group_id = workhours_group_id
        if num_elements is not None:
            self.num_elements = num_elements
        if plugin_info is not None:
            self.plugin_info = plugin_info
        if objects is not None:
            self.objects = objects
        if plugin_manager_id is not None:
            self.plugin_manager_id = plugin_manager_id
        if is_queued_for_deletion is not None:
            self.is_queued_for_deletion = is_queued_for_deletion
        if queued_user is not None:
            self.queued_user = queued_user
        if queued_time is not None:
            self.queued_time = queued_time
        if ips_update_time is not None:
            self.ips_update_time = ips_update_time
        if ips15min is not None:
            self.ips15min = ips15min
        if ips1hour is not None:
            self.ips1hour = ips1hour
        if ips2hour is not None:
            self.ips2hour = ips2hour
        if ips6hour is not None:
            self.ips6hour = ips6hour
        if ips24hour is not None:
            self.ips24hour = ips24hour
        if ips7day is not None:
            self.ips7day = ips7day
        if alerts is not None:
            self.alerts = alerts

    @property
    def id(self):
        """Gets the id of this DeviceAlertsDto.  # noqa: E501


        :return: The id of this DeviceAlertsDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceAlertsDto.


        :param id: The id of this DeviceAlertsDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_deleted(self):
        """Gets the is_deleted of this DeviceAlertsDto.  # noqa: E501


        :return: The is_deleted of this DeviceAlertsDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this DeviceAlertsDto.


        :param is_deleted: The is_deleted of this DeviceAlertsDto.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def is_new(self):
        """Gets the is_new of this DeviceAlertsDto.  # noqa: E501


        :return: The is_new of this DeviceAlertsDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_new

    @is_new.setter
    def is_new(self, is_new):
        """Sets the is_new of this DeviceAlertsDto.


        :param is_new: The is_new of this DeviceAlertsDto.  # noqa: E501
        :type: bool
        """

        self._is_new = is_new

    @property
    def name(self):
        """Gets the name of this DeviceAlertsDto.  # noqa: E501


        :return: The name of this DeviceAlertsDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceAlertsDto.


        :param name: The name of this DeviceAlertsDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def alternate_name(self):
        """Gets the alternate_name of this DeviceAlertsDto.  # noqa: E501


        :return: The alternate_name of this DeviceAlertsDto.  # noqa: E501
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this DeviceAlertsDto.


        :param alternate_name: The alternate_name of this DeviceAlertsDto.  # noqa: E501
        :type: str
        """

        self._alternate_name = alternate_name

    @property
    def description(self):
        """Gets the description of this DeviceAlertsDto.  # noqa: E501


        :return: The description of this DeviceAlertsDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceAlertsDto.


        :param description: The description of this DeviceAlertsDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def ip_address(self):
        """Gets the ip_address of this DeviceAlertsDto.  # noqa: E501


        :return: The ip_address of this DeviceAlertsDto.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this DeviceAlertsDto.


        :param ip_address: The ip_address of this DeviceAlertsDto.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def manual_ip(self):
        """Gets the manual_ip of this DeviceAlertsDto.  # noqa: E501


        :return: The manual_ip of this DeviceAlertsDto.  # noqa: E501
        :rtype: bool
        """
        return self._manual_ip

    @manual_ip.setter
    def manual_ip(self, manual_ip):
        """Sets the manual_ip of this DeviceAlertsDto.


        :param manual_ip: The manual_ip of this DeviceAlertsDto.  # noqa: E501
        :type: bool
        """

        self._manual_ip = manual_ip

    @property
    def peer_id(self):
        """Gets the peer_id of this DeviceAlertsDto.  # noqa: E501


        :return: The peer_id of this DeviceAlertsDto.  # noqa: E501
        :rtype: int
        """
        return self._peer_id

    @peer_id.setter
    def peer_id(self, peer_id):
        """Sets the peer_id of this DeviceAlertsDto.


        :param peer_id: The peer_id of this DeviceAlertsDto.  # noqa: E501
        :type: int
        """

        self._peer_id = peer_id

    @property
    def poll_frequency(self):
        """Gets the poll_frequency of this DeviceAlertsDto.  # noqa: E501


        :return: The poll_frequency of this DeviceAlertsDto.  # noqa: E501
        :rtype: int
        """
        return self._poll_frequency

    @poll_frequency.setter
    def poll_frequency(self, poll_frequency):
        """Sets the poll_frequency of this DeviceAlertsDto.


        :param poll_frequency: The poll_frequency of this DeviceAlertsDto.  # noqa: E501
        :type: int
        """

        self._poll_frequency = poll_frequency

    @property
    def date_added(self):
        """Gets the date_added of this DeviceAlertsDto.  # noqa: E501

        Unix timestamp with milliseconds proximity  # noqa: E501

        :return: The date_added of this DeviceAlertsDto.  # noqa: E501
        :rtype: int
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added):
        """Sets the date_added of this DeviceAlertsDto.

        Unix timestamp with milliseconds proximity  # noqa: E501

        :param date_added: The date_added of this DeviceAlertsDto.  # noqa: E501
        :type: int
        """

        self._date_added = date_added

    @property
    def last_discovery(self):
        """Gets the last_discovery of this DeviceAlertsDto.  # noqa: E501

        Unix timestamp with milliseconds proximity  # noqa: E501

        :return: The last_discovery of this DeviceAlertsDto.  # noqa: E501
        :rtype: int
        """
        return self._last_discovery

    @last_discovery.setter
    def last_discovery(self, last_discovery):
        """Sets the last_discovery of this DeviceAlertsDto.

        Unix timestamp with milliseconds proximity  # noqa: E501

        :param last_discovery: The last_discovery of this DeviceAlertsDto.  # noqa: E501
        :type: int
        """

        self._last_discovery = last_discovery

    @property
    def allow_delete(self):
        """Gets the allow_delete of this DeviceAlertsDto.  # noqa: E501


        :return: The allow_delete of this DeviceAlertsDto.  # noqa: E501
        :rtype: bool
        """
        return self._allow_delete

    @allow_delete.setter
    def allow_delete(self, allow_delete):
        """Sets the allow_delete of this DeviceAlertsDto.


        :param allow_delete: The allow_delete of this DeviceAlertsDto.  # noqa: E501
        :type: bool
        """

        self._allow_delete = allow_delete

    @property
    def disable_polling(self):
        """Gets the disable_polling of this DeviceAlertsDto.  # noqa: E501


        :return: The disable_polling of this DeviceAlertsDto.  # noqa: E501
        :rtype: bool
        """
        return self._disable_polling

    @disable_polling.setter
    def disable_polling(self, disable_polling):
        """Sets the disable_polling of this DeviceAlertsDto.


        :param disable_polling: The disable_polling of this DeviceAlertsDto.  # noqa: E501
        :type: bool
        """

        self._disable_polling = disable_polling

    @property
    def disable_concurrent_polling(self):
        """Gets the disable_concurrent_polling of this DeviceAlertsDto.  # noqa: E501


        :return: The disable_concurrent_polling of this DeviceAlertsDto.  # noqa: E501
        :rtype: bool
        """
        return self._disable_concurrent_polling

    @disable_concurrent_polling.setter
    def disable_concurrent_polling(self, disable_concurrent_polling):
        """Sets the disable_concurrent_polling of this DeviceAlertsDto.


        :param disable_concurrent_polling: The disable_concurrent_polling of this DeviceAlertsDto.  # noqa: E501
        :type: bool
        """

        self._disable_concurrent_polling = disable_concurrent_polling

    @property
    def disable_thresholding(self):
        """Gets the disable_thresholding of this DeviceAlertsDto.  # noqa: E501


        :return: The disable_thresholding of this DeviceAlertsDto.  # noqa: E501
        :rtype: bool
        """
        return self._disable_thresholding

    @disable_thresholding.setter
    def disable_thresholding(self, disable_thresholding):
        """Sets the disable_thresholding of this DeviceAlertsDto.


        :param disable_thresholding: The disable_thresholding of this DeviceAlertsDto.  # noqa: E501
        :type: bool
        """

        self._disable_thresholding = disable_thresholding

    @property
    def timezone(self):
        """Gets the timezone of this DeviceAlertsDto.  # noqa: E501


        :return: The timezone of this DeviceAlertsDto.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this DeviceAlertsDto.


        :param timezone: The timezone of this DeviceAlertsDto.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def workhours_group_id(self):
        """Gets the workhours_group_id of this DeviceAlertsDto.  # noqa: E501


        :return: The workhours_group_id of this DeviceAlertsDto.  # noqa: E501
        :rtype: int
        """
        return self._workhours_group_id

    @workhours_group_id.setter
    def workhours_group_id(self, workhours_group_id):
        """Sets the workhours_group_id of this DeviceAlertsDto.


        :param workhours_group_id: The workhours_group_id of this DeviceAlertsDto.  # noqa: E501
        :type: int
        """

        self._workhours_group_id = workhours_group_id

    @property
    def num_elements(self):
        """Gets the num_elements of this DeviceAlertsDto.  # noqa: E501


        :return: The num_elements of this DeviceAlertsDto.  # noqa: E501
        :rtype: int
        """
        return self._num_elements

    @num_elements.setter
    def num_elements(self, num_elements):
        """Sets the num_elements of this DeviceAlertsDto.


        :param num_elements: The num_elements of this DeviceAlertsDto.  # noqa: E501
        :type: int
        """

        self._num_elements = num_elements

    @property
    def plugin_info(self):
        """Gets the plugin_info of this DeviceAlertsDto.  # noqa: E501


        :return: The plugin_info of this DeviceAlertsDto.  # noqa: E501
        :rtype: dict(str, PluginInfoResponse)
        """
        return self._plugin_info

    @plugin_info.setter
    def plugin_info(self, plugin_info):
        """Sets the plugin_info of this DeviceAlertsDto.


        :param plugin_info: The plugin_info of this DeviceAlertsDto.  # noqa: E501
        :type: dict(str, PluginInfoResponse)
        """

        self._plugin_info = plugin_info

    @property
    def objects(self):
        """Gets the objects of this DeviceAlertsDto.  # noqa: E501


        :return: The objects of this DeviceAlertsDto.  # noqa: E501
        :rtype: list[DeviceObjectDto]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """Sets the objects of this DeviceAlertsDto.


        :param objects: The objects of this DeviceAlertsDto.  # noqa: E501
        :type: list[DeviceObjectDto]
        """

        self._objects = objects

    @property
    def plugin_manager_id(self):
        """Gets the plugin_manager_id of this DeviceAlertsDto.  # noqa: E501


        :return: The plugin_manager_id of this DeviceAlertsDto.  # noqa: E501
        :rtype: int
        """
        return self._plugin_manager_id

    @plugin_manager_id.setter
    def plugin_manager_id(self, plugin_manager_id):
        """Sets the plugin_manager_id of this DeviceAlertsDto.


        :param plugin_manager_id: The plugin_manager_id of this DeviceAlertsDto.  # noqa: E501
        :type: int
        """

        self._plugin_manager_id = plugin_manager_id

    @property
    def is_queued_for_deletion(self):
        """Gets the is_queued_for_deletion of this DeviceAlertsDto.  # noqa: E501


        :return: The is_queued_for_deletion of this DeviceAlertsDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_queued_for_deletion

    @is_queued_for_deletion.setter
    def is_queued_for_deletion(self, is_queued_for_deletion):
        """Sets the is_queued_for_deletion of this DeviceAlertsDto.


        :param is_queued_for_deletion: The is_queued_for_deletion of this DeviceAlertsDto.  # noqa: E501
        :type: bool
        """

        self._is_queued_for_deletion = is_queued_for_deletion

    @property
    def queued_user(self):
        """Gets the queued_user of this DeviceAlertsDto.  # noqa: E501


        :return: The queued_user of this DeviceAlertsDto.  # noqa: E501
        :rtype: int
        """
        return self._queued_user

    @queued_user.setter
    def queued_user(self, queued_user):
        """Sets the queued_user of this DeviceAlertsDto.


        :param queued_user: The queued_user of this DeviceAlertsDto.  # noqa: E501
        :type: int
        """

        self._queued_user = queued_user

    @property
    def queued_time(self):
        """Gets the queued_time of this DeviceAlertsDto.  # noqa: E501


        :return: The queued_time of this DeviceAlertsDto.  # noqa: E501
        :rtype: int
        """
        return self._queued_time

    @queued_time.setter
    def queued_time(self, queued_time):
        """Sets the queued_time of this DeviceAlertsDto.


        :param queued_time: The queued_time of this DeviceAlertsDto.  # noqa: E501
        :type: int
        """

        self._queued_time = queued_time

    @property
    def ips_update_time(self):
        """Gets the ips_update_time of this DeviceAlertsDto.  # noqa: E501


        :return: The ips_update_time of this DeviceAlertsDto.  # noqa: E501
        :rtype: float
        """
        return self._ips_update_time

    @ips_update_time.setter
    def ips_update_time(self, ips_update_time):
        """Sets the ips_update_time of this DeviceAlertsDto.


        :param ips_update_time: The ips_update_time of this DeviceAlertsDto.  # noqa: E501
        :type: float
        """

        self._ips_update_time = ips_update_time

    @property
    def ips15min(self):
        """Gets the ips15min of this DeviceAlertsDto.  # noqa: E501


        :return: The ips15min of this DeviceAlertsDto.  # noqa: E501
        :rtype: float
        """
        return self._ips15min

    @ips15min.setter
    def ips15min(self, ips15min):
        """Sets the ips15min of this DeviceAlertsDto.


        :param ips15min: The ips15min of this DeviceAlertsDto.  # noqa: E501
        :type: float
        """

        self._ips15min = ips15min

    @property
    def ips1hour(self):
        """Gets the ips1hour of this DeviceAlertsDto.  # noqa: E501


        :return: The ips1hour of this DeviceAlertsDto.  # noqa: E501
        :rtype: float
        """
        return self._ips1hour

    @ips1hour.setter
    def ips1hour(self, ips1hour):
        """Sets the ips1hour of this DeviceAlertsDto.


        :param ips1hour: The ips1hour of this DeviceAlertsDto.  # noqa: E501
        :type: float
        """

        self._ips1hour = ips1hour

    @property
    def ips2hour(self):
        """Gets the ips2hour of this DeviceAlertsDto.  # noqa: E501


        :return: The ips2hour of this DeviceAlertsDto.  # noqa: E501
        :rtype: float
        """
        return self._ips2hour

    @ips2hour.setter
    def ips2hour(self, ips2hour):
        """Sets the ips2hour of this DeviceAlertsDto.


        :param ips2hour: The ips2hour of this DeviceAlertsDto.  # noqa: E501
        :type: float
        """

        self._ips2hour = ips2hour

    @property
    def ips6hour(self):
        """Gets the ips6hour of this DeviceAlertsDto.  # noqa: E501


        :return: The ips6hour of this DeviceAlertsDto.  # noqa: E501
        :rtype: float
        """
        return self._ips6hour

    @ips6hour.setter
    def ips6hour(self, ips6hour):
        """Sets the ips6hour of this DeviceAlertsDto.


        :param ips6hour: The ips6hour of this DeviceAlertsDto.  # noqa: E501
        :type: float
        """

        self._ips6hour = ips6hour

    @property
    def ips24hour(self):
        """Gets the ips24hour of this DeviceAlertsDto.  # noqa: E501


        :return: The ips24hour of this DeviceAlertsDto.  # noqa: E501
        :rtype: float
        """
        return self._ips24hour

    @ips24hour.setter
    def ips24hour(self, ips24hour):
        """Sets the ips24hour of this DeviceAlertsDto.


        :param ips24hour: The ips24hour of this DeviceAlertsDto.  # noqa: E501
        :type: float
        """

        self._ips24hour = ips24hour

    @property
    def ips7day(self):
        """Gets the ips7day of this DeviceAlertsDto.  # noqa: E501


        :return: The ips7day of this DeviceAlertsDto.  # noqa: E501
        :rtype: float
        """
        return self._ips7day

    @ips7day.setter
    def ips7day(self, ips7day):
        """Sets the ips7day of this DeviceAlertsDto.


        :param ips7day: The ips7day of this DeviceAlertsDto.  # noqa: E501
        :type: float
        """

        self._ips7day = ips7day

    @property
    def alerts(self):
        """Gets the alerts of this DeviceAlertsDto.  # noqa: E501


        :return: The alerts of this DeviceAlertsDto.  # noqa: E501
        :rtype: list[AlertDto]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this DeviceAlertsDto.


        :param alerts: The alerts of this DeviceAlertsDto.  # noqa: E501
        :type: list[AlertDto]
        """

        self._alerts = alerts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceAlertsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceAlertsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
