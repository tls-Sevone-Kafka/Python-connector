# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TopologyFilterDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_ids': 'list[int]',
        'object_ids': 'list[DeviceObjectId]',
        'source_name': 'str',
        'relationship_type': 'str',
        'connection_id': 'int'
    }

    attribute_map = {
        'device_ids': 'deviceIds',
        'object_ids': 'objectIds',
        'source_name': 'sourceName',
        'relationship_type': 'relationshipType',
        'connection_id': 'connectionId'
    }

    def __init__(self, device_ids=None, object_ids=None, source_name=None, relationship_type=None, connection_id=None):  # noqa: E501
        """TopologyFilterDto - a model defined in Swagger"""  # noqa: E501
        self._device_ids = None
        self._object_ids = None
        self._source_name = None
        self._relationship_type = None
        self._connection_id = None
        self.discriminator = None
        if device_ids is not None:
            self.device_ids = device_ids
        if object_ids is not None:
            self.object_ids = object_ids
        if source_name is not None:
            self.source_name = source_name
        if relationship_type is not None:
            self.relationship_type = relationship_type
        if connection_id is not None:
            self.connection_id = connection_id

    @property
    def device_ids(self):
        """Gets the device_ids of this TopologyFilterDto.  # noqa: E501


        :return: The device_ids of this TopologyFilterDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._device_ids

    @device_ids.setter
    def device_ids(self, device_ids):
        """Sets the device_ids of this TopologyFilterDto.


        :param device_ids: The device_ids of this TopologyFilterDto.  # noqa: E501
        :type: list[int]
        """

        self._device_ids = device_ids

    @property
    def object_ids(self):
        """Gets the object_ids of this TopologyFilterDto.  # noqa: E501


        :return: The object_ids of this TopologyFilterDto.  # noqa: E501
        :rtype: list[DeviceObjectId]
        """
        return self._object_ids

    @object_ids.setter
    def object_ids(self, object_ids):
        """Sets the object_ids of this TopologyFilterDto.


        :param object_ids: The object_ids of this TopologyFilterDto.  # noqa: E501
        :type: list[DeviceObjectId]
        """

        self._object_ids = object_ids

    @property
    def source_name(self):
        """Gets the source_name of this TopologyFilterDto.  # noqa: E501


        :return: The source_name of this TopologyFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this TopologyFilterDto.


        :param source_name: The source_name of this TopologyFilterDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ARPCache, BGP, CDP, CISCOACI_LOGICAL, CISCOACI_PHYSICAL, IntraDevice, LLDP, MPLSLDP, OSPF, STP, STP_TRUNK, UserDefined, VMWARE_LOGICAL, VMWARE_PHYSICAL"]  # noqa: E501
        if source_name not in allowed_values:
            raise ValueError(
                "Invalid value for `source_name` ({0}), must be one of {1}"  # noqa: E501
                .format(source_name, allowed_values)
            )

        self._source_name = source_name

    @property
    def relationship_type(self):
        """Gets the relationship_type of this TopologyFilterDto.  # noqa: E501


        :return: The relationship_type of this TopologyFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._relationship_type

    @relationship_type.setter
    def relationship_type(self, relationship_type):
        """Sets the relationship_type of this TopologyFilterDto.


        :param relationship_type: The relationship_type of this TopologyFilterDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMPOSED_OF, MEMBER_OF, UNDERLYING, LAYERED_OVER, PEER, CONNECTED_VIA"]  # noqa: E501
        if relationship_type not in allowed_values:
            raise ValueError(
                "Invalid value for `relationship_type` ({0}), must be one of {1}"  # noqa: E501
                .format(relationship_type, allowed_values)
            )

        self._relationship_type = relationship_type

    @property
    def connection_id(self):
        """Gets the connection_id of this TopologyFilterDto.  # noqa: E501


        :return: The connection_id of this TopologyFilterDto.  # noqa: E501
        :rtype: int
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this TopologyFilterDto.


        :param connection_id: The connection_id of this TopologyFilterDto.  # noqa: E501
        :type: int
        """

        self._connection_id = connection_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopologyFilterDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopologyFilterDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
