# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RolePermissionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role_id': 'int',
        'target_role_id': 'int',
        'user_view': 'bool',
        'user_edit': 'bool',
        'role_view': 'bool',
        'role_edit': 'bool'
    }

    attribute_map = {
        'role_id': 'roleId',
        'target_role_id': 'targetRoleId',
        'user_view': 'userView',
        'user_edit': 'userEdit',
        'role_view': 'roleView',
        'role_edit': 'roleEdit'
    }

    def __init__(self, role_id=None, target_role_id=None, user_view=None, user_edit=None, role_view=None, role_edit=None):  # noqa: E501
        """RolePermissionDto - a model defined in Swagger"""  # noqa: E501
        self._role_id = None
        self._target_role_id = None
        self._user_view = None
        self._user_edit = None
        self._role_view = None
        self._role_edit = None
        self.discriminator = None
        if role_id is not None:
            self.role_id = role_id
        if target_role_id is not None:
            self.target_role_id = target_role_id
        if user_view is not None:
            self.user_view = user_view
        if user_edit is not None:
            self.user_edit = user_edit
        if role_view is not None:
            self.role_view = role_view
        if role_edit is not None:
            self.role_edit = role_edit

    @property
    def role_id(self):
        """Gets the role_id of this RolePermissionDto.  # noqa: E501


        :return: The role_id of this RolePermissionDto.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this RolePermissionDto.


        :param role_id: The role_id of this RolePermissionDto.  # noqa: E501
        :type: int
        """

        self._role_id = role_id

    @property
    def target_role_id(self):
        """Gets the target_role_id of this RolePermissionDto.  # noqa: E501


        :return: The target_role_id of this RolePermissionDto.  # noqa: E501
        :rtype: int
        """
        return self._target_role_id

    @target_role_id.setter
    def target_role_id(self, target_role_id):
        """Sets the target_role_id of this RolePermissionDto.


        :param target_role_id: The target_role_id of this RolePermissionDto.  # noqa: E501
        :type: int
        """

        self._target_role_id = target_role_id

    @property
    def user_view(self):
        """Gets the user_view of this RolePermissionDto.  # noqa: E501


        :return: The user_view of this RolePermissionDto.  # noqa: E501
        :rtype: bool
        """
        return self._user_view

    @user_view.setter
    def user_view(self, user_view):
        """Sets the user_view of this RolePermissionDto.


        :param user_view: The user_view of this RolePermissionDto.  # noqa: E501
        :type: bool
        """

        self._user_view = user_view

    @property
    def user_edit(self):
        """Gets the user_edit of this RolePermissionDto.  # noqa: E501


        :return: The user_edit of this RolePermissionDto.  # noqa: E501
        :rtype: bool
        """
        return self._user_edit

    @user_edit.setter
    def user_edit(self, user_edit):
        """Sets the user_edit of this RolePermissionDto.


        :param user_edit: The user_edit of this RolePermissionDto.  # noqa: E501
        :type: bool
        """

        self._user_edit = user_edit

    @property
    def role_view(self):
        """Gets the role_view of this RolePermissionDto.  # noqa: E501


        :return: The role_view of this RolePermissionDto.  # noqa: E501
        :rtype: bool
        """
        return self._role_view

    @role_view.setter
    def role_view(self, role_view):
        """Sets the role_view of this RolePermissionDto.


        :param role_view: The role_view of this RolePermissionDto.  # noqa: E501
        :type: bool
        """

        self._role_view = role_view

    @property
    def role_edit(self):
        """Gets the role_edit of this RolePermissionDto.  # noqa: E501


        :return: The role_edit of this RolePermissionDto.  # noqa: E501
        :rtype: bool
        """
        return self._role_edit

    @role_edit.setter
    def role_edit(self, role_edit):
        """Sets the role_edit of this RolePermissionDto.


        :param role_edit: The role_edit of this RolePermissionDto.  # noqa: E501
        :type: bool
        """

        self._role_edit = role_edit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RolePermissionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RolePermissionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
