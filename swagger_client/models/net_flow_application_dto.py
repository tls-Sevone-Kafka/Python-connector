# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetFlowApplicationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'protocol': 'int',
        'port': 'int',
        'port_max': 'int',
        'destination_port': 'int',
        'destination_port_max': 'int',
        'ip': 'str',
        'is_unidirectional': 'bool',
        'destination_ip': 'str',
        'service_profile_id': 'int',
        'min_tos': 'int',
        'max_tos': 'int'
    }

    attribute_map = {
        'id': 'id',
        'protocol': 'protocol',
        'port': 'port',
        'port_max': 'portMax',
        'destination_port': 'destinationPort',
        'destination_port_max': 'destinationPortMax',
        'ip': 'ip',
        'is_unidirectional': 'isUnidirectional',
        'destination_ip': 'destinationIp',
        'service_profile_id': 'serviceProfileId',
        'min_tos': 'minTos',
        'max_tos': 'maxTos'
    }

    def __init__(self, id=None, protocol=None, port=None, port_max=None, destination_port=None, destination_port_max=None, ip=None, is_unidirectional=None, destination_ip=None, service_profile_id=None, min_tos=None, max_tos=None):  # noqa: E501
        """NetFlowApplicationDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._protocol = None
        self._port = None
        self._port_max = None
        self._destination_port = None
        self._destination_port_max = None
        self._ip = None
        self._is_unidirectional = None
        self._destination_ip = None
        self._service_profile_id = None
        self._min_tos = None
        self._max_tos = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if protocol is not None:
            self.protocol = protocol
        if port is not None:
            self.port = port
        if port_max is not None:
            self.port_max = port_max
        if destination_port is not None:
            self.destination_port = destination_port
        if destination_port_max is not None:
            self.destination_port_max = destination_port_max
        if ip is not None:
            self.ip = ip
        if is_unidirectional is not None:
            self.is_unidirectional = is_unidirectional
        if destination_ip is not None:
            self.destination_ip = destination_ip
        if service_profile_id is not None:
            self.service_profile_id = service_profile_id
        if min_tos is not None:
            self.min_tos = min_tos
        if max_tos is not None:
            self.max_tos = max_tos

    @property
    def id(self):
        """Gets the id of this NetFlowApplicationDto.  # noqa: E501


        :return: The id of this NetFlowApplicationDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetFlowApplicationDto.


        :param id: The id of this NetFlowApplicationDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def protocol(self):
        """Gets the protocol of this NetFlowApplicationDto.  # noqa: E501


        :return: The protocol of this NetFlowApplicationDto.  # noqa: E501
        :rtype: int
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this NetFlowApplicationDto.


        :param protocol: The protocol of this NetFlowApplicationDto.  # noqa: E501
        :type: int
        """

        self._protocol = protocol

    @property
    def port(self):
        """Gets the port of this NetFlowApplicationDto.  # noqa: E501


        :return: The port of this NetFlowApplicationDto.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this NetFlowApplicationDto.


        :param port: The port of this NetFlowApplicationDto.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def port_max(self):
        """Gets the port_max of this NetFlowApplicationDto.  # noqa: E501


        :return: The port_max of this NetFlowApplicationDto.  # noqa: E501
        :rtype: int
        """
        return self._port_max

    @port_max.setter
    def port_max(self, port_max):
        """Sets the port_max of this NetFlowApplicationDto.


        :param port_max: The port_max of this NetFlowApplicationDto.  # noqa: E501
        :type: int
        """

        self._port_max = port_max

    @property
    def destination_port(self):
        """Gets the destination_port of this NetFlowApplicationDto.  # noqa: E501


        :return: The destination_port of this NetFlowApplicationDto.  # noqa: E501
        :rtype: int
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this NetFlowApplicationDto.


        :param destination_port: The destination_port of this NetFlowApplicationDto.  # noqa: E501
        :type: int
        """

        self._destination_port = destination_port

    @property
    def destination_port_max(self):
        """Gets the destination_port_max of this NetFlowApplicationDto.  # noqa: E501


        :return: The destination_port_max of this NetFlowApplicationDto.  # noqa: E501
        :rtype: int
        """
        return self._destination_port_max

    @destination_port_max.setter
    def destination_port_max(self, destination_port_max):
        """Sets the destination_port_max of this NetFlowApplicationDto.


        :param destination_port_max: The destination_port_max of this NetFlowApplicationDto.  # noqa: E501
        :type: int
        """

        self._destination_port_max = destination_port_max

    @property
    def ip(self):
        """Gets the ip of this NetFlowApplicationDto.  # noqa: E501


        :return: The ip of this NetFlowApplicationDto.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this NetFlowApplicationDto.


        :param ip: The ip of this NetFlowApplicationDto.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def is_unidirectional(self):
        """Gets the is_unidirectional of this NetFlowApplicationDto.  # noqa: E501


        :return: The is_unidirectional of this NetFlowApplicationDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_unidirectional

    @is_unidirectional.setter
    def is_unidirectional(self, is_unidirectional):
        """Sets the is_unidirectional of this NetFlowApplicationDto.


        :param is_unidirectional: The is_unidirectional of this NetFlowApplicationDto.  # noqa: E501
        :type: bool
        """

        self._is_unidirectional = is_unidirectional

    @property
    def destination_ip(self):
        """Gets the destination_ip of this NetFlowApplicationDto.  # noqa: E501


        :return: The destination_ip of this NetFlowApplicationDto.  # noqa: E501
        :rtype: str
        """
        return self._destination_ip

    @destination_ip.setter
    def destination_ip(self, destination_ip):
        """Sets the destination_ip of this NetFlowApplicationDto.


        :param destination_ip: The destination_ip of this NetFlowApplicationDto.  # noqa: E501
        :type: str
        """

        self._destination_ip = destination_ip

    @property
    def service_profile_id(self):
        """Gets the service_profile_id of this NetFlowApplicationDto.  # noqa: E501


        :return: The service_profile_id of this NetFlowApplicationDto.  # noqa: E501
        :rtype: int
        """
        return self._service_profile_id

    @service_profile_id.setter
    def service_profile_id(self, service_profile_id):
        """Sets the service_profile_id of this NetFlowApplicationDto.


        :param service_profile_id: The service_profile_id of this NetFlowApplicationDto.  # noqa: E501
        :type: int
        """

        self._service_profile_id = service_profile_id

    @property
    def min_tos(self):
        """Gets the min_tos of this NetFlowApplicationDto.  # noqa: E501


        :return: The min_tos of this NetFlowApplicationDto.  # noqa: E501
        :rtype: int
        """
        return self._min_tos

    @min_tos.setter
    def min_tos(self, min_tos):
        """Sets the min_tos of this NetFlowApplicationDto.


        :param min_tos: The min_tos of this NetFlowApplicationDto.  # noqa: E501
        :type: int
        """

        self._min_tos = min_tos

    @property
    def max_tos(self):
        """Gets the max_tos of this NetFlowApplicationDto.  # noqa: E501


        :return: The max_tos of this NetFlowApplicationDto.  # noqa: E501
        :rtype: int
        """
        return self._max_tos

    @max_tos.setter
    def max_tos(self, max_tos):
        """Sets the max_tos of this NetFlowApplicationDto.


        :param max_tos: The max_tos of this NetFlowApplicationDto.  # noqa: E501
        :type: int
        """

        self._max_tos = max_tos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetFlowApplicationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetFlowApplicationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
