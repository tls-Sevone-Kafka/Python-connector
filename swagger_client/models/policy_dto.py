# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PolicyDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'is_device_group': 'bool',
        'group_id': 'int',
        'group_id_list': 'list[int]',
        'is_member_of_any': 'bool',
        'plugin_id': 'int',
        'object_type_id': 'int',
        'object_sub_type_id': 'int',
        'severity': 'int',
        'trigger_expression': 'str',
        'clear_expression': 'str',
        'user_enabled': 'int',
        'mail_to': 'str',
        'mail_once': 'bool',
        'mail_period': 'int',
        'last_updated': 'int',
        'use_default_traps': 'bool',
        'use_device_traps': 'bool',
        'use_custom_traps': 'bool',
        'trigger_message': 'str',
        'clear_message': 'str',
        'append_condition_messages': 'bool',
        'type': 'str',
        'flow': 'PolicyFlowDto',
        'trigger_conditions': 'list[PolicyConditionDto]',
        'clear_conditions': 'list[PolicyConditionDto]',
        'folder_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'is_device_group': 'isDeviceGroup',
        'group_id': 'groupId',
        'group_id_list': 'groupIdList',
        'is_member_of_any': 'isMemberOfAny',
        'plugin_id': 'pluginId',
        'object_type_id': 'objectTypeId',
        'object_sub_type_id': 'objectSubTypeId',
        'severity': 'severity',
        'trigger_expression': 'triggerExpression',
        'clear_expression': 'clearExpression',
        'user_enabled': 'userEnabled',
        'mail_to': 'mailTo',
        'mail_once': 'mailOnce',
        'mail_period': 'mailPeriod',
        'last_updated': 'lastUpdated',
        'use_default_traps': 'useDefaultTraps',
        'use_device_traps': 'useDeviceTraps',
        'use_custom_traps': 'useCustomTraps',
        'trigger_message': 'triggerMessage',
        'clear_message': 'clearMessage',
        'append_condition_messages': 'appendConditionMessages',
        'type': 'type',
        'flow': 'flow',
        'trigger_conditions': 'triggerConditions',
        'clear_conditions': 'clearConditions',
        'folder_id': 'folderId'
    }

    def __init__(self, id=None, name=None, description=None, is_device_group=None, group_id=None, group_id_list=None, is_member_of_any=None, plugin_id=None, object_type_id=None, object_sub_type_id=None, severity=None, trigger_expression=None, clear_expression=None, user_enabled=None, mail_to=None, mail_once=None, mail_period=None, last_updated=None, use_default_traps=None, use_device_traps=None, use_custom_traps=None, trigger_message=None, clear_message=None, append_condition_messages=None, type=None, flow=None, trigger_conditions=None, clear_conditions=None, folder_id=None):  # noqa: E501
        """PolicyDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._is_device_group = None
        self._group_id = None
        self._group_id_list = None
        self._is_member_of_any = None
        self._plugin_id = None
        self._object_type_id = None
        self._object_sub_type_id = None
        self._severity = None
        self._trigger_expression = None
        self._clear_expression = None
        self._user_enabled = None
        self._mail_to = None
        self._mail_once = None
        self._mail_period = None
        self._last_updated = None
        self._use_default_traps = None
        self._use_device_traps = None
        self._use_custom_traps = None
        self._trigger_message = None
        self._clear_message = None
        self._append_condition_messages = None
        self._type = None
        self._flow = None
        self._trigger_conditions = None
        self._clear_conditions = None
        self._folder_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if is_device_group is not None:
            self.is_device_group = is_device_group
        if group_id is not None:
            self.group_id = group_id
        if group_id_list is not None:
            self.group_id_list = group_id_list
        if is_member_of_any is not None:
            self.is_member_of_any = is_member_of_any
        if plugin_id is not None:
            self.plugin_id = plugin_id
        if object_type_id is not None:
            self.object_type_id = object_type_id
        if object_sub_type_id is not None:
            self.object_sub_type_id = object_sub_type_id
        if severity is not None:
            self.severity = severity
        if trigger_expression is not None:
            self.trigger_expression = trigger_expression
        if clear_expression is not None:
            self.clear_expression = clear_expression
        if user_enabled is not None:
            self.user_enabled = user_enabled
        if mail_to is not None:
            self.mail_to = mail_to
        if mail_once is not None:
            self.mail_once = mail_once
        if mail_period is not None:
            self.mail_period = mail_period
        if last_updated is not None:
            self.last_updated = last_updated
        if use_default_traps is not None:
            self.use_default_traps = use_default_traps
        if use_device_traps is not None:
            self.use_device_traps = use_device_traps
        if use_custom_traps is not None:
            self.use_custom_traps = use_custom_traps
        if trigger_message is not None:
            self.trigger_message = trigger_message
        if clear_message is not None:
            self.clear_message = clear_message
        if append_condition_messages is not None:
            self.append_condition_messages = append_condition_messages
        if type is not None:
            self.type = type
        if flow is not None:
            self.flow = flow
        if trigger_conditions is not None:
            self.trigger_conditions = trigger_conditions
        if clear_conditions is not None:
            self.clear_conditions = clear_conditions
        if folder_id is not None:
            self.folder_id = folder_id

    @property
    def id(self):
        """Gets the id of this PolicyDto.  # noqa: E501

        [Output Only]  # noqa: E501

        :return: The id of this PolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolicyDto.

        [Output Only]  # noqa: E501

        :param id: The id of this PolicyDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PolicyDto.  # noqa: E501


        :return: The name of this PolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicyDto.


        :param name: The name of this PolicyDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this PolicyDto.  # noqa: E501


        :return: The description of this PolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PolicyDto.


        :param description: The description of this PolicyDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_device_group(self):
        """Gets the is_device_group of this PolicyDto.  # noqa: E501

        Determines whether policy is associated with deviceGroup or objectGroup.  # noqa: E501

        :return: The is_device_group of this PolicyDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_device_group

    @is_device_group.setter
    def is_device_group(self, is_device_group):
        """Sets the is_device_group of this PolicyDto.

        Determines whether policy is associated with deviceGroup or objectGroup.  # noqa: E501

        :param is_device_group: The is_device_group of this PolicyDto.  # noqa: E501
        :type: bool
        """

        self._is_device_group = is_device_group

    @property
    def group_id(self):
        """Gets the group_id of this PolicyDto.  # noqa: E501

        Deprecated. Use groupIdList instead.  # noqa: E501

        :return: The group_id of this PolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this PolicyDto.

        Deprecated. Use groupIdList instead.  # noqa: E501

        :param group_id: The group_id of this PolicyDto.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def group_id_list(self):
        """Gets the group_id_list of this PolicyDto.  # noqa: E501

        A list of group IDs associated with the policy. If groupIdList and groupId are both set, groupId is ignored.  # noqa: E501

        :return: The group_id_list of this PolicyDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._group_id_list

    @group_id_list.setter
    def group_id_list(self, group_id_list):
        """Sets the group_id_list of this PolicyDto.

        A list of group IDs associated with the policy. If groupIdList and groupId are both set, groupId is ignored.  # noqa: E501

        :param group_id_list: The group_id_list of this PolicyDto.  # noqa: E501
        :type: list[int]
        """

        self._group_id_list = group_id_list

    @property
    def is_member_of_any(self):
        """Gets the is_member_of_any of this PolicyDto.  # noqa: E501


        :return: The is_member_of_any of this PolicyDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_member_of_any

    @is_member_of_any.setter
    def is_member_of_any(self, is_member_of_any):
        """Sets the is_member_of_any of this PolicyDto.


        :param is_member_of_any: The is_member_of_any of this PolicyDto.  # noqa: E501
        :type: bool
        """

        self._is_member_of_any = is_member_of_any

    @property
    def plugin_id(self):
        """Gets the plugin_id of this PolicyDto.  # noqa: E501


        :return: The plugin_id of this PolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this PolicyDto.


        :param plugin_id: The plugin_id of this PolicyDto.  # noqa: E501
        :type: int
        """

        self._plugin_id = plugin_id

    @property
    def object_type_id(self):
        """Gets the object_type_id of this PolicyDto.  # noqa: E501


        :return: The object_type_id of this PolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._object_type_id

    @object_type_id.setter
    def object_type_id(self, object_type_id):
        """Sets the object_type_id of this PolicyDto.


        :param object_type_id: The object_type_id of this PolicyDto.  # noqa: E501
        :type: int
        """

        self._object_type_id = object_type_id

    @property
    def object_sub_type_id(self):
        """Gets the object_sub_type_id of this PolicyDto.  # noqa: E501


        :return: The object_sub_type_id of this PolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._object_sub_type_id

    @object_sub_type_id.setter
    def object_sub_type_id(self, object_sub_type_id):
        """Sets the object_sub_type_id of this PolicyDto.


        :param object_sub_type_id: The object_sub_type_id of this PolicyDto.  # noqa: E501
        :type: int
        """

        self._object_sub_type_id = object_sub_type_id

    @property
    def severity(self):
        """Gets the severity of this PolicyDto.  # noqa: E501


        :return: The severity of this PolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this PolicyDto.


        :param severity: The severity of this PolicyDto.  # noqa: E501
        :type: int
        """

        self._severity = severity

    @property
    def trigger_expression(self):
        """Gets the trigger_expression of this PolicyDto.  # noqa: E501

        Specify the criteria under which a triggered alert is generated for the policy. The criteria is defined in disjunctive normal form in which propositions are the id fields of PolicyConditionDto(s) in the 'triggerConditions' field. We use '|' to denote the 'or' relation and ',' to denote the 'and' relation. For example, suppose that there are three conditions with ids 1,2 and 3, a triggerExpression '1,2|3' means that when either condition 1 and condition 2 hold or condition 3 hold, the policy alert is triggered. Index of triggerConditions starts from 1  # noqa: E501

        :return: The trigger_expression of this PolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._trigger_expression

    @trigger_expression.setter
    def trigger_expression(self, trigger_expression):
        """Sets the trigger_expression of this PolicyDto.

        Specify the criteria under which a triggered alert is generated for the policy. The criteria is defined in disjunctive normal form in which propositions are the id fields of PolicyConditionDto(s) in the 'triggerConditions' field. We use '|' to denote the 'or' relation and ',' to denote the 'and' relation. For example, suppose that there are three conditions with ids 1,2 and 3, a triggerExpression '1,2|3' means that when either condition 1 and condition 2 hold or condition 3 hold, the policy alert is triggered. Index of triggerConditions starts from 1  # noqa: E501

        :param trigger_expression: The trigger_expression of this PolicyDto.  # noqa: E501
        :type: str
        """

        self._trigger_expression = trigger_expression

    @property
    def clear_expression(self):
        """Gets the clear_expression of this PolicyDto.  # noqa: E501

        Specify the criteria under which a cleared alert is generated for the policy. The criteria is defined in disjunctive normal form in which propositions are the id fields of PolicyConditionDto(s) in the 'clearConditions' field. We use '|' to denote the 'or' relation and ',' to denote the 'and' relation. For example, suppose that there are three conditions with ids 1,2 and 3, a clearExpression may be '1,2|3' means that when either condition 1 and condition 2 hold or condition 3 hold, the policy alert is cleared. Index of clearConditions starts from 1  # noqa: E501

        :return: The clear_expression of this PolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._clear_expression

    @clear_expression.setter
    def clear_expression(self, clear_expression):
        """Sets the clear_expression of this PolicyDto.

        Specify the criteria under which a cleared alert is generated for the policy. The criteria is defined in disjunctive normal form in which propositions are the id fields of PolicyConditionDto(s) in the 'clearConditions' field. We use '|' to denote the 'or' relation and ',' to denote the 'and' relation. For example, suppose that there are three conditions with ids 1,2 and 3, a clearExpression may be '1,2|3' means that when either condition 1 and condition 2 hold or condition 3 hold, the policy alert is cleared. Index of clearConditions starts from 1  # noqa: E501

        :param clear_expression: The clear_expression of this PolicyDto.  # noqa: E501
        :type: str
        """

        self._clear_expression = clear_expression

    @property
    def user_enabled(self):
        """Gets the user_enabled of this PolicyDto.  # noqa: E501


        :return: The user_enabled of this PolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._user_enabled

    @user_enabled.setter
    def user_enabled(self, user_enabled):
        """Sets the user_enabled of this PolicyDto.


        :param user_enabled: The user_enabled of this PolicyDto.  # noqa: E501
        :type: int
        """

        self._user_enabled = user_enabled

    @property
    def mail_to(self):
        """Gets the mail_to of this PolicyDto.  # noqa: E501


        :return: The mail_to of this PolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._mail_to

    @mail_to.setter
    def mail_to(self, mail_to):
        """Sets the mail_to of this PolicyDto.


        :param mail_to: The mail_to of this PolicyDto.  # noqa: E501
        :type: str
        """

        self._mail_to = mail_to

    @property
    def mail_once(self):
        """Gets the mail_once of this PolicyDto.  # noqa: E501


        :return: The mail_once of this PolicyDto.  # noqa: E501
        :rtype: bool
        """
        return self._mail_once

    @mail_once.setter
    def mail_once(self, mail_once):
        """Sets the mail_once of this PolicyDto.


        :param mail_once: The mail_once of this PolicyDto.  # noqa: E501
        :type: bool
        """

        self._mail_once = mail_once

    @property
    def mail_period(self):
        """Gets the mail_period of this PolicyDto.  # noqa: E501


        :return: The mail_period of this PolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._mail_period

    @mail_period.setter
    def mail_period(self, mail_period):
        """Sets the mail_period of this PolicyDto.


        :param mail_period: The mail_period of this PolicyDto.  # noqa: E501
        :type: int
        """

        self._mail_period = mail_period

    @property
    def last_updated(self):
        """Gets the last_updated of this PolicyDto.  # noqa: E501


        :return: The last_updated of this PolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this PolicyDto.


        :param last_updated: The last_updated of this PolicyDto.  # noqa: E501
        :type: int
        """

        self._last_updated = last_updated

    @property
    def use_default_traps(self):
        """Gets the use_default_traps of this PolicyDto.  # noqa: E501


        :return: The use_default_traps of this PolicyDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_default_traps

    @use_default_traps.setter
    def use_default_traps(self, use_default_traps):
        """Sets the use_default_traps of this PolicyDto.


        :param use_default_traps: The use_default_traps of this PolicyDto.  # noqa: E501
        :type: bool
        """

        self._use_default_traps = use_default_traps

    @property
    def use_device_traps(self):
        """Gets the use_device_traps of this PolicyDto.  # noqa: E501


        :return: The use_device_traps of this PolicyDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_device_traps

    @use_device_traps.setter
    def use_device_traps(self, use_device_traps):
        """Sets the use_device_traps of this PolicyDto.


        :param use_device_traps: The use_device_traps of this PolicyDto.  # noqa: E501
        :type: bool
        """

        self._use_device_traps = use_device_traps

    @property
    def use_custom_traps(self):
        """Gets the use_custom_traps of this PolicyDto.  # noqa: E501


        :return: The use_custom_traps of this PolicyDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_custom_traps

    @use_custom_traps.setter
    def use_custom_traps(self, use_custom_traps):
        """Sets the use_custom_traps of this PolicyDto.


        :param use_custom_traps: The use_custom_traps of this PolicyDto.  # noqa: E501
        :type: bool
        """

        self._use_custom_traps = use_custom_traps

    @property
    def trigger_message(self):
        """Gets the trigger_message of this PolicyDto.  # noqa: E501


        :return: The trigger_message of this PolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._trigger_message

    @trigger_message.setter
    def trigger_message(self, trigger_message):
        """Sets the trigger_message of this PolicyDto.


        :param trigger_message: The trigger_message of this PolicyDto.  # noqa: E501
        :type: str
        """

        self._trigger_message = trigger_message

    @property
    def clear_message(self):
        """Gets the clear_message of this PolicyDto.  # noqa: E501


        :return: The clear_message of this PolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._clear_message

    @clear_message.setter
    def clear_message(self, clear_message):
        """Sets the clear_message of this PolicyDto.


        :param clear_message: The clear_message of this PolicyDto.  # noqa: E501
        :type: str
        """

        self._clear_message = clear_message

    @property
    def append_condition_messages(self):
        """Gets the append_condition_messages of this PolicyDto.  # noqa: E501


        :return: The append_condition_messages of this PolicyDto.  # noqa: E501
        :rtype: bool
        """
        return self._append_condition_messages

    @append_condition_messages.setter
    def append_condition_messages(self, append_condition_messages):
        """Sets the append_condition_messages of this PolicyDto.


        :param append_condition_messages: The append_condition_messages of this PolicyDto.  # noqa: E501
        :type: bool
        """

        self._append_condition_messages = append_condition_messages

    @property
    def type(self):
        """Gets the type of this PolicyDto.  # noqa: E501


        :return: The type of this PolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PolicyDto.


        :param type: The type of this PolicyDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["other", "flow"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def flow(self):
        """Gets the flow of this PolicyDto.  # noqa: E501


        :return: The flow of this PolicyDto.  # noqa: E501
        :rtype: PolicyFlowDto
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this PolicyDto.


        :param flow: The flow of this PolicyDto.  # noqa: E501
        :type: PolicyFlowDto
        """

        self._flow = flow

    @property
    def trigger_conditions(self):
        """Gets the trigger_conditions of this PolicyDto.  # noqa: E501

        For POST, Array of Policy conditions where isTrigger will be true. In triggerExpression, use array index reference as an ID of triggerCondition to make expression where ID of 1st triggerCondition is 1. For PUT, we don't allow user to specify this field.  # noqa: E501

        :return: The trigger_conditions of this PolicyDto.  # noqa: E501
        :rtype: list[PolicyConditionDto]
        """
        return self._trigger_conditions

    @trigger_conditions.setter
    def trigger_conditions(self, trigger_conditions):
        """Sets the trigger_conditions of this PolicyDto.

        For POST, Array of Policy conditions where isTrigger will be true. In triggerExpression, use array index reference as an ID of triggerCondition to make expression where ID of 1st triggerCondition is 1. For PUT, we don't allow user to specify this field.  # noqa: E501

        :param trigger_conditions: The trigger_conditions of this PolicyDto.  # noqa: E501
        :type: list[PolicyConditionDto]
        """

        self._trigger_conditions = trigger_conditions

    @property
    def clear_conditions(self):
        """Gets the clear_conditions of this PolicyDto.  # noqa: E501

        For POST, Array of Policy conditions where isTrigger will be false. In clearExpression, use array index reference as an ID of clearCondition to make expression where ID of 1st clearCondition is 1. For PUT, we don't allow user to specify this field.  # noqa: E501

        :return: The clear_conditions of this PolicyDto.  # noqa: E501
        :rtype: list[PolicyConditionDto]
        """
        return self._clear_conditions

    @clear_conditions.setter
    def clear_conditions(self, clear_conditions):
        """Sets the clear_conditions of this PolicyDto.

        For POST, Array of Policy conditions where isTrigger will be false. In clearExpression, use array index reference as an ID of clearCondition to make expression where ID of 1st clearCondition is 1. For PUT, we don't allow user to specify this field.  # noqa: E501

        :param clear_conditions: The clear_conditions of this PolicyDto.  # noqa: E501
        :type: list[PolicyConditionDto]
        """

        self._clear_conditions = clear_conditions

    @property
    def folder_id(self):
        """Gets the folder_id of this PolicyDto.  # noqa: E501


        :return: The folder_id of this PolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this PolicyDto.


        :param folder_id: The folder_id of this PolicyDto.  # noqa: E501
        :type: int
        """

        self._folder_id = folder_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
