# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilterDataStoreDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'method': 'str',
        'url': 'str',
        'parameters': 'str',
        'key_field': 'str',
        'value_field': 'str'
    }

    attribute_map = {
        'method': 'method',
        'url': 'url',
        'parameters': 'parameters',
        'key_field': 'keyField',
        'value_field': 'valueField'
    }

    def __init__(self, method=None, url=None, parameters=None, key_field=None, value_field=None):  # noqa: E501
        """FilterDataStoreDetails - a model defined in Swagger"""  # noqa: E501
        self._method = None
        self._url = None
        self._parameters = None
        self._key_field = None
        self._value_field = None
        self.discriminator = None
        if method is not None:
            self.method = method
        if url is not None:
            self.url = url
        if parameters is not None:
            self.parameters = parameters
        if key_field is not None:
            self.key_field = key_field
        if value_field is not None:
            self.value_field = value_field

    @property
    def method(self):
        """Gets the method of this FilterDataStoreDetails.  # noqa: E501


        :return: The method of this FilterDataStoreDetails.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this FilterDataStoreDetails.


        :param method: The method of this FilterDataStoreDetails.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def url(self):
        """Gets the url of this FilterDataStoreDetails.  # noqa: E501


        :return: The url of this FilterDataStoreDetails.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FilterDataStoreDetails.


        :param url: The url of this FilterDataStoreDetails.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def parameters(self):
        """Gets the parameters of this FilterDataStoreDetails.  # noqa: E501


        :return: The parameters of this FilterDataStoreDetails.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this FilterDataStoreDetails.


        :param parameters: The parameters of this FilterDataStoreDetails.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    @property
    def key_field(self):
        """Gets the key_field of this FilterDataStoreDetails.  # noqa: E501


        :return: The key_field of this FilterDataStoreDetails.  # noqa: E501
        :rtype: str
        """
        return self._key_field

    @key_field.setter
    def key_field(self, key_field):
        """Sets the key_field of this FilterDataStoreDetails.


        :param key_field: The key_field of this FilterDataStoreDetails.  # noqa: E501
        :type: str
        """

        self._key_field = key_field

    @property
    def value_field(self):
        """Gets the value_field of this FilterDataStoreDetails.  # noqa: E501


        :return: The value_field of this FilterDataStoreDetails.  # noqa: E501
        :rtype: str
        """
        return self._value_field

    @value_field.setter
    def value_field(self, value_field):
        """Sets the value_field of this FilterDataStoreDetails.


        :param value_field: The value_field of this FilterDataStoreDetails.  # noqa: E501
        :type: str
        """

        self._value_field = value_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterDataStoreDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterDataStoreDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
