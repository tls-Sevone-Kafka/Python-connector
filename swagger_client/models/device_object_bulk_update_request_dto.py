# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceObjectBulkUpdateRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'alternate_name': 'str',
        'description': 'str',
        'is_enabled': 'bool',
        'enabled': 'str',
        'is_visible': 'bool',
        'poll_frequency': 'int',
        'visible': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'alternate_name': 'alternateName',
        'description': 'description',
        'is_enabled': 'isEnabled',
        'enabled': 'enabled',
        'is_visible': 'isVisible',
        'poll_frequency': 'pollFrequency',
        'visible': 'visible'
    }

    def __init__(self, id=None, name=None, alternate_name=None, description=None, is_enabled=None, enabled=None, is_visible=None, poll_frequency=None, visible=None):  # noqa: E501
        """DeviceObjectBulkUpdateRequestDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._alternate_name = None
        self._description = None
        self._is_enabled = None
        self._enabled = None
        self._is_visible = None
        self._poll_frequency = None
        self._visible = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        if alternate_name is not None:
            self.alternate_name = alternate_name
        self.description = description
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if enabled is not None:
            self.enabled = enabled
        if is_visible is not None:
            self.is_visible = is_visible
        self.poll_frequency = poll_frequency
        if visible is not None:
            self.visible = visible

    @property
    def id(self):
        """Gets the id of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501


        :return: The id of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceObjectBulkUpdateRequestDto.


        :param id: The id of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501


        :return: The name of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceObjectBulkUpdateRequestDto.


        :param name: The name of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def alternate_name(self):
        """Gets the alternate_name of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501


        :return: The alternate_name of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this DeviceObjectBulkUpdateRequestDto.


        :param alternate_name: The alternate_name of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :type: str
        """

        self._alternate_name = alternate_name

    @property
    def description(self):
        """Gets the description of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501


        :return: The description of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceObjectBulkUpdateRequestDto.


        :param description: The description of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def is_enabled(self):
        """Gets the is_enabled of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501

        This field is deprecated and would be removed in a newer version of the API. Please use 'enabled' field instead. When 'enabled' is also sent, 'isEnabled' will be ignored.  # noqa: E501

        :return: The is_enabled of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this DeviceObjectBulkUpdateRequestDto.

        This field is deprecated and would be removed in a newer version of the API. Please use 'enabled' field instead. When 'enabled' is also sent, 'isEnabled' will be ignored.  # noqa: E501

        :param is_enabled: The is_enabled of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def enabled(self):
        """Gets the enabled of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501


        :return: The enabled of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DeviceObjectBulkUpdateRequestDto.


        :param enabled: The enabled of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED", "AUTO"]  # noqa: E501
        if enabled not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled` ({0}), must be one of {1}"  # noqa: E501
                .format(enabled, allowed_values)
            )

        self._enabled = enabled

    @property
    def is_visible(self):
        """Gets the is_visible of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501


        :return: The is_visible of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this DeviceObjectBulkUpdateRequestDto.


        :param is_visible: The is_visible of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :type: bool
        """

        self._is_visible = is_visible

    @property
    def poll_frequency(self):
        """Gets the poll_frequency of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501


        :return: The poll_frequency of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._poll_frequency

    @poll_frequency.setter
    def poll_frequency(self, poll_frequency):
        """Sets the poll_frequency of this DeviceObjectBulkUpdateRequestDto.


        :param poll_frequency: The poll_frequency of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :type: int
        """
        if poll_frequency is None:
            raise ValueError("Invalid value for `poll_frequency`, must not be `None`")  # noqa: E501

        self._poll_frequency = poll_frequency

    @property
    def visible(self):
        """Gets the visible of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501


        :return: The visible of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this DeviceObjectBulkUpdateRequestDto.


        :param visible: The visible of this DeviceObjectBulkUpdateRequestDto.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceObjectBulkUpdateRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceObjectBulkUpdateRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
