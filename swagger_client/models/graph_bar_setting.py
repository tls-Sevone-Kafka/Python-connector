# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GraphBarSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'show_title': 'bool',
        'show_legend': 'bool',
        'show_frequency': 'bool',
        'show_last': 'bool',
        'show_aggregation': 'bool',
        'show_average': 'bool',
        'show_peak': 'bool',
        'show_timespan': 'bool',
        'show_valley': 'bool',
        'draw_graph_outline': 'bool',
        'scaled': 'bool',
        'pretty_y_axis': 'bool',
        'pretty_x_axis': 'bool',
        'scale_to_minimum_value': 'bool'
    }

    attribute_map = {
        'show_title': 'showTitle',
        'show_legend': 'showLegend',
        'show_frequency': 'showFrequency',
        'show_last': 'showLast',
        'show_aggregation': 'showAggregation',
        'show_average': 'showAverage',
        'show_peak': 'showPeak',
        'show_timespan': 'showTimespan',
        'show_valley': 'showValley',
        'draw_graph_outline': 'drawGraphOutline',
        'scaled': 'scaled',
        'pretty_y_axis': 'prettyYAxis',
        'pretty_x_axis': 'prettyXAxis',
        'scale_to_minimum_value': 'scaleToMinimumValue'
    }

    def __init__(self, show_title=None, show_legend=None, show_frequency=None, show_last=None, show_aggregation=None, show_average=None, show_peak=None, show_timespan=None, show_valley=None, draw_graph_outline=None, scaled=None, pretty_y_axis=None, pretty_x_axis=None, scale_to_minimum_value=None):  # noqa: E501
        """GraphBarSetting - a model defined in Swagger"""  # noqa: E501
        self._show_title = None
        self._show_legend = None
        self._show_frequency = None
        self._show_last = None
        self._show_aggregation = None
        self._show_average = None
        self._show_peak = None
        self._show_timespan = None
        self._show_valley = None
        self._draw_graph_outline = None
        self._scaled = None
        self._pretty_y_axis = None
        self._pretty_x_axis = None
        self._scale_to_minimum_value = None
        self.discriminator = None
        if show_title is not None:
            self.show_title = show_title
        if show_legend is not None:
            self.show_legend = show_legend
        if show_frequency is not None:
            self.show_frequency = show_frequency
        if show_last is not None:
            self.show_last = show_last
        if show_aggregation is not None:
            self.show_aggregation = show_aggregation
        if show_average is not None:
            self.show_average = show_average
        if show_peak is not None:
            self.show_peak = show_peak
        if show_timespan is not None:
            self.show_timespan = show_timespan
        if show_valley is not None:
            self.show_valley = show_valley
        if draw_graph_outline is not None:
            self.draw_graph_outline = draw_graph_outline
        if scaled is not None:
            self.scaled = scaled
        if pretty_y_axis is not None:
            self.pretty_y_axis = pretty_y_axis
        if pretty_x_axis is not None:
            self.pretty_x_axis = pretty_x_axis
        if scale_to_minimum_value is not None:
            self.scale_to_minimum_value = scale_to_minimum_value

    @property
    def show_title(self):
        """Gets the show_title of this GraphBarSetting.  # noqa: E501


        :return: The show_title of this GraphBarSetting.  # noqa: E501
        :rtype: bool
        """
        return self._show_title

    @show_title.setter
    def show_title(self, show_title):
        """Sets the show_title of this GraphBarSetting.


        :param show_title: The show_title of this GraphBarSetting.  # noqa: E501
        :type: bool
        """

        self._show_title = show_title

    @property
    def show_legend(self):
        """Gets the show_legend of this GraphBarSetting.  # noqa: E501


        :return: The show_legend of this GraphBarSetting.  # noqa: E501
        :rtype: bool
        """
        return self._show_legend

    @show_legend.setter
    def show_legend(self, show_legend):
        """Sets the show_legend of this GraphBarSetting.


        :param show_legend: The show_legend of this GraphBarSetting.  # noqa: E501
        :type: bool
        """

        self._show_legend = show_legend

    @property
    def show_frequency(self):
        """Gets the show_frequency of this GraphBarSetting.  # noqa: E501


        :return: The show_frequency of this GraphBarSetting.  # noqa: E501
        :rtype: bool
        """
        return self._show_frequency

    @show_frequency.setter
    def show_frequency(self, show_frequency):
        """Sets the show_frequency of this GraphBarSetting.


        :param show_frequency: The show_frequency of this GraphBarSetting.  # noqa: E501
        :type: bool
        """

        self._show_frequency = show_frequency

    @property
    def show_last(self):
        """Gets the show_last of this GraphBarSetting.  # noqa: E501


        :return: The show_last of this GraphBarSetting.  # noqa: E501
        :rtype: bool
        """
        return self._show_last

    @show_last.setter
    def show_last(self, show_last):
        """Sets the show_last of this GraphBarSetting.


        :param show_last: The show_last of this GraphBarSetting.  # noqa: E501
        :type: bool
        """

        self._show_last = show_last

    @property
    def show_aggregation(self):
        """Gets the show_aggregation of this GraphBarSetting.  # noqa: E501


        :return: The show_aggregation of this GraphBarSetting.  # noqa: E501
        :rtype: bool
        """
        return self._show_aggregation

    @show_aggregation.setter
    def show_aggregation(self, show_aggregation):
        """Sets the show_aggregation of this GraphBarSetting.


        :param show_aggregation: The show_aggregation of this GraphBarSetting.  # noqa: E501
        :type: bool
        """

        self._show_aggregation = show_aggregation

    @property
    def show_average(self):
        """Gets the show_average of this GraphBarSetting.  # noqa: E501


        :return: The show_average of this GraphBarSetting.  # noqa: E501
        :rtype: bool
        """
        return self._show_average

    @show_average.setter
    def show_average(self, show_average):
        """Sets the show_average of this GraphBarSetting.


        :param show_average: The show_average of this GraphBarSetting.  # noqa: E501
        :type: bool
        """

        self._show_average = show_average

    @property
    def show_peak(self):
        """Gets the show_peak of this GraphBarSetting.  # noqa: E501


        :return: The show_peak of this GraphBarSetting.  # noqa: E501
        :rtype: bool
        """
        return self._show_peak

    @show_peak.setter
    def show_peak(self, show_peak):
        """Sets the show_peak of this GraphBarSetting.


        :param show_peak: The show_peak of this GraphBarSetting.  # noqa: E501
        :type: bool
        """

        self._show_peak = show_peak

    @property
    def show_timespan(self):
        """Gets the show_timespan of this GraphBarSetting.  # noqa: E501


        :return: The show_timespan of this GraphBarSetting.  # noqa: E501
        :rtype: bool
        """
        return self._show_timespan

    @show_timespan.setter
    def show_timespan(self, show_timespan):
        """Sets the show_timespan of this GraphBarSetting.


        :param show_timespan: The show_timespan of this GraphBarSetting.  # noqa: E501
        :type: bool
        """

        self._show_timespan = show_timespan

    @property
    def show_valley(self):
        """Gets the show_valley of this GraphBarSetting.  # noqa: E501


        :return: The show_valley of this GraphBarSetting.  # noqa: E501
        :rtype: bool
        """
        return self._show_valley

    @show_valley.setter
    def show_valley(self, show_valley):
        """Sets the show_valley of this GraphBarSetting.


        :param show_valley: The show_valley of this GraphBarSetting.  # noqa: E501
        :type: bool
        """

        self._show_valley = show_valley

    @property
    def draw_graph_outline(self):
        """Gets the draw_graph_outline of this GraphBarSetting.  # noqa: E501


        :return: The draw_graph_outline of this GraphBarSetting.  # noqa: E501
        :rtype: bool
        """
        return self._draw_graph_outline

    @draw_graph_outline.setter
    def draw_graph_outline(self, draw_graph_outline):
        """Sets the draw_graph_outline of this GraphBarSetting.


        :param draw_graph_outline: The draw_graph_outline of this GraphBarSetting.  # noqa: E501
        :type: bool
        """

        self._draw_graph_outline = draw_graph_outline

    @property
    def scaled(self):
        """Gets the scaled of this GraphBarSetting.  # noqa: E501


        :return: The scaled of this GraphBarSetting.  # noqa: E501
        :rtype: bool
        """
        return self._scaled

    @scaled.setter
    def scaled(self, scaled):
        """Sets the scaled of this GraphBarSetting.


        :param scaled: The scaled of this GraphBarSetting.  # noqa: E501
        :type: bool
        """

        self._scaled = scaled

    @property
    def pretty_y_axis(self):
        """Gets the pretty_y_axis of this GraphBarSetting.  # noqa: E501


        :return: The pretty_y_axis of this GraphBarSetting.  # noqa: E501
        :rtype: bool
        """
        return self._pretty_y_axis

    @pretty_y_axis.setter
    def pretty_y_axis(self, pretty_y_axis):
        """Sets the pretty_y_axis of this GraphBarSetting.


        :param pretty_y_axis: The pretty_y_axis of this GraphBarSetting.  # noqa: E501
        :type: bool
        """

        self._pretty_y_axis = pretty_y_axis

    @property
    def pretty_x_axis(self):
        """Gets the pretty_x_axis of this GraphBarSetting.  # noqa: E501


        :return: The pretty_x_axis of this GraphBarSetting.  # noqa: E501
        :rtype: bool
        """
        return self._pretty_x_axis

    @pretty_x_axis.setter
    def pretty_x_axis(self, pretty_x_axis):
        """Sets the pretty_x_axis of this GraphBarSetting.


        :param pretty_x_axis: The pretty_x_axis of this GraphBarSetting.  # noqa: E501
        :type: bool
        """

        self._pretty_x_axis = pretty_x_axis

    @property
    def scale_to_minimum_value(self):
        """Gets the scale_to_minimum_value of this GraphBarSetting.  # noqa: E501


        :return: The scale_to_minimum_value of this GraphBarSetting.  # noqa: E501
        :rtype: bool
        """
        return self._scale_to_minimum_value

    @scale_to_minimum_value.setter
    def scale_to_minimum_value(self, scale_to_minimum_value):
        """Sets the scale_to_minimum_value of this GraphBarSetting.


        :param scale_to_minimum_value: The scale_to_minimum_value of this GraphBarSetting.  # noqa: E501
        :type: bool
        """

        self._scale_to_minimum_value = scale_to_minimum_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GraphBarSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphBarSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
