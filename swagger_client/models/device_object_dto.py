# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceObjectDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'device_id': 'int',
        'plugin_id': 'int',
        'plugin_object_type_id': 'int',
        'subtype_id': 'int',
        'name': 'str',
        'alternate_name': 'str',
        'description': 'str',
        'enabled': 'str',
        'is_enabled': 'bool',
        'is_visible': 'bool',
        'is_deleted': 'bool',
        'date_added': 'int',
        'indicators': 'list[IndicatorDto]',
        'extended_info': 'dict(str, str)',
        'disabled_by_ddq': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'device_id': 'deviceId',
        'plugin_id': 'pluginId',
        'plugin_object_type_id': 'pluginObjectTypeId',
        'subtype_id': 'subtypeId',
        'name': 'name',
        'alternate_name': 'alternateName',
        'description': 'description',
        'enabled': 'enabled',
        'is_enabled': 'isEnabled',
        'is_visible': 'isVisible',
        'is_deleted': 'isDeleted',
        'date_added': 'dateAdded',
        'indicators': 'indicators',
        'extended_info': 'extendedInfo',
        'disabled_by_ddq': 'disabledByDDQ'
    }

    def __init__(self, id=None, device_id=None, plugin_id=None, plugin_object_type_id=None, subtype_id=None, name=None, alternate_name=None, description=None, enabled=None, is_enabled=None, is_visible=None, is_deleted=None, date_added=None, indicators=None, extended_info=None, disabled_by_ddq=None):  # noqa: E501
        """DeviceObjectDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._device_id = None
        self._plugin_id = None
        self._plugin_object_type_id = None
        self._subtype_id = None
        self._name = None
        self._alternate_name = None
        self._description = None
        self._enabled = None
        self._is_enabled = None
        self._is_visible = None
        self._is_deleted = None
        self._date_added = None
        self._indicators = None
        self._extended_info = None
        self._disabled_by_ddq = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if device_id is not None:
            self.device_id = device_id
        if plugin_id is not None:
            self.plugin_id = plugin_id
        if plugin_object_type_id is not None:
            self.plugin_object_type_id = plugin_object_type_id
        if subtype_id is not None:
            self.subtype_id = subtype_id
        if name is not None:
            self.name = name
        if alternate_name is not None:
            self.alternate_name = alternate_name
        if description is not None:
            self.description = description
        if enabled is not None:
            self.enabled = enabled
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if is_visible is not None:
            self.is_visible = is_visible
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if date_added is not None:
            self.date_added = date_added
        if indicators is not None:
            self.indicators = indicators
        if extended_info is not None:
            self.extended_info = extended_info
        if disabled_by_ddq is not None:
            self.disabled_by_ddq = disabled_by_ddq

    @property
    def id(self):
        """Gets the id of this DeviceObjectDto.  # noqa: E501


        :return: The id of this DeviceObjectDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceObjectDto.


        :param id: The id of this DeviceObjectDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def device_id(self):
        """Gets the device_id of this DeviceObjectDto.  # noqa: E501


        :return: The device_id of this DeviceObjectDto.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceObjectDto.


        :param device_id: The device_id of this DeviceObjectDto.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def plugin_id(self):
        """Gets the plugin_id of this DeviceObjectDto.  # noqa: E501


        :return: The plugin_id of this DeviceObjectDto.  # noqa: E501
        :rtype: int
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this DeviceObjectDto.


        :param plugin_id: The plugin_id of this DeviceObjectDto.  # noqa: E501
        :type: int
        """

        self._plugin_id = plugin_id

    @property
    def plugin_object_type_id(self):
        """Gets the plugin_object_type_id of this DeviceObjectDto.  # noqa: E501


        :return: The plugin_object_type_id of this DeviceObjectDto.  # noqa: E501
        :rtype: int
        """
        return self._plugin_object_type_id

    @plugin_object_type_id.setter
    def plugin_object_type_id(self, plugin_object_type_id):
        """Sets the plugin_object_type_id of this DeviceObjectDto.


        :param plugin_object_type_id: The plugin_object_type_id of this DeviceObjectDto.  # noqa: E501
        :type: int
        """

        self._plugin_object_type_id = plugin_object_type_id

    @property
    def subtype_id(self):
        """Gets the subtype_id of this DeviceObjectDto.  # noqa: E501


        :return: The subtype_id of this DeviceObjectDto.  # noqa: E501
        :rtype: int
        """
        return self._subtype_id

    @subtype_id.setter
    def subtype_id(self, subtype_id):
        """Sets the subtype_id of this DeviceObjectDto.


        :param subtype_id: The subtype_id of this DeviceObjectDto.  # noqa: E501
        :type: int
        """

        self._subtype_id = subtype_id

    @property
    def name(self):
        """Gets the name of this DeviceObjectDto.  # noqa: E501


        :return: The name of this DeviceObjectDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceObjectDto.


        :param name: The name of this DeviceObjectDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def alternate_name(self):
        """Gets the alternate_name of this DeviceObjectDto.  # noqa: E501


        :return: The alternate_name of this DeviceObjectDto.  # noqa: E501
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this DeviceObjectDto.


        :param alternate_name: The alternate_name of this DeviceObjectDto.  # noqa: E501
        :type: str
        """

        self._alternate_name = alternate_name

    @property
    def description(self):
        """Gets the description of this DeviceObjectDto.  # noqa: E501


        :return: The description of this DeviceObjectDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceObjectDto.


        :param description: The description of this DeviceObjectDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this DeviceObjectDto.  # noqa: E501


        :return: The enabled of this DeviceObjectDto.  # noqa: E501
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DeviceObjectDto.


        :param enabled: The enabled of this DeviceObjectDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED", "AUTO"]  # noqa: E501
        if enabled not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled` ({0}), must be one of {1}"  # noqa: E501
                .format(enabled, allowed_values)
            )

        self._enabled = enabled

    @property
    def is_enabled(self):
        """Gets the is_enabled of this DeviceObjectDto.  # noqa: E501

        This field is deprecated and would be removed in a newer version of the API. Please use 'enabled' field instead.  # noqa: E501

        :return: The is_enabled of this DeviceObjectDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this DeviceObjectDto.

        This field is deprecated and would be removed in a newer version of the API. Please use 'enabled' field instead.  # noqa: E501

        :param is_enabled: The is_enabled of this DeviceObjectDto.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_visible(self):
        """Gets the is_visible of this DeviceObjectDto.  # noqa: E501


        :return: The is_visible of this DeviceObjectDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this DeviceObjectDto.


        :param is_visible: The is_visible of this DeviceObjectDto.  # noqa: E501
        :type: bool
        """

        self._is_visible = is_visible

    @property
    def is_deleted(self):
        """Gets the is_deleted of this DeviceObjectDto.  # noqa: E501


        :return: The is_deleted of this DeviceObjectDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this DeviceObjectDto.


        :param is_deleted: The is_deleted of this DeviceObjectDto.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def date_added(self):
        """Gets the date_added of this DeviceObjectDto.  # noqa: E501

        Unix timestamp with milliseconds proximity  # noqa: E501

        :return: The date_added of this DeviceObjectDto.  # noqa: E501
        :rtype: int
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added):
        """Sets the date_added of this DeviceObjectDto.

        Unix timestamp with milliseconds proximity  # noqa: E501

        :param date_added: The date_added of this DeviceObjectDto.  # noqa: E501
        :type: int
        """

        self._date_added = date_added

    @property
    def indicators(self):
        """Gets the indicators of this DeviceObjectDto.  # noqa: E501


        :return: The indicators of this DeviceObjectDto.  # noqa: E501
        :rtype: list[IndicatorDto]
        """
        return self._indicators

    @indicators.setter
    def indicators(self, indicators):
        """Sets the indicators of this DeviceObjectDto.


        :param indicators: The indicators of this DeviceObjectDto.  # noqa: E501
        :type: list[IndicatorDto]
        """

        self._indicators = indicators

    @property
    def extended_info(self):
        """Gets the extended_info of this DeviceObjectDto.  # noqa: E501


        :return: The extended_info of this DeviceObjectDto.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extended_info

    @extended_info.setter
    def extended_info(self, extended_info):
        """Sets the extended_info of this DeviceObjectDto.


        :param extended_info: The extended_info of this DeviceObjectDto.  # noqa: E501
        :type: dict(str, str)
        """

        self._extended_info = extended_info

    @property
    def disabled_by_ddq(self):
        """Gets the disabled_by_ddq of this DeviceObjectDto.  # noqa: E501


        :return: The disabled_by_ddq of this DeviceObjectDto.  # noqa: E501
        :rtype: bool
        """
        return self._disabled_by_ddq

    @disabled_by_ddq.setter
    def disabled_by_ddq(self, disabled_by_ddq):
        """Sets the disabled_by_ddq of this DeviceObjectDto.


        :param disabled_by_ddq: The disabled_by_ddq of this DeviceObjectDto.  # noqa: E501
        :type: bool
        """

        self._disabled_by_ddq = disabled_by_ddq

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceObjectDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceObjectDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
