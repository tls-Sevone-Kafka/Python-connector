# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ObjectGroupDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'parent_id': 'int',
        'id': 'int',
        'members': 'list[DeviceObjectDto]',
        'read_only': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'parent_id': 'parentId',
        'id': 'id',
        'members': 'members',
        'read_only': 'readOnly'
    }

    def __init__(self, name=None, parent_id=None, id=None, members=None, read_only=None):  # noqa: E501
        """ObjectGroupDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._parent_id = None
        self._id = None
        self._members = None
        self._read_only = None
        self.discriminator = None
        self.name = name
        if parent_id is not None:
            self.parent_id = parent_id
        if id is not None:
            self.id = id
        if members is not None:
            self.members = members
        if read_only is not None:
            self.read_only = read_only

    @property
    def name(self):
        """Gets the name of this ObjectGroupDto.  # noqa: E501


        :return: The name of this ObjectGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjectGroupDto.


        :param name: The name of this ObjectGroupDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this ObjectGroupDto.  # noqa: E501


        :return: The parent_id of this ObjectGroupDto.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ObjectGroupDto.


        :param parent_id: The parent_id of this ObjectGroupDto.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def id(self):
        """Gets the id of this ObjectGroupDto.  # noqa: E501


        :return: The id of this ObjectGroupDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjectGroupDto.


        :param id: The id of this ObjectGroupDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def members(self):
        """Gets the members of this ObjectGroupDto.  # noqa: E501


        :return: The members of this ObjectGroupDto.  # noqa: E501
        :rtype: list[DeviceObjectDto]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this ObjectGroupDto.


        :param members: The members of this ObjectGroupDto.  # noqa: E501
        :type: list[DeviceObjectDto]
        """

        self._members = members

    @property
    def read_only(self):
        """Gets the read_only of this ObjectGroupDto.  # noqa: E501


        :return: The read_only of this ObjectGroupDto.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this ObjectGroupDto.


        :param read_only: The read_only of this ObjectGroupDto.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ObjectGroupDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectGroupDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
