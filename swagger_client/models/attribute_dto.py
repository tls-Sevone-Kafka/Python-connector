# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AttributeDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'type': 'str',
        'entity_types': 'list[str]',
        'singleton': 'bool',
        'validation_expression': 'str',
        'namespace_id': 'int',
        'namespace_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'entity_types': 'entityTypes',
        'singleton': 'singleton',
        'validation_expression': 'validationExpression',
        'namespace_id': 'namespaceId',
        'namespace_name': 'namespaceName'
    }

    def __init__(self, id=None, name=None, type=None, entity_types=None, singleton=None, validation_expression=None, namespace_id=None, namespace_name=None):  # noqa: E501
        """AttributeDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._type = None
        self._entity_types = None
        self._singleton = None
        self._validation_expression = None
        self._namespace_id = None
        self._namespace_name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.type = type
        self.entity_types = entity_types
        if singleton is not None:
            self.singleton = singleton
        if validation_expression is not None:
            self.validation_expression = validation_expression
        self.namespace_id = namespace_id
        if namespace_name is not None:
            self.namespace_name = namespace_name

    @property
    def id(self):
        """Gets the id of this AttributeDto.  # noqa: E501


        :return: The id of this AttributeDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AttributeDto.


        :param id: The id of this AttributeDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AttributeDto.  # noqa: E501


        :return: The name of this AttributeDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttributeDto.


        :param name: The name of this AttributeDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this AttributeDto.  # noqa: E501


        :return: The type of this AttributeDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AttributeDto.


        :param type: The type of this AttributeDto.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["integer", "ip", "mac", "url", "dateTime", "regex", "latLong", "string", "acceptedValues"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def entity_types(self):
        """Gets the entity_types of this AttributeDto.  # noqa: E501


        :return: The entity_types of this AttributeDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._entity_types

    @entity_types.setter
    def entity_types(self, entity_types):
        """Sets the entity_types of this AttributeDto.


        :param entity_types: The entity_types of this AttributeDto.  # noqa: E501
        :type: list[str]
        """
        if entity_types is None:
            raise ValueError("Invalid value for `entity_types`, must not be `None`")  # noqa: E501
        allowed_values = ["device", "object", "devicegroup", "objectgroup", "objecttype", "indicatortype"]  # noqa: E501
        if not set(entity_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `entity_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(entity_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._entity_types = entity_types

    @property
    def singleton(self):
        """Gets the singleton of this AttributeDto.  # noqa: E501


        :return: The singleton of this AttributeDto.  # noqa: E501
        :rtype: bool
        """
        return self._singleton

    @singleton.setter
    def singleton(self, singleton):
        """Sets the singleton of this AttributeDto.


        :param singleton: The singleton of this AttributeDto.  # noqa: E501
        :type: bool
        """

        self._singleton = singleton

    @property
    def validation_expression(self):
        """Gets the validation_expression of this AttributeDto.  # noqa: E501


        :return: The validation_expression of this AttributeDto.  # noqa: E501
        :rtype: str
        """
        return self._validation_expression

    @validation_expression.setter
    def validation_expression(self, validation_expression):
        """Sets the validation_expression of this AttributeDto.


        :param validation_expression: The validation_expression of this AttributeDto.  # noqa: E501
        :type: str
        """

        self._validation_expression = validation_expression

    @property
    def namespace_id(self):
        """Gets the namespace_id of this AttributeDto.  # noqa: E501


        :return: The namespace_id of this AttributeDto.  # noqa: E501
        :rtype: int
        """
        return self._namespace_id

    @namespace_id.setter
    def namespace_id(self, namespace_id):
        """Sets the namespace_id of this AttributeDto.


        :param namespace_id: The namespace_id of this AttributeDto.  # noqa: E501
        :type: int
        """
        if namespace_id is None:
            raise ValueError("Invalid value for `namespace_id`, must not be `None`")  # noqa: E501

        self._namespace_id = namespace_id

    @property
    def namespace_name(self):
        """Gets the namespace_name of this AttributeDto.  # noqa: E501


        :return: The namespace_name of this AttributeDto.  # noqa: E501
        :rtype: str
        """
        return self._namespace_name

    @namespace_name.setter
    def namespace_name(self, namespace_name):
        """Sets the namespace_name of this AttributeDto.


        :param namespace_name: The namespace_name of this AttributeDto.  # noqa: E501
        :type: str
        """

        self._namespace_name = namespace_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttributeDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttributeDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
