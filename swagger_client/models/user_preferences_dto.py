# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserPreferencesDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'timezone': 'str',
        'date_format': 'str',
        'timezone_startup_check': 'bool'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'email': 'email',
        'timezone': 'timezone',
        'date_format': 'dateFormat',
        'timezone_startup_check': 'timezoneStartupCheck'
    }

    def __init__(self, first_name=None, last_name=None, email=None, timezone=None, date_format=None, timezone_startup_check=None):  # noqa: E501
        """UserPreferencesDto - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._email = None
        self._timezone = None
        self._date_format = None
        self._timezone_startup_check = None
        self.discriminator = None
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        if timezone is not None:
            self.timezone = timezone
        if date_format is not None:
            self.date_format = date_format
        if timezone_startup_check is not None:
            self.timezone_startup_check = timezone_startup_check

    @property
    def first_name(self):
        """Gets the first_name of this UserPreferencesDto.  # noqa: E501


        :return: The first_name of this UserPreferencesDto.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserPreferencesDto.


        :param first_name: The first_name of this UserPreferencesDto.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserPreferencesDto.  # noqa: E501


        :return: The last_name of this UserPreferencesDto.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserPreferencesDto.


        :param last_name: The last_name of this UserPreferencesDto.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this UserPreferencesDto.  # noqa: E501


        :return: The email of this UserPreferencesDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserPreferencesDto.


        :param email: The email of this UserPreferencesDto.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def timezone(self):
        """Gets the timezone of this UserPreferencesDto.  # noqa: E501


        :return: The timezone of this UserPreferencesDto.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserPreferencesDto.


        :param timezone: The timezone of this UserPreferencesDto.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def date_format(self):
        """Gets the date_format of this UserPreferencesDto.  # noqa: E501

        Accepted values are `cluster`, `ISO8601`, `MMM D,YYYY h:mm:ss A ZZ`; `MMM D, YYYY h:mm:ss A z`; `MMM D, YYYY h:mm:ss A`; `MMM D, YYYY H:mm:ss A ZZ`;         `MMM D, YYYY H:mm:ss A z`; `MMM D, YYYY H:mm:ss A`; `D MMM YY, h:mm:ss A ZZ`; `D MMM YY, h:mm:ss A z`; `D MMM YY, h:mm:ss A`; `D MMM YY, H:mm:ss ZZ`;         `D MMM YY, H:mm:ss z`; `D MMM YY, H:mm:ss`; `D MMM 'YY H:mm:ss ZZ`; `D MMM 'YY H:mm:ss z`; `D MMM 'YY H:mm:ss`; `DD/MM/YYYY HH:mm:ss ZZ`;         `DD/MM/YYYY HH:mm:ss z`; `DD/MM/YY HH:mm:ss ZZ`; `DD/MM/YY HH:mm:ss z`; `MM/DD/YYYY hh:mm:ss A ZZ`; `MM/DD/YYYY hh:mm:ss A z`; `MM/DD/YY hh:mm:ss A ZZ`;         `MM/DD/YY hh:mm:ss A z`; `MM/DD/YYYY HH:mm:ss ZZ`; `MM/DD/YYYY HH:mm:ss z`; `DD.MM.YYYY HH:mm:ss ZZ`; `DD.MM.YYYY HH:mm:ss z`; `DD.MM.YY HH:mm:ss ZZ`;         `DD.MM.YY HH:mm:ss z`; `YY.MM.DD HH:mm:ss ZZ`; `YY.MM.DD HH:mm:ss z`; `YYYY.MM.DD HH:mm:ss ZZ`; `YYYY.MM.DD HH:mm:ss z`; `MM/D/YY hh:mmA ZZ`;         `MM/D/YY hh:mmA z`; `MMM D, YYYY hh:mm A ZZ`; `MMM D, YYYY hh:mm A z`; `MMM D, YYYY hh:mm A`; `MMM D, YYYY H:mm ZZ`; `MMM D, YYYY H:mm z`;         `MMM D, YYYY H:mm`; `D MMM YY hh:mm A ZZ`; `D MMM YY hh:mm A z`; `D MMM YY hh:mm A`; `D MMM YY, H:mm ZZ`; `D MMM YY, H:mm z`; `D MMM YY, H:mm`        `D MMM 'YY H:mm ZZ`; `D MMM 'YY H:mm z`; `D MMM 'YY H:mm`  # noqa: E501

        :return: The date_format of this UserPreferencesDto.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this UserPreferencesDto.

        Accepted values are `cluster`, `ISO8601`, `MMM D,YYYY h:mm:ss A ZZ`; `MMM D, YYYY h:mm:ss A z`; `MMM D, YYYY h:mm:ss A`; `MMM D, YYYY H:mm:ss A ZZ`;         `MMM D, YYYY H:mm:ss A z`; `MMM D, YYYY H:mm:ss A`; `D MMM YY, h:mm:ss A ZZ`; `D MMM YY, h:mm:ss A z`; `D MMM YY, h:mm:ss A`; `D MMM YY, H:mm:ss ZZ`;         `D MMM YY, H:mm:ss z`; `D MMM YY, H:mm:ss`; `D MMM 'YY H:mm:ss ZZ`; `D MMM 'YY H:mm:ss z`; `D MMM 'YY H:mm:ss`; `DD/MM/YYYY HH:mm:ss ZZ`;         `DD/MM/YYYY HH:mm:ss z`; `DD/MM/YY HH:mm:ss ZZ`; `DD/MM/YY HH:mm:ss z`; `MM/DD/YYYY hh:mm:ss A ZZ`; `MM/DD/YYYY hh:mm:ss A z`; `MM/DD/YY hh:mm:ss A ZZ`;         `MM/DD/YY hh:mm:ss A z`; `MM/DD/YYYY HH:mm:ss ZZ`; `MM/DD/YYYY HH:mm:ss z`; `DD.MM.YYYY HH:mm:ss ZZ`; `DD.MM.YYYY HH:mm:ss z`; `DD.MM.YY HH:mm:ss ZZ`;         `DD.MM.YY HH:mm:ss z`; `YY.MM.DD HH:mm:ss ZZ`; `YY.MM.DD HH:mm:ss z`; `YYYY.MM.DD HH:mm:ss ZZ`; `YYYY.MM.DD HH:mm:ss z`; `MM/D/YY hh:mmA ZZ`;         `MM/D/YY hh:mmA z`; `MMM D, YYYY hh:mm A ZZ`; `MMM D, YYYY hh:mm A z`; `MMM D, YYYY hh:mm A`; `MMM D, YYYY H:mm ZZ`; `MMM D, YYYY H:mm z`;         `MMM D, YYYY H:mm`; `D MMM YY hh:mm A ZZ`; `D MMM YY hh:mm A z`; `D MMM YY hh:mm A`; `D MMM YY, H:mm ZZ`; `D MMM YY, H:mm z`; `D MMM YY, H:mm`        `D MMM 'YY H:mm ZZ`; `D MMM 'YY H:mm z`; `D MMM 'YY H:mm`  # noqa: E501

        :param date_format: The date_format of this UserPreferencesDto.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def timezone_startup_check(self):
        """Gets the timezone_startup_check of this UserPreferencesDto.  # noqa: E501


        :return: The timezone_startup_check of this UserPreferencesDto.  # noqa: E501
        :rtype: bool
        """
        return self._timezone_startup_check

    @timezone_startup_check.setter
    def timezone_startup_check(self, timezone_startup_check):
        """Sets the timezone_startup_check of this UserPreferencesDto.


        :param timezone_startup_check: The timezone_startup_check of this UserPreferencesDto.  # noqa: E501
        :type: bool
        """

        self._timezone_startup_check = timezone_startup_check

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserPreferencesDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserPreferencesDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
