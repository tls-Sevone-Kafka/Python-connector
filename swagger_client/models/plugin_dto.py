# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PluginDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'object_name': 'str',
        'dir': 'str',
        'plottable': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'object_name': 'objectName',
        'dir': 'dir',
        'plottable': 'plottable'
    }

    def __init__(self, id=None, name=None, object_name=None, dir=None, plottable=None):  # noqa: E501
        """PluginDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._object_name = None
        self._dir = None
        self._plottable = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        if object_name is not None:
            self.object_name = object_name
        if dir is not None:
            self.dir = dir
        if plottable is not None:
            self.plottable = plottable

    @property
    def id(self):
        """Gets the id of this PluginDto.  # noqa: E501


        :return: The id of this PluginDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PluginDto.


        :param id: The id of this PluginDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PluginDto.  # noqa: E501


        :return: The name of this PluginDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PluginDto.


        :param name: The name of this PluginDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def object_name(self):
        """Gets the object_name of this PluginDto.  # noqa: E501


        :return: The object_name of this PluginDto.  # noqa: E501
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this PluginDto.


        :param object_name: The object_name of this PluginDto.  # noqa: E501
        :type: str
        """

        self._object_name = object_name

    @property
    def dir(self):
        """Gets the dir of this PluginDto.  # noqa: E501


        :return: The dir of this PluginDto.  # noqa: E501
        :rtype: str
        """
        return self._dir

    @dir.setter
    def dir(self, dir):
        """Sets the dir of this PluginDto.


        :param dir: The dir of this PluginDto.  # noqa: E501
        :type: str
        """

        self._dir = dir

    @property
    def plottable(self):
        """Gets the plottable of this PluginDto.  # noqa: E501


        :return: The plottable of this PluginDto.  # noqa: E501
        :rtype: int
        """
        return self._plottable

    @plottable.setter
    def plottable(self, plottable):
        """Sets the plottable of this PluginDto.


        :param plottable: The plottable of this PluginDto.  # noqa: E501
        :type: int
        """

        self._plottable = plottable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PluginDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PluginDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
