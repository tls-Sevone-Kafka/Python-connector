# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportingLinkData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_id': 'int',
        'geta_device_id': 'int',
        'getz_device_id': 'int',
        'relation_type': 'str',
        'is_automatic': 'bool',
        'is_discovered': 'bool',
        'geta_object_id': 'int',
        'source_name': 'str',
        'source_id': 'int',
        'source_type': 'str',
        'num_hop': 'int'
    }

    attribute_map = {
        'connection_id': 'connectionId',
        'geta_device_id': 'getaDeviceId',
        'getz_device_id': 'getzDeviceId',
        'relation_type': 'relationType',
        'is_automatic': 'isAutomatic',
        'is_discovered': 'isDiscovered',
        'geta_object_id': 'getaObjectId',
        'source_name': 'sourceName',
        'source_id': 'sourceId',
        'source_type': 'sourceType',
        'num_hop': 'numHop'
    }

    def __init__(self, connection_id=None, geta_device_id=None, getz_device_id=None, relation_type=None, is_automatic=None, is_discovered=None, geta_object_id=None, source_name=None, source_id=None, source_type=None, num_hop=None):  # noqa: E501
        """ReportingLinkData - a model defined in Swagger"""  # noqa: E501
        self._connection_id = None
        self._geta_device_id = None
        self._getz_device_id = None
        self._relation_type = None
        self._is_automatic = None
        self._is_discovered = None
        self._geta_object_id = None
        self._source_name = None
        self._source_id = None
        self._source_type = None
        self._num_hop = None
        self.discriminator = None
        if connection_id is not None:
            self.connection_id = connection_id
        self.geta_device_id = geta_device_id
        self.getz_device_id = getz_device_id
        self.relation_type = relation_type
        if is_automatic is not None:
            self.is_automatic = is_automatic
        if is_discovered is not None:
            self.is_discovered = is_discovered
        if geta_object_id is not None:
            self.geta_object_id = geta_object_id
        if source_name is not None:
            self.source_name = source_name
        if source_id is not None:
            self.source_id = source_id
        if source_type is not None:
            self.source_type = source_type
        if num_hop is not None:
            self.num_hop = num_hop

    @property
    def connection_id(self):
        """Gets the connection_id of this ReportingLinkData.  # noqa: E501


        :return: The connection_id of this ReportingLinkData.  # noqa: E501
        :rtype: int
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this ReportingLinkData.


        :param connection_id: The connection_id of this ReportingLinkData.  # noqa: E501
        :type: int
        """

        self._connection_id = connection_id

    @property
    def geta_device_id(self):
        """Gets the geta_device_id of this ReportingLinkData.  # noqa: E501


        :return: The geta_device_id of this ReportingLinkData.  # noqa: E501
        :rtype: int
        """
        return self._geta_device_id

    @geta_device_id.setter
    def geta_device_id(self, geta_device_id):
        """Sets the geta_device_id of this ReportingLinkData.


        :param geta_device_id: The geta_device_id of this ReportingLinkData.  # noqa: E501
        :type: int
        """
        if geta_device_id is None:
            raise ValueError("Invalid value for `geta_device_id`, must not be `None`")  # noqa: E501

        self._geta_device_id = geta_device_id

    @property
    def getz_device_id(self):
        """Gets the getz_device_id of this ReportingLinkData.  # noqa: E501


        :return: The getz_device_id of this ReportingLinkData.  # noqa: E501
        :rtype: int
        """
        return self._getz_device_id

    @getz_device_id.setter
    def getz_device_id(self, getz_device_id):
        """Sets the getz_device_id of this ReportingLinkData.


        :param getz_device_id: The getz_device_id of this ReportingLinkData.  # noqa: E501
        :type: int
        """
        if getz_device_id is None:
            raise ValueError("Invalid value for `getz_device_id`, must not be `None`")  # noqa: E501

        self._getz_device_id = getz_device_id

    @property
    def relation_type(self):
        """Gets the relation_type of this ReportingLinkData.  # noqa: E501


        :return: The relation_type of this ReportingLinkData.  # noqa: E501
        :rtype: str
        """
        return self._relation_type

    @relation_type.setter
    def relation_type(self, relation_type):
        """Sets the relation_type of this ReportingLinkData.


        :param relation_type: The relation_type of this ReportingLinkData.  # noqa: E501
        :type: str
        """
        if relation_type is None:
            raise ValueError("Invalid value for `relation_type`, must not be `None`")  # noqa: E501
        allowed_values = ["COMPOSED_OF", "MEMBER_OF", "UNDERLYING", "LAYERED_OVER", "PEER", "CONNECTED_VIA"]  # noqa: E501
        if relation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `relation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(relation_type, allowed_values)
            )

        self._relation_type = relation_type

    @property
    def is_automatic(self):
        """Gets the is_automatic of this ReportingLinkData.  # noqa: E501


        :return: The is_automatic of this ReportingLinkData.  # noqa: E501
        :rtype: bool
        """
        return self._is_automatic

    @is_automatic.setter
    def is_automatic(self, is_automatic):
        """Sets the is_automatic of this ReportingLinkData.


        :param is_automatic: The is_automatic of this ReportingLinkData.  # noqa: E501
        :type: bool
        """

        self._is_automatic = is_automatic

    @property
    def is_discovered(self):
        """Gets the is_discovered of this ReportingLinkData.  # noqa: E501


        :return: The is_discovered of this ReportingLinkData.  # noqa: E501
        :rtype: bool
        """
        return self._is_discovered

    @is_discovered.setter
    def is_discovered(self, is_discovered):
        """Sets the is_discovered of this ReportingLinkData.


        :param is_discovered: The is_discovered of this ReportingLinkData.  # noqa: E501
        :type: bool
        """

        self._is_discovered = is_discovered

    @property
    def geta_object_id(self):
        """Gets the geta_object_id of this ReportingLinkData.  # noqa: E501


        :return: The geta_object_id of this ReportingLinkData.  # noqa: E501
        :rtype: int
        """
        return self._geta_object_id

    @geta_object_id.setter
    def geta_object_id(self, geta_object_id):
        """Sets the geta_object_id of this ReportingLinkData.


        :param geta_object_id: The geta_object_id of this ReportingLinkData.  # noqa: E501
        :type: int
        """

        self._geta_object_id = geta_object_id

    @property
    def source_name(self):
        """Gets the source_name of this ReportingLinkData.  # noqa: E501


        :return: The source_name of this ReportingLinkData.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this ReportingLinkData.


        :param source_name: The source_name of this ReportingLinkData.  # noqa: E501
        :type: str
        """
        allowed_values = ["ARPCache", "LLDP", "OSPF", "BGP", "CDP", "MPLSLDP", "IntraDevice", "STP", "STP_TRUNK", "UserDefined", "VMWARE_LOGICAL", "CISCOACI_PHYSICAL", "CISCOACI_LOGICAL", "VMWARE_PHYSICAL", "NetflowInterface"]  # noqa: E501
        if source_name not in allowed_values:
            raise ValueError(
                "Invalid value for `source_name` ({0}), must be one of {1}"  # noqa: E501
                .format(source_name, allowed_values)
            )

        self._source_name = source_name

    @property
    def source_id(self):
        """Gets the source_id of this ReportingLinkData.  # noqa: E501


        :return: The source_id of this ReportingLinkData.  # noqa: E501
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this ReportingLinkData.


        :param source_id: The source_id of this ReportingLinkData.  # noqa: E501
        :type: int
        """

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this ReportingLinkData.  # noqa: E501


        :return: The source_type of this ReportingLinkData.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this ReportingLinkData.


        :param source_type: The source_type of this ReportingLinkData.  # noqa: E501
        :type: str
        """
        allowed_values = ["Physical", "Logical", "Session"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"  # noqa: E501
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def num_hop(self):
        """Gets the num_hop of this ReportingLinkData.  # noqa: E501


        :return: The num_hop of this ReportingLinkData.  # noqa: E501
        :rtype: int
        """
        return self._num_hop

    @num_hop.setter
    def num_hop(self, num_hop):
        """Sets the num_hop of this ReportingLinkData.


        :param num_hop: The num_hop of this ReportingLinkData.  # noqa: E501
        :type: int
        """

        self._num_hop = num_hop

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingLinkData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingLinkData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
