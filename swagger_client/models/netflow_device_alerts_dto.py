# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetflowDeviceAlertsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'origin_ip': 'str',
        'versions': 'str',
        'peer': 'int',
        'name': 'str',
        'system_name': 'str',
        'override_name': 'int',
        'visible': 'int',
        'alerts': 'list[AlertDto]'
    }

    attribute_map = {
        'id': 'id',
        'origin_ip': 'originIp',
        'versions': 'versions',
        'peer': 'peer',
        'name': 'name',
        'system_name': 'systemName',
        'override_name': 'overrideName',
        'visible': 'visible',
        'alerts': 'alerts'
    }

    def __init__(self, id=None, origin_ip=None, versions=None, peer=None, name=None, system_name=None, override_name=None, visible=None, alerts=None):  # noqa: E501
        """NetflowDeviceAlertsDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._origin_ip = None
        self._versions = None
        self._peer = None
        self._name = None
        self._system_name = None
        self._override_name = None
        self._visible = None
        self._alerts = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if origin_ip is not None:
            self.origin_ip = origin_ip
        if versions is not None:
            self.versions = versions
        if peer is not None:
            self.peer = peer
        if name is not None:
            self.name = name
        if system_name is not None:
            self.system_name = system_name
        if override_name is not None:
            self.override_name = override_name
        if visible is not None:
            self.visible = visible
        if alerts is not None:
            self.alerts = alerts

    @property
    def id(self):
        """Gets the id of this NetflowDeviceAlertsDto.  # noqa: E501


        :return: The id of this NetflowDeviceAlertsDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetflowDeviceAlertsDto.


        :param id: The id of this NetflowDeviceAlertsDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def origin_ip(self):
        """Gets the origin_ip of this NetflowDeviceAlertsDto.  # noqa: E501


        :return: The origin_ip of this NetflowDeviceAlertsDto.  # noqa: E501
        :rtype: str
        """
        return self._origin_ip

    @origin_ip.setter
    def origin_ip(self, origin_ip):
        """Sets the origin_ip of this NetflowDeviceAlertsDto.


        :param origin_ip: The origin_ip of this NetflowDeviceAlertsDto.  # noqa: E501
        :type: str
        """

        self._origin_ip = origin_ip

    @property
    def versions(self):
        """Gets the versions of this NetflowDeviceAlertsDto.  # noqa: E501


        :return: The versions of this NetflowDeviceAlertsDto.  # noqa: E501
        :rtype: str
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this NetflowDeviceAlertsDto.


        :param versions: The versions of this NetflowDeviceAlertsDto.  # noqa: E501
        :type: str
        """

        self._versions = versions

    @property
    def peer(self):
        """Gets the peer of this NetflowDeviceAlertsDto.  # noqa: E501


        :return: The peer of this NetflowDeviceAlertsDto.  # noqa: E501
        :rtype: int
        """
        return self._peer

    @peer.setter
    def peer(self, peer):
        """Sets the peer of this NetflowDeviceAlertsDto.


        :param peer: The peer of this NetflowDeviceAlertsDto.  # noqa: E501
        :type: int
        """

        self._peer = peer

    @property
    def name(self):
        """Gets the name of this NetflowDeviceAlertsDto.  # noqa: E501


        :return: The name of this NetflowDeviceAlertsDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetflowDeviceAlertsDto.


        :param name: The name of this NetflowDeviceAlertsDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def system_name(self):
        """Gets the system_name of this NetflowDeviceAlertsDto.  # noqa: E501


        :return: The system_name of this NetflowDeviceAlertsDto.  # noqa: E501
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this NetflowDeviceAlertsDto.


        :param system_name: The system_name of this NetflowDeviceAlertsDto.  # noqa: E501
        :type: str
        """

        self._system_name = system_name

    @property
    def override_name(self):
        """Gets the override_name of this NetflowDeviceAlertsDto.  # noqa: E501


        :return: The override_name of this NetflowDeviceAlertsDto.  # noqa: E501
        :rtype: int
        """
        return self._override_name

    @override_name.setter
    def override_name(self, override_name):
        """Sets the override_name of this NetflowDeviceAlertsDto.


        :param override_name: The override_name of this NetflowDeviceAlertsDto.  # noqa: E501
        :type: int
        """

        self._override_name = override_name

    @property
    def visible(self):
        """Gets the visible of this NetflowDeviceAlertsDto.  # noqa: E501


        :return: The visible of this NetflowDeviceAlertsDto.  # noqa: E501
        :rtype: int
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this NetflowDeviceAlertsDto.


        :param visible: The visible of this NetflowDeviceAlertsDto.  # noqa: E501
        :type: int
        """

        self._visible = visible

    @property
    def alerts(self):
        """Gets the alerts of this NetflowDeviceAlertsDto.  # noqa: E501


        :return: The alerts of this NetflowDeviceAlertsDto.  # noqa: E501
        :rtype: list[AlertDto]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this NetflowDeviceAlertsDto.


        :param alerts: The alerts of this NetflowDeviceAlertsDto.  # noqa: E501
        :type: list[AlertDto]
        """

        self._alerts = alerts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetflowDeviceAlertsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetflowDeviceAlertsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
