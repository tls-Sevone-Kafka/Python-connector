# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlowFalconVisualizationV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stacked_line': 'GraphStackedLineSetting',
        'pie': 'GraphPieSetting',
        'table': 'VisualizationTableSettingV1'
    }

    attribute_map = {
        'stacked_line': 'stackedLine',
        'pie': 'pie',
        'table': 'table'
    }

    def __init__(self, stacked_line=None, pie=None, table=None):  # noqa: E501
        """FlowFalconVisualizationV1 - a model defined in Swagger"""  # noqa: E501
        self._stacked_line = None
        self._pie = None
        self._table = None
        self.discriminator = None
        if stacked_line is not None:
            self.stacked_line = stacked_line
        if pie is not None:
            self.pie = pie
        if table is not None:
            self.table = table

    @property
    def stacked_line(self):
        """Gets the stacked_line of this FlowFalconVisualizationV1.  # noqa: E501


        :return: The stacked_line of this FlowFalconVisualizationV1.  # noqa: E501
        :rtype: GraphStackedLineSetting
        """
        return self._stacked_line

    @stacked_line.setter
    def stacked_line(self, stacked_line):
        """Sets the stacked_line of this FlowFalconVisualizationV1.


        :param stacked_line: The stacked_line of this FlowFalconVisualizationV1.  # noqa: E501
        :type: GraphStackedLineSetting
        """

        self._stacked_line = stacked_line

    @property
    def pie(self):
        """Gets the pie of this FlowFalconVisualizationV1.  # noqa: E501


        :return: The pie of this FlowFalconVisualizationV1.  # noqa: E501
        :rtype: GraphPieSetting
        """
        return self._pie

    @pie.setter
    def pie(self, pie):
        """Sets the pie of this FlowFalconVisualizationV1.


        :param pie: The pie of this FlowFalconVisualizationV1.  # noqa: E501
        :type: GraphPieSetting
        """

        self._pie = pie

    @property
    def table(self):
        """Gets the table of this FlowFalconVisualizationV1.  # noqa: E501


        :return: The table of this FlowFalconVisualizationV1.  # noqa: E501
        :rtype: VisualizationTableSettingV1
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this FlowFalconVisualizationV1.


        :param table: The table of this FlowFalconVisualizationV1.  # noqa: E501
        :type: VisualizationTableSettingV1
        """

        self._table = table

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlowFalconVisualizationV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowFalconVisualizationV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
