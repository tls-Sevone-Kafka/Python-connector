# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TopNResultDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'device_name': 'str',
        'device_group_id': 'int',
        'plugin_id': 'int',
        'object_id': 'int',
        'object_name': 'str',
        'object_group_id': 'int',
        'object_description': 'str',
        'indicator_id': 'int',
        'indicator_type_id': 'int',
        'indicator_type_name': 'str',
        'indicator_type_description': 'str',
        'indicator_alias': 'str',
        'unit': 'str',
        'data': 'list[TopNDataDto]',
        'extra_indicators': 'list[TopNExtraIndicator]'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'device_name': 'deviceName',
        'device_group_id': 'deviceGroupId',
        'plugin_id': 'pluginId',
        'object_id': 'objectId',
        'object_name': 'objectName',
        'object_group_id': 'objectGroupId',
        'object_description': 'objectDescription',
        'indicator_id': 'indicatorId',
        'indicator_type_id': 'indicatorTypeId',
        'indicator_type_name': 'indicatorTypeName',
        'indicator_type_description': 'indicatorTypeDescription',
        'indicator_alias': 'indicatorAlias',
        'unit': 'unit',
        'data': 'data',
        'extra_indicators': 'extraIndicators'
    }

    def __init__(self, device_id=None, device_name=None, device_group_id=None, plugin_id=None, object_id=None, object_name=None, object_group_id=None, object_description=None, indicator_id=None, indicator_type_id=None, indicator_type_name=None, indicator_type_description=None, indicator_alias=None, unit=None, data=None, extra_indicators=None):  # noqa: E501
        """TopNResultDto - a model defined in Swagger"""  # noqa: E501
        self._device_id = None
        self._device_name = None
        self._device_group_id = None
        self._plugin_id = None
        self._object_id = None
        self._object_name = None
        self._object_group_id = None
        self._object_description = None
        self._indicator_id = None
        self._indicator_type_id = None
        self._indicator_type_name = None
        self._indicator_type_description = None
        self._indicator_alias = None
        self._unit = None
        self._data = None
        self._extra_indicators = None
        self.discriminator = None
        self.device_id = device_id
        self.device_name = device_name
        self.device_group_id = device_group_id
        self.plugin_id = plugin_id
        self.object_id = object_id
        self.object_name = object_name
        if object_group_id is not None:
            self.object_group_id = object_group_id
        self.object_description = object_description
        self.indicator_id = indicator_id
        self.indicator_type_id = indicator_type_id
        self.indicator_type_name = indicator_type_name
        self.indicator_type_description = indicator_type_description
        self.indicator_alias = indicator_alias
        self.unit = unit
        self.data = data
        if extra_indicators is not None:
            self.extra_indicators = extra_indicators

    @property
    def device_id(self):
        """Gets the device_id of this TopNResultDto.  # noqa: E501


        :return: The device_id of this TopNResultDto.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this TopNResultDto.


        :param device_id: The device_id of this TopNResultDto.  # noqa: E501
        :type: int
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def device_name(self):
        """Gets the device_name of this TopNResultDto.  # noqa: E501


        :return: The device_name of this TopNResultDto.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this TopNResultDto.


        :param device_name: The device_name of this TopNResultDto.  # noqa: E501
        :type: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")  # noqa: E501

        self._device_name = device_name

    @property
    def device_group_id(self):
        """Gets the device_group_id of this TopNResultDto.  # noqa: E501


        :return: The device_group_id of this TopNResultDto.  # noqa: E501
        :rtype: int
        """
        return self._device_group_id

    @device_group_id.setter
    def device_group_id(self, device_group_id):
        """Sets the device_group_id of this TopNResultDto.


        :param device_group_id: The device_group_id of this TopNResultDto.  # noqa: E501
        :type: int
        """
        if device_group_id is None:
            raise ValueError("Invalid value for `device_group_id`, must not be `None`")  # noqa: E501

        self._device_group_id = device_group_id

    @property
    def plugin_id(self):
        """Gets the plugin_id of this TopNResultDto.  # noqa: E501


        :return: The plugin_id of this TopNResultDto.  # noqa: E501
        :rtype: int
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this TopNResultDto.


        :param plugin_id: The plugin_id of this TopNResultDto.  # noqa: E501
        :type: int
        """
        if plugin_id is None:
            raise ValueError("Invalid value for `plugin_id`, must not be `None`")  # noqa: E501

        self._plugin_id = plugin_id

    @property
    def object_id(self):
        """Gets the object_id of this TopNResultDto.  # noqa: E501


        :return: The object_id of this TopNResultDto.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this TopNResultDto.


        :param object_id: The object_id of this TopNResultDto.  # noqa: E501
        :type: int
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")  # noqa: E501

        self._object_id = object_id

    @property
    def object_name(self):
        """Gets the object_name of this TopNResultDto.  # noqa: E501


        :return: The object_name of this TopNResultDto.  # noqa: E501
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this TopNResultDto.


        :param object_name: The object_name of this TopNResultDto.  # noqa: E501
        :type: str
        """
        if object_name is None:
            raise ValueError("Invalid value for `object_name`, must not be `None`")  # noqa: E501

        self._object_name = object_name

    @property
    def object_group_id(self):
        """Gets the object_group_id of this TopNResultDto.  # noqa: E501


        :return: The object_group_id of this TopNResultDto.  # noqa: E501
        :rtype: int
        """
        return self._object_group_id

    @object_group_id.setter
    def object_group_id(self, object_group_id):
        """Sets the object_group_id of this TopNResultDto.


        :param object_group_id: The object_group_id of this TopNResultDto.  # noqa: E501
        :type: int
        """

        self._object_group_id = object_group_id

    @property
    def object_description(self):
        """Gets the object_description of this TopNResultDto.  # noqa: E501


        :return: The object_description of this TopNResultDto.  # noqa: E501
        :rtype: str
        """
        return self._object_description

    @object_description.setter
    def object_description(self, object_description):
        """Sets the object_description of this TopNResultDto.


        :param object_description: The object_description of this TopNResultDto.  # noqa: E501
        :type: str
        """
        if object_description is None:
            raise ValueError("Invalid value for `object_description`, must not be `None`")  # noqa: E501

        self._object_description = object_description

    @property
    def indicator_id(self):
        """Gets the indicator_id of this TopNResultDto.  # noqa: E501


        :return: The indicator_id of this TopNResultDto.  # noqa: E501
        :rtype: int
        """
        return self._indicator_id

    @indicator_id.setter
    def indicator_id(self, indicator_id):
        """Sets the indicator_id of this TopNResultDto.


        :param indicator_id: The indicator_id of this TopNResultDto.  # noqa: E501
        :type: int
        """
        if indicator_id is None:
            raise ValueError("Invalid value for `indicator_id`, must not be `None`")  # noqa: E501

        self._indicator_id = indicator_id

    @property
    def indicator_type_id(self):
        """Gets the indicator_type_id of this TopNResultDto.  # noqa: E501


        :return: The indicator_type_id of this TopNResultDto.  # noqa: E501
        :rtype: int
        """
        return self._indicator_type_id

    @indicator_type_id.setter
    def indicator_type_id(self, indicator_type_id):
        """Sets the indicator_type_id of this TopNResultDto.


        :param indicator_type_id: The indicator_type_id of this TopNResultDto.  # noqa: E501
        :type: int
        """
        if indicator_type_id is None:
            raise ValueError("Invalid value for `indicator_type_id`, must not be `None`")  # noqa: E501

        self._indicator_type_id = indicator_type_id

    @property
    def indicator_type_name(self):
        """Gets the indicator_type_name of this TopNResultDto.  # noqa: E501


        :return: The indicator_type_name of this TopNResultDto.  # noqa: E501
        :rtype: str
        """
        return self._indicator_type_name

    @indicator_type_name.setter
    def indicator_type_name(self, indicator_type_name):
        """Sets the indicator_type_name of this TopNResultDto.


        :param indicator_type_name: The indicator_type_name of this TopNResultDto.  # noqa: E501
        :type: str
        """
        if indicator_type_name is None:
            raise ValueError("Invalid value for `indicator_type_name`, must not be `None`")  # noqa: E501

        self._indicator_type_name = indicator_type_name

    @property
    def indicator_type_description(self):
        """Gets the indicator_type_description of this TopNResultDto.  # noqa: E501


        :return: The indicator_type_description of this TopNResultDto.  # noqa: E501
        :rtype: str
        """
        return self._indicator_type_description

    @indicator_type_description.setter
    def indicator_type_description(self, indicator_type_description):
        """Sets the indicator_type_description of this TopNResultDto.


        :param indicator_type_description: The indicator_type_description of this TopNResultDto.  # noqa: E501
        :type: str
        """
        if indicator_type_description is None:
            raise ValueError("Invalid value for `indicator_type_description`, must not be `None`")  # noqa: E501

        self._indicator_type_description = indicator_type_description

    @property
    def indicator_alias(self):
        """Gets the indicator_alias of this TopNResultDto.  # noqa: E501


        :return: The indicator_alias of this TopNResultDto.  # noqa: E501
        :rtype: str
        """
        return self._indicator_alias

    @indicator_alias.setter
    def indicator_alias(self, indicator_alias):
        """Sets the indicator_alias of this TopNResultDto.


        :param indicator_alias: The indicator_alias of this TopNResultDto.  # noqa: E501
        :type: str
        """
        if indicator_alias is None:
            raise ValueError("Invalid value for `indicator_alias`, must not be `None`")  # noqa: E501

        self._indicator_alias = indicator_alias

    @property
    def unit(self):
        """Gets the unit of this TopNResultDto.  # noqa: E501


        :return: The unit of this TopNResultDto.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this TopNResultDto.


        :param unit: The unit of this TopNResultDto.  # noqa: E501
        :type: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit

    @property
    def data(self):
        """Gets the data of this TopNResultDto.  # noqa: E501


        :return: The data of this TopNResultDto.  # noqa: E501
        :rtype: list[TopNDataDto]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TopNResultDto.


        :param data: The data of this TopNResultDto.  # noqa: E501
        :type: list[TopNDataDto]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def extra_indicators(self):
        """Gets the extra_indicators of this TopNResultDto.  # noqa: E501


        :return: The extra_indicators of this TopNResultDto.  # noqa: E501
        :rtype: list[TopNExtraIndicator]
        """
        return self._extra_indicators

    @extra_indicators.setter
    def extra_indicators(self, extra_indicators):
        """Sets the extra_indicators of this TopNResultDto.


        :param extra_indicators: The extra_indicators of this TopNResultDto.  # noqa: E501
        :type: list[TopNExtraIndicator]
        """

        self._extra_indicators = extra_indicators

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopNResultDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopNResultDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
