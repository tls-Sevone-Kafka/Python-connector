# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlowDeviceMappingDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'indicator': 'DeviceIndicatorDto',
        'view_id': 'int',
        'filter_id': 'int',
        'is_automatic': 'bool',
        'is_allowed': 'bool',
        'interface': 'FlowInterfaceDto'
    }

    attribute_map = {
        'id': 'id',
        'indicator': 'indicator',
        'view_id': 'viewId',
        'filter_id': 'filterId',
        'is_automatic': 'isAutomatic',
        'is_allowed': 'isAllowed',
        'interface': 'interface'
    }

    def __init__(self, id=None, indicator=None, view_id=None, filter_id=None, is_automatic=None, is_allowed=None, interface=None):  # noqa: E501
        """FlowDeviceMappingDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._indicator = None
        self._view_id = None
        self._filter_id = None
        self._is_automatic = None
        self._is_allowed = None
        self._interface = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if indicator is not None:
            self.indicator = indicator
        if view_id is not None:
            self.view_id = view_id
        if filter_id is not None:
            self.filter_id = filter_id
        if is_automatic is not None:
            self.is_automatic = is_automatic
        if is_allowed is not None:
            self.is_allowed = is_allowed
        if interface is not None:
            self.interface = interface

    @property
    def id(self):
        """Gets the id of this FlowDeviceMappingDto.  # noqa: E501


        :return: The id of this FlowDeviceMappingDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FlowDeviceMappingDto.


        :param id: The id of this FlowDeviceMappingDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def indicator(self):
        """Gets the indicator of this FlowDeviceMappingDto.  # noqa: E501


        :return: The indicator of this FlowDeviceMappingDto.  # noqa: E501
        :rtype: DeviceIndicatorDto
        """
        return self._indicator

    @indicator.setter
    def indicator(self, indicator):
        """Sets the indicator of this FlowDeviceMappingDto.


        :param indicator: The indicator of this FlowDeviceMappingDto.  # noqa: E501
        :type: DeviceIndicatorDto
        """

        self._indicator = indicator

    @property
    def view_id(self):
        """Gets the view_id of this FlowDeviceMappingDto.  # noqa: E501


        :return: The view_id of this FlowDeviceMappingDto.  # noqa: E501
        :rtype: int
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this FlowDeviceMappingDto.


        :param view_id: The view_id of this FlowDeviceMappingDto.  # noqa: E501
        :type: int
        """

        self._view_id = view_id

    @property
    def filter_id(self):
        """Gets the filter_id of this FlowDeviceMappingDto.  # noqa: E501


        :return: The filter_id of this FlowDeviceMappingDto.  # noqa: E501
        :rtype: int
        """
        return self._filter_id

    @filter_id.setter
    def filter_id(self, filter_id):
        """Sets the filter_id of this FlowDeviceMappingDto.


        :param filter_id: The filter_id of this FlowDeviceMappingDto.  # noqa: E501
        :type: int
        """

        self._filter_id = filter_id

    @property
    def is_automatic(self):
        """Gets the is_automatic of this FlowDeviceMappingDto.  # noqa: E501


        :return: The is_automatic of this FlowDeviceMappingDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_automatic

    @is_automatic.setter
    def is_automatic(self, is_automatic):
        """Sets the is_automatic of this FlowDeviceMappingDto.


        :param is_automatic: The is_automatic of this FlowDeviceMappingDto.  # noqa: E501
        :type: bool
        """

        self._is_automatic = is_automatic

    @property
    def is_allowed(self):
        """Gets the is_allowed of this FlowDeviceMappingDto.  # noqa: E501


        :return: The is_allowed of this FlowDeviceMappingDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_allowed

    @is_allowed.setter
    def is_allowed(self, is_allowed):
        """Sets the is_allowed of this FlowDeviceMappingDto.


        :param is_allowed: The is_allowed of this FlowDeviceMappingDto.  # noqa: E501
        :type: bool
        """

        self._is_allowed = is_allowed

    @property
    def interface(self):
        """Gets the interface of this FlowDeviceMappingDto.  # noqa: E501


        :return: The interface of this FlowDeviceMappingDto.  # noqa: E501
        :rtype: FlowInterfaceDto
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this FlowDeviceMappingDto.


        :param interface: The interface of this FlowDeviceMappingDto.  # noqa: E501
        :type: FlowInterfaceDto
        """

        self._interface = interface

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlowDeviceMappingDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowDeviceMappingDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
