# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PluginInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extended_info': 'dict(str, str)',
        'status_realtime': 'bool',
        'status_realtime_timestamp': 'int',
        'enabled': 'bool',
        'working': 'bool'
    }

    attribute_map = {
        'extended_info': 'extendedInfo',
        'status_realtime': 'statusRealtime',
        'status_realtime_timestamp': 'statusRealtimeTimestamp',
        'enabled': 'enabled',
        'working': 'working'
    }

    def __init__(self, extended_info=None, status_realtime=None, status_realtime_timestamp=None, enabled=None, working=None):  # noqa: E501
        """PluginInfo - a model defined in Swagger"""  # noqa: E501
        self._extended_info = None
        self._status_realtime = None
        self._status_realtime_timestamp = None
        self._enabled = None
        self._working = None
        self.discriminator = None
        if extended_info is not None:
            self.extended_info = extended_info
        if status_realtime is not None:
            self.status_realtime = status_realtime
        if status_realtime_timestamp is not None:
            self.status_realtime_timestamp = status_realtime_timestamp
        if enabled is not None:
            self.enabled = enabled
        if working is not None:
            self.working = working

    @property
    def extended_info(self):
        """Gets the extended_info of this PluginInfo.  # noqa: E501


        :return: The extended_info of this PluginInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extended_info

    @extended_info.setter
    def extended_info(self, extended_info):
        """Sets the extended_info of this PluginInfo.


        :param extended_info: The extended_info of this PluginInfo.  # noqa: E501
        :type: dict(str, str)
        """

        self._extended_info = extended_info

    @property
    def status_realtime(self):
        """Gets the status_realtime of this PluginInfo.  # noqa: E501


        :return: The status_realtime of this PluginInfo.  # noqa: E501
        :rtype: bool
        """
        return self._status_realtime

    @status_realtime.setter
    def status_realtime(self, status_realtime):
        """Sets the status_realtime of this PluginInfo.


        :param status_realtime: The status_realtime of this PluginInfo.  # noqa: E501
        :type: bool
        """

        self._status_realtime = status_realtime

    @property
    def status_realtime_timestamp(self):
        """Gets the status_realtime_timestamp of this PluginInfo.  # noqa: E501


        :return: The status_realtime_timestamp of this PluginInfo.  # noqa: E501
        :rtype: int
        """
        return self._status_realtime_timestamp

    @status_realtime_timestamp.setter
    def status_realtime_timestamp(self, status_realtime_timestamp):
        """Sets the status_realtime_timestamp of this PluginInfo.


        :param status_realtime_timestamp: The status_realtime_timestamp of this PluginInfo.  # noqa: E501
        :type: int
        """

        self._status_realtime_timestamp = status_realtime_timestamp

    @property
    def enabled(self):
        """Gets the enabled of this PluginInfo.  # noqa: E501


        :return: The enabled of this PluginInfo.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PluginInfo.


        :param enabled: The enabled of this PluginInfo.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def working(self):
        """Gets the working of this PluginInfo.  # noqa: E501


        :return: The working of this PluginInfo.  # noqa: E501
        :rtype: bool
        """
        return self._working

    @working.setter
    def working(self, working):
        """Sets the working of this PluginInfo.


        :param working: The working of this PluginInfo.  # noqa: E501
        :type: bool
        """

        self._working = working

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PluginInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PluginInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
