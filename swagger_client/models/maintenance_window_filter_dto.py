# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaintenanceWindowFilterDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'device_ids': 'list[int]',
        'actions': 'str',
        'is_retroactive': 'bool',
        'end_date_before': 'str',
        'end_date_after': 'str',
        'begin_date_before': 'str',
        'begin_date_after': 'str',
        'create_date_before': 'str',
        'create_date_after': 'str'
    }

    attribute_map = {
        'name': 'name',
        'device_ids': 'deviceIds',
        'actions': 'actions',
        'is_retroactive': 'isRetroactive',
        'end_date_before': 'endDateBefore',
        'end_date_after': 'endDateAfter',
        'begin_date_before': 'beginDateBefore',
        'begin_date_after': 'beginDateAfter',
        'create_date_before': 'createDateBefore',
        'create_date_after': 'createDateAfter'
    }

    def __init__(self, name='Match maintenance windows whose name contains this substring', device_ids=None, actions='Match maintenance window with any of these actions -- SUPPRESS_ALERT_NOTIFICATIONS (SevOne will not send notification emails or traps for alerts occurring during this maintenance window), CATEGORIZE_ALERTS (Prepend "Maintenance Window" to alerts overlapping this maintenance window and downgrade severity levels higher than Info), EXCLUDE_DATA_FROM_BASELINES (Exclude data during the maintenance window from baseline calculations), EXCLUDE_DATA_FROM_AGGREGATION (Exclude data during the maintenance window from aggregation calculations)', is_retroactive=False, end_date_before='Match maintenance windows ending before this time', end_date_after='Match maintenance windows ending after this time', begin_date_before='Match maintenance windows beginning before this time', begin_date_after='Match maintenance windows beginning after this time', create_date_before='Match maintenance windows created before this time', create_date_after='Match maintenance windows created after this time'):  # noqa: E501
        """MaintenanceWindowFilterDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._device_ids = None
        self._actions = None
        self._is_retroactive = None
        self._end_date_before = None
        self._end_date_after = None
        self._begin_date_before = None
        self._begin_date_after = None
        self._create_date_before = None
        self._create_date_after = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if device_ids is not None:
            self.device_ids = device_ids
        if actions is not None:
            self.actions = actions
        if is_retroactive is not None:
            self.is_retroactive = is_retroactive
        if end_date_before is not None:
            self.end_date_before = end_date_before
        if end_date_after is not None:
            self.end_date_after = end_date_after
        if begin_date_before is not None:
            self.begin_date_before = begin_date_before
        if begin_date_after is not None:
            self.begin_date_after = begin_date_after
        if create_date_before is not None:
            self.create_date_before = create_date_before
        if create_date_after is not None:
            self.create_date_after = create_date_after

    @property
    def name(self):
        """Gets the name of this MaintenanceWindowFilterDto.  # noqa: E501


        :return: The name of this MaintenanceWindowFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MaintenanceWindowFilterDto.


        :param name: The name of this MaintenanceWindowFilterDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def device_ids(self):
        """Gets the device_ids of this MaintenanceWindowFilterDto.  # noqa: E501


        :return: The device_ids of this MaintenanceWindowFilterDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._device_ids

    @device_ids.setter
    def device_ids(self, device_ids):
        """Sets the device_ids of this MaintenanceWindowFilterDto.


        :param device_ids: The device_ids of this MaintenanceWindowFilterDto.  # noqa: E501
        :type: list[int]
        """

        self._device_ids = device_ids

    @property
    def actions(self):
        """Gets the actions of this MaintenanceWindowFilterDto.  # noqa: E501


        :return: The actions of this MaintenanceWindowFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this MaintenanceWindowFilterDto.


        :param actions: The actions of this MaintenanceWindowFilterDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUPPRESS_ALERT_NOTIFICATIONS,CATEGORIZE_ALERTS,EXCLUDE_DATA_FROM_BASELINES,EXCLUDE_DATA_FROM_AGGREGATION"]  # noqa: E501
        if actions not in allowed_values:
            raise ValueError(
                "Invalid value for `actions` ({0}), must be one of {1}"  # noqa: E501
                .format(actions, allowed_values)
            )

        self._actions = actions

    @property
    def is_retroactive(self):
        """Gets the is_retroactive of this MaintenanceWindowFilterDto.  # noqa: E501


        :return: The is_retroactive of this MaintenanceWindowFilterDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_retroactive

    @is_retroactive.setter
    def is_retroactive(self, is_retroactive):
        """Sets the is_retroactive of this MaintenanceWindowFilterDto.


        :param is_retroactive: The is_retroactive of this MaintenanceWindowFilterDto.  # noqa: E501
        :type: bool
        """

        self._is_retroactive = is_retroactive

    @property
    def end_date_before(self):
        """Gets the end_date_before of this MaintenanceWindowFilterDto.  # noqa: E501


        :return: The end_date_before of this MaintenanceWindowFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._end_date_before

    @end_date_before.setter
    def end_date_before(self, end_date_before):
        """Sets the end_date_before of this MaintenanceWindowFilterDto.


        :param end_date_before: The end_date_before of this MaintenanceWindowFilterDto.  # noqa: E501
        :type: str
        """

        self._end_date_before = end_date_before

    @property
    def end_date_after(self):
        """Gets the end_date_after of this MaintenanceWindowFilterDto.  # noqa: E501


        :return: The end_date_after of this MaintenanceWindowFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._end_date_after

    @end_date_after.setter
    def end_date_after(self, end_date_after):
        """Sets the end_date_after of this MaintenanceWindowFilterDto.


        :param end_date_after: The end_date_after of this MaintenanceWindowFilterDto.  # noqa: E501
        :type: str
        """

        self._end_date_after = end_date_after

    @property
    def begin_date_before(self):
        """Gets the begin_date_before of this MaintenanceWindowFilterDto.  # noqa: E501


        :return: The begin_date_before of this MaintenanceWindowFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._begin_date_before

    @begin_date_before.setter
    def begin_date_before(self, begin_date_before):
        """Sets the begin_date_before of this MaintenanceWindowFilterDto.


        :param begin_date_before: The begin_date_before of this MaintenanceWindowFilterDto.  # noqa: E501
        :type: str
        """

        self._begin_date_before = begin_date_before

    @property
    def begin_date_after(self):
        """Gets the begin_date_after of this MaintenanceWindowFilterDto.  # noqa: E501


        :return: The begin_date_after of this MaintenanceWindowFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._begin_date_after

    @begin_date_after.setter
    def begin_date_after(self, begin_date_after):
        """Sets the begin_date_after of this MaintenanceWindowFilterDto.


        :param begin_date_after: The begin_date_after of this MaintenanceWindowFilterDto.  # noqa: E501
        :type: str
        """

        self._begin_date_after = begin_date_after

    @property
    def create_date_before(self):
        """Gets the create_date_before of this MaintenanceWindowFilterDto.  # noqa: E501


        :return: The create_date_before of this MaintenanceWindowFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._create_date_before

    @create_date_before.setter
    def create_date_before(self, create_date_before):
        """Sets the create_date_before of this MaintenanceWindowFilterDto.


        :param create_date_before: The create_date_before of this MaintenanceWindowFilterDto.  # noqa: E501
        :type: str
        """

        self._create_date_before = create_date_before

    @property
    def create_date_after(self):
        """Gets the create_date_after of this MaintenanceWindowFilterDto.  # noqa: E501


        :return: The create_date_after of this MaintenanceWindowFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._create_date_after

    @create_date_after.setter
    def create_date_after(self, create_date_after):
        """Sets the create_date_after of this MaintenanceWindowFilterDto.


        :param create_date_after: The create_date_after of this MaintenanceWindowFilterDto.  # noqa: E501
        :type: str
        """

        self._create_date_after = create_date_after

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaintenanceWindowFilterDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintenanceWindowFilterDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
