# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceDiscoveryDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'queue': 'str',
        'allow_automatic': 'bool',
        'allow_manual': 'bool',
        'time_queued': 'int',
        'time_updated': 'int',
        'time_started': 'int',
        'time_completed': 'int',
        'times_discovered': 'int',
        'is_working': 'bool',
        'device': 'DeviceDto'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'queue': 'queue',
        'allow_automatic': 'allowAutomatic',
        'allow_manual': 'allowManual',
        'time_queued': 'timeQueued',
        'time_updated': 'timeUpdated',
        'time_started': 'timeStarted',
        'time_completed': 'timeCompleted',
        'times_discovered': 'timesDiscovered',
        'is_working': 'isWorking',
        'device': 'device'
    }

    def __init__(self, device_id=None, queue=None, allow_automatic=None, allow_manual=None, time_queued=None, time_updated=None, time_started=None, time_completed=None, times_discovered=None, is_working=None, device=None):  # noqa: E501
        """DeviceDiscoveryDto - a model defined in Swagger"""  # noqa: E501
        self._device_id = None
        self._queue = None
        self._allow_automatic = None
        self._allow_manual = None
        self._time_queued = None
        self._time_updated = None
        self._time_started = None
        self._time_completed = None
        self._times_discovered = None
        self._is_working = None
        self._device = None
        self.discriminator = None
        if device_id is not None:
            self.device_id = device_id
        if queue is not None:
            self.queue = queue
        if allow_automatic is not None:
            self.allow_automatic = allow_automatic
        if allow_manual is not None:
            self.allow_manual = allow_manual
        if time_queued is not None:
            self.time_queued = time_queued
        if time_updated is not None:
            self.time_updated = time_updated
        if time_started is not None:
            self.time_started = time_started
        if time_completed is not None:
            self.time_completed = time_completed
        if times_discovered is not None:
            self.times_discovered = times_discovered
        if is_working is not None:
            self.is_working = is_working
        if device is not None:
            self.device = device

    @property
    def device_id(self):
        """Gets the device_id of this DeviceDiscoveryDto.  # noqa: E501


        :return: The device_id of this DeviceDiscoveryDto.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceDiscoveryDto.


        :param device_id: The device_id of this DeviceDiscoveryDto.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def queue(self):
        """Gets the queue of this DeviceDiscoveryDto.  # noqa: E501


        :return: The queue of this DeviceDiscoveryDto.  # noqa: E501
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this DeviceDiscoveryDto.


        :param queue: The queue of this DeviceDiscoveryDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["BLANK", "high", "low", "cancel"]  # noqa: E501
        if queue not in allowed_values:
            raise ValueError(
                "Invalid value for `queue` ({0}), must be one of {1}"  # noqa: E501
                .format(queue, allowed_values)
            )

        self._queue = queue

    @property
    def allow_automatic(self):
        """Gets the allow_automatic of this DeviceDiscoveryDto.  # noqa: E501


        :return: The allow_automatic of this DeviceDiscoveryDto.  # noqa: E501
        :rtype: bool
        """
        return self._allow_automatic

    @allow_automatic.setter
    def allow_automatic(self, allow_automatic):
        """Sets the allow_automatic of this DeviceDiscoveryDto.


        :param allow_automatic: The allow_automatic of this DeviceDiscoveryDto.  # noqa: E501
        :type: bool
        """

        self._allow_automatic = allow_automatic

    @property
    def allow_manual(self):
        """Gets the allow_manual of this DeviceDiscoveryDto.  # noqa: E501


        :return: The allow_manual of this DeviceDiscoveryDto.  # noqa: E501
        :rtype: bool
        """
        return self._allow_manual

    @allow_manual.setter
    def allow_manual(self, allow_manual):
        """Sets the allow_manual of this DeviceDiscoveryDto.


        :param allow_manual: The allow_manual of this DeviceDiscoveryDto.  # noqa: E501
        :type: bool
        """

        self._allow_manual = allow_manual

    @property
    def time_queued(self):
        """Gets the time_queued of this DeviceDiscoveryDto.  # noqa: E501

        Unix timestamp with milliseconds proximity  # noqa: E501

        :return: The time_queued of this DeviceDiscoveryDto.  # noqa: E501
        :rtype: int
        """
        return self._time_queued

    @time_queued.setter
    def time_queued(self, time_queued):
        """Sets the time_queued of this DeviceDiscoveryDto.

        Unix timestamp with milliseconds proximity  # noqa: E501

        :param time_queued: The time_queued of this DeviceDiscoveryDto.  # noqa: E501
        :type: int
        """

        self._time_queued = time_queued

    @property
    def time_updated(self):
        """Gets the time_updated of this DeviceDiscoveryDto.  # noqa: E501

        Unix timestamp with milliseconds proximity  # noqa: E501

        :return: The time_updated of this DeviceDiscoveryDto.  # noqa: E501
        :rtype: int
        """
        return self._time_updated

    @time_updated.setter
    def time_updated(self, time_updated):
        """Sets the time_updated of this DeviceDiscoveryDto.

        Unix timestamp with milliseconds proximity  # noqa: E501

        :param time_updated: The time_updated of this DeviceDiscoveryDto.  # noqa: E501
        :type: int
        """

        self._time_updated = time_updated

    @property
    def time_started(self):
        """Gets the time_started of this DeviceDiscoveryDto.  # noqa: E501

        Unix timestamp with milliseconds proximity  # noqa: E501

        :return: The time_started of this DeviceDiscoveryDto.  # noqa: E501
        :rtype: int
        """
        return self._time_started

    @time_started.setter
    def time_started(self, time_started):
        """Sets the time_started of this DeviceDiscoveryDto.

        Unix timestamp with milliseconds proximity  # noqa: E501

        :param time_started: The time_started of this DeviceDiscoveryDto.  # noqa: E501
        :type: int
        """

        self._time_started = time_started

    @property
    def time_completed(self):
        """Gets the time_completed of this DeviceDiscoveryDto.  # noqa: E501

        Unix timestamp with milliseconds proximity  # noqa: E501

        :return: The time_completed of this DeviceDiscoveryDto.  # noqa: E501
        :rtype: int
        """
        return self._time_completed

    @time_completed.setter
    def time_completed(self, time_completed):
        """Sets the time_completed of this DeviceDiscoveryDto.

        Unix timestamp with milliseconds proximity  # noqa: E501

        :param time_completed: The time_completed of this DeviceDiscoveryDto.  # noqa: E501
        :type: int
        """

        self._time_completed = time_completed

    @property
    def times_discovered(self):
        """Gets the times_discovered of this DeviceDiscoveryDto.  # noqa: E501


        :return: The times_discovered of this DeviceDiscoveryDto.  # noqa: E501
        :rtype: int
        """
        return self._times_discovered

    @times_discovered.setter
    def times_discovered(self, times_discovered):
        """Sets the times_discovered of this DeviceDiscoveryDto.


        :param times_discovered: The times_discovered of this DeviceDiscoveryDto.  # noqa: E501
        :type: int
        """

        self._times_discovered = times_discovered

    @property
    def is_working(self):
        """Gets the is_working of this DeviceDiscoveryDto.  # noqa: E501


        :return: The is_working of this DeviceDiscoveryDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_working

    @is_working.setter
    def is_working(self, is_working):
        """Sets the is_working of this DeviceDiscoveryDto.


        :param is_working: The is_working of this DeviceDiscoveryDto.  # noqa: E501
        :type: bool
        """

        self._is_working = is_working

    @property
    def device(self):
        """Gets the device of this DeviceDiscoveryDto.  # noqa: E501


        :return: The device of this DeviceDiscoveryDto.  # noqa: E501
        :rtype: DeviceDto
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this DeviceDiscoveryDto.


        :param device: The device of this DeviceDiscoveryDto.  # noqa: E501
        :type: DeviceDto
        """

        self._device = device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceDiscoveryDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceDiscoveryDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
