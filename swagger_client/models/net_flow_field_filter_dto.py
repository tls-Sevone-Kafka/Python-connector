# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetFlowFieldFilterDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ids': 'list[int]',
        'name': 'str',
        'description': 'str',
        'element_ids': 'list[int]',
        'byte_size': 'int',
        'field_type': 'str',
        'database_type': 'str',
        'default_aggregation': 'str',
        'data_units': 'str',
        'display_units': 'str',
        'key': 'bool',
        'supported': 'bool',
        'synthetic': 'bool',
        'custom': 'bool'
    }

    attribute_map = {
        'ids': 'ids',
        'name': 'name',
        'description': 'description',
        'element_ids': 'elementIds',
        'byte_size': 'byteSize',
        'field_type': 'fieldType',
        'database_type': 'databaseType',
        'default_aggregation': 'defaultAggregation',
        'data_units': 'dataUnits',
        'display_units': 'displayUnits',
        'key': 'key',
        'supported': 'supported',
        'synthetic': 'synthetic',
        'custom': 'custom'
    }

    def __init__(self, ids=None, name=None, description=None, element_ids=None, byte_size=None, field_type=None, database_type=None, default_aggregation=None, data_units=None, display_units=None, key=None, supported=None, synthetic=None, custom=None):  # noqa: E501
        """NetFlowFieldFilterDto - a model defined in Swagger"""  # noqa: E501
        self._ids = None
        self._name = None
        self._description = None
        self._element_ids = None
        self._byte_size = None
        self._field_type = None
        self._database_type = None
        self._default_aggregation = None
        self._data_units = None
        self._display_units = None
        self._key = None
        self._supported = None
        self._synthetic = None
        self._custom = None
        self.discriminator = None
        if ids is not None:
            self.ids = ids
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if element_ids is not None:
            self.element_ids = element_ids
        if byte_size is not None:
            self.byte_size = byte_size
        if field_type is not None:
            self.field_type = field_type
        if database_type is not None:
            self.database_type = database_type
        if default_aggregation is not None:
            self.default_aggregation = default_aggregation
        if data_units is not None:
            self.data_units = data_units
        if display_units is not None:
            self.display_units = display_units
        if key is not None:
            self.key = key
        if supported is not None:
            self.supported = supported
        if synthetic is not None:
            self.synthetic = synthetic
        if custom is not None:
            self.custom = custom

    @property
    def ids(self):
        """Gets the ids of this NetFlowFieldFilterDto.  # noqa: E501


        :return: The ids of this NetFlowFieldFilterDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this NetFlowFieldFilterDto.


        :param ids: The ids of this NetFlowFieldFilterDto.  # noqa: E501
        :type: list[int]
        """

        self._ids = ids

    @property
    def name(self):
        """Gets the name of this NetFlowFieldFilterDto.  # noqa: E501


        :return: The name of this NetFlowFieldFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetFlowFieldFilterDto.


        :param name: The name of this NetFlowFieldFilterDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this NetFlowFieldFilterDto.  # noqa: E501


        :return: The description of this NetFlowFieldFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NetFlowFieldFilterDto.


        :param description: The description of this NetFlowFieldFilterDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def element_ids(self):
        """Gets the element_ids of this NetFlowFieldFilterDto.  # noqa: E501


        :return: The element_ids of this NetFlowFieldFilterDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._element_ids

    @element_ids.setter
    def element_ids(self, element_ids):
        """Sets the element_ids of this NetFlowFieldFilterDto.


        :param element_ids: The element_ids of this NetFlowFieldFilterDto.  # noqa: E501
        :type: list[int]
        """

        self._element_ids = element_ids

    @property
    def byte_size(self):
        """Gets the byte_size of this NetFlowFieldFilterDto.  # noqa: E501


        :return: The byte_size of this NetFlowFieldFilterDto.  # noqa: E501
        :rtype: int
        """
        return self._byte_size

    @byte_size.setter
    def byte_size(self, byte_size):
        """Sets the byte_size of this NetFlowFieldFilterDto.


        :param byte_size: The byte_size of this NetFlowFieldFilterDto.  # noqa: E501
        :type: int
        """

        self._byte_size = byte_size

    @property
    def field_type(self):
        """Gets the field_type of this NetFlowFieldFilterDto.  # noqa: E501


        :return: The field_type of this NetFlowFieldFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this NetFlowFieldFilterDto.


        :param field_type: The field_type of this NetFlowFieldFilterDto.  # noqa: E501
        :type: str
        """

        self._field_type = field_type

    @property
    def database_type(self):
        """Gets the database_type of this NetFlowFieldFilterDto.  # noqa: E501


        :return: The database_type of this NetFlowFieldFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._database_type

    @database_type.setter
    def database_type(self, database_type):
        """Sets the database_type of this NetFlowFieldFilterDto.


        :param database_type: The database_type of this NetFlowFieldFilterDto.  # noqa: E501
        :type: str
        """

        self._database_type = database_type

    @property
    def default_aggregation(self):
        """Gets the default_aggregation of this NetFlowFieldFilterDto.  # noqa: E501


        :return: The default_aggregation of this NetFlowFieldFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._default_aggregation

    @default_aggregation.setter
    def default_aggregation(self, default_aggregation):
        """Sets the default_aggregation of this NetFlowFieldFilterDto.


        :param default_aggregation: The default_aggregation of this NetFlowFieldFilterDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Sum", "Average", "AverageNonZero", "Max", "None"]  # noqa: E501
        if default_aggregation not in allowed_values:
            raise ValueError(
                "Invalid value for `default_aggregation` ({0}), must be one of {1}"  # noqa: E501
                .format(default_aggregation, allowed_values)
            )

        self._default_aggregation = default_aggregation

    @property
    def data_units(self):
        """Gets the data_units of this NetFlowFieldFilterDto.  # noqa: E501


        :return: The data_units of this NetFlowFieldFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._data_units

    @data_units.setter
    def data_units(self, data_units):
        """Sets the data_units of this NetFlowFieldFilterDto.


        :param data_units: The data_units of this NetFlowFieldFilterDto.  # noqa: E501
        :type: str
        """

        self._data_units = data_units

    @property
    def display_units(self):
        """Gets the display_units of this NetFlowFieldFilterDto.  # noqa: E501


        :return: The display_units of this NetFlowFieldFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._display_units

    @display_units.setter
    def display_units(self, display_units):
        """Sets the display_units of this NetFlowFieldFilterDto.


        :param display_units: The display_units of this NetFlowFieldFilterDto.  # noqa: E501
        :type: str
        """

        self._display_units = display_units

    @property
    def key(self):
        """Gets the key of this NetFlowFieldFilterDto.  # noqa: E501


        :return: The key of this NetFlowFieldFilterDto.  # noqa: E501
        :rtype: bool
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this NetFlowFieldFilterDto.


        :param key: The key of this NetFlowFieldFilterDto.  # noqa: E501
        :type: bool
        """

        self._key = key

    @property
    def supported(self):
        """Gets the supported of this NetFlowFieldFilterDto.  # noqa: E501


        :return: The supported of this NetFlowFieldFilterDto.  # noqa: E501
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """Sets the supported of this NetFlowFieldFilterDto.


        :param supported: The supported of this NetFlowFieldFilterDto.  # noqa: E501
        :type: bool
        """

        self._supported = supported

    @property
    def synthetic(self):
        """Gets the synthetic of this NetFlowFieldFilterDto.  # noqa: E501


        :return: The synthetic of this NetFlowFieldFilterDto.  # noqa: E501
        :rtype: bool
        """
        return self._synthetic

    @synthetic.setter
    def synthetic(self, synthetic):
        """Sets the synthetic of this NetFlowFieldFilterDto.


        :param synthetic: The synthetic of this NetFlowFieldFilterDto.  # noqa: E501
        :type: bool
        """

        self._synthetic = synthetic

    @property
    def custom(self):
        """Gets the custom of this NetFlowFieldFilterDto.  # noqa: E501


        :return: The custom of this NetFlowFieldFilterDto.  # noqa: E501
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this NetFlowFieldFilterDto.


        :param custom: The custom of this NetFlowFieldFilterDto.  # noqa: E501
        :type: bool
        """

        self._custom = custom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetFlowFieldFilterDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetFlowFieldFilterDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
