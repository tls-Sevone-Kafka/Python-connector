# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceTypeRequestDtoNoMembers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_type': 'DeviceGroupRequestDtoNoMembers',
        'object_types': 'list[ObjectTypeRequestDtoNoMembers]'
    }

    attribute_map = {
        'device_type': 'deviceType',
        'object_types': 'objectTypes'
    }

    def __init__(self, device_type=None, object_types=None):  # noqa: E501
        """DeviceTypeRequestDtoNoMembers - a model defined in Swagger"""  # noqa: E501
        self._device_type = None
        self._object_types = None
        self.discriminator = None
        self.device_type = device_type
        if object_types is not None:
            self.object_types = object_types

    @property
    def device_type(self):
        """Gets the device_type of this DeviceTypeRequestDtoNoMembers.  # noqa: E501


        :return: The device_type of this DeviceTypeRequestDtoNoMembers.  # noqa: E501
        :rtype: DeviceGroupRequestDtoNoMembers
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceTypeRequestDtoNoMembers.


        :param device_type: The device_type of this DeviceTypeRequestDtoNoMembers.  # noqa: E501
        :type: DeviceGroupRequestDtoNoMembers
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")  # noqa: E501

        self._device_type = device_type

    @property
    def object_types(self):
        """Gets the object_types of this DeviceTypeRequestDtoNoMembers.  # noqa: E501


        :return: The object_types of this DeviceTypeRequestDtoNoMembers.  # noqa: E501
        :rtype: list[ObjectTypeRequestDtoNoMembers]
        """
        return self._object_types

    @object_types.setter
    def object_types(self, object_types):
        """Sets the object_types of this DeviceTypeRequestDtoNoMembers.


        :param object_types: The object_types of this DeviceTypeRequestDtoNoMembers.  # noqa: E501
        :type: list[ObjectTypeRequestDtoNoMembers]
        """

        self._object_types = object_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceTypeRequestDtoNoMembers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceTypeRequestDtoNoMembers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
