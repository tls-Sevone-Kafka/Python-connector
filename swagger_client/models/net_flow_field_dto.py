# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetFlowFieldDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'element_id': 'int',
        'byte_size': 'int',
        'field_type': 'str',
        'database_type': 'str',
        'is_key': 'bool',
        'is_supported': 'bool',
        'is_synthetic': 'bool',
        'is_custom': 'bool',
        'default_aggregation': 'str',
        'data_units': 'str',
        'display_units': 'str',
        'parent_field': 'str',
        'aggregation_method': 'str',
        'aggregation_methods': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'element_id': 'elementId',
        'byte_size': 'byteSize',
        'field_type': 'fieldType',
        'database_type': 'databaseType',
        'is_key': 'isKey',
        'is_supported': 'isSupported',
        'is_synthetic': 'isSynthetic',
        'is_custom': 'isCustom',
        'default_aggregation': 'defaultAggregation',
        'data_units': 'dataUnits',
        'display_units': 'displayUnits',
        'parent_field': 'parentField',
        'aggregation_method': 'aggregationMethod',
        'aggregation_methods': 'aggregationMethods'
    }

    def __init__(self, id=None, name=None, description=None, element_id=None, byte_size=None, field_type=None, database_type=None, is_key=None, is_supported=None, is_synthetic=None, is_custom=None, default_aggregation=None, data_units=None, display_units=None, parent_field=None, aggregation_method=None, aggregation_methods=None):  # noqa: E501
        """NetFlowFieldDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._element_id = None
        self._byte_size = None
        self._field_type = None
        self._database_type = None
        self._is_key = None
        self._is_supported = None
        self._is_synthetic = None
        self._is_custom = None
        self._default_aggregation = None
        self._data_units = None
        self._display_units = None
        self._parent_field = None
        self._aggregation_method = None
        self._aggregation_methods = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if element_id is not None:
            self.element_id = element_id
        if byte_size is not None:
            self.byte_size = byte_size
        if field_type is not None:
            self.field_type = field_type
        if database_type is not None:
            self.database_type = database_type
        if is_key is not None:
            self.is_key = is_key
        if is_supported is not None:
            self.is_supported = is_supported
        if is_synthetic is not None:
            self.is_synthetic = is_synthetic
        if is_custom is not None:
            self.is_custom = is_custom
        if default_aggregation is not None:
            self.default_aggregation = default_aggregation
        if data_units is not None:
            self.data_units = data_units
        if display_units is not None:
            self.display_units = display_units
        if parent_field is not None:
            self.parent_field = parent_field
        if aggregation_method is not None:
            self.aggregation_method = aggregation_method
        if aggregation_methods is not None:
            self.aggregation_methods = aggregation_methods

    @property
    def id(self):
        """Gets the id of this NetFlowFieldDto.  # noqa: E501


        :return: The id of this NetFlowFieldDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetFlowFieldDto.


        :param id: The id of this NetFlowFieldDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NetFlowFieldDto.  # noqa: E501


        :return: The name of this NetFlowFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetFlowFieldDto.


        :param name: The name of this NetFlowFieldDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this NetFlowFieldDto.  # noqa: E501


        :return: The description of this NetFlowFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NetFlowFieldDto.


        :param description: The description of this NetFlowFieldDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def element_id(self):
        """Gets the element_id of this NetFlowFieldDto.  # noqa: E501


        :return: The element_id of this NetFlowFieldDto.  # noqa: E501
        :rtype: int
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this NetFlowFieldDto.


        :param element_id: The element_id of this NetFlowFieldDto.  # noqa: E501
        :type: int
        """

        self._element_id = element_id

    @property
    def byte_size(self):
        """Gets the byte_size of this NetFlowFieldDto.  # noqa: E501


        :return: The byte_size of this NetFlowFieldDto.  # noqa: E501
        :rtype: int
        """
        return self._byte_size

    @byte_size.setter
    def byte_size(self, byte_size):
        """Sets the byte_size of this NetFlowFieldDto.


        :param byte_size: The byte_size of this NetFlowFieldDto.  # noqa: E501
        :type: int
        """

        self._byte_size = byte_size

    @property
    def field_type(self):
        """Gets the field_type of this NetFlowFieldDto.  # noqa: E501


        :return: The field_type of this NetFlowFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this NetFlowFieldDto.


        :param field_type: The field_type of this NetFlowFieldDto.  # noqa: E501
        :type: str
        """

        self._field_type = field_type

    @property
    def database_type(self):
        """Gets the database_type of this NetFlowFieldDto.  # noqa: E501


        :return: The database_type of this NetFlowFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._database_type

    @database_type.setter
    def database_type(self, database_type):
        """Sets the database_type of this NetFlowFieldDto.


        :param database_type: The database_type of this NetFlowFieldDto.  # noqa: E501
        :type: str
        """

        self._database_type = database_type

    @property
    def is_key(self):
        """Gets the is_key of this NetFlowFieldDto.  # noqa: E501


        :return: The is_key of this NetFlowFieldDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_key

    @is_key.setter
    def is_key(self, is_key):
        """Sets the is_key of this NetFlowFieldDto.


        :param is_key: The is_key of this NetFlowFieldDto.  # noqa: E501
        :type: bool
        """

        self._is_key = is_key

    @property
    def is_supported(self):
        """Gets the is_supported of this NetFlowFieldDto.  # noqa: E501


        :return: The is_supported of this NetFlowFieldDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_supported

    @is_supported.setter
    def is_supported(self, is_supported):
        """Sets the is_supported of this NetFlowFieldDto.


        :param is_supported: The is_supported of this NetFlowFieldDto.  # noqa: E501
        :type: bool
        """

        self._is_supported = is_supported

    @property
    def is_synthetic(self):
        """Gets the is_synthetic of this NetFlowFieldDto.  # noqa: E501


        :return: The is_synthetic of this NetFlowFieldDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_synthetic

    @is_synthetic.setter
    def is_synthetic(self, is_synthetic):
        """Sets the is_synthetic of this NetFlowFieldDto.


        :param is_synthetic: The is_synthetic of this NetFlowFieldDto.  # noqa: E501
        :type: bool
        """

        self._is_synthetic = is_synthetic

    @property
    def is_custom(self):
        """Gets the is_custom of this NetFlowFieldDto.  # noqa: E501


        :return: The is_custom of this NetFlowFieldDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_custom

    @is_custom.setter
    def is_custom(self, is_custom):
        """Sets the is_custom of this NetFlowFieldDto.


        :param is_custom: The is_custom of this NetFlowFieldDto.  # noqa: E501
        :type: bool
        """

        self._is_custom = is_custom

    @property
    def default_aggregation(self):
        """Gets the default_aggregation of this NetFlowFieldDto.  # noqa: E501


        :return: The default_aggregation of this NetFlowFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._default_aggregation

    @default_aggregation.setter
    def default_aggregation(self, default_aggregation):
        """Sets the default_aggregation of this NetFlowFieldDto.


        :param default_aggregation: The default_aggregation of this NetFlowFieldDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Sum", "Average", "AverageNonZero", "Max", "None"]  # noqa: E501
        if default_aggregation not in allowed_values:
            raise ValueError(
                "Invalid value for `default_aggregation` ({0}), must be one of {1}"  # noqa: E501
                .format(default_aggregation, allowed_values)
            )

        self._default_aggregation = default_aggregation

    @property
    def data_units(self):
        """Gets the data_units of this NetFlowFieldDto.  # noqa: E501


        :return: The data_units of this NetFlowFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._data_units

    @data_units.setter
    def data_units(self, data_units):
        """Sets the data_units of this NetFlowFieldDto.


        :param data_units: The data_units of this NetFlowFieldDto.  # noqa: E501
        :type: str
        """

        self._data_units = data_units

    @property
    def display_units(self):
        """Gets the display_units of this NetFlowFieldDto.  # noqa: E501


        :return: The display_units of this NetFlowFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._display_units

    @display_units.setter
    def display_units(self, display_units):
        """Sets the display_units of this NetFlowFieldDto.


        :param display_units: The display_units of this NetFlowFieldDto.  # noqa: E501
        :type: str
        """

        self._display_units = display_units

    @property
    def parent_field(self):
        """Gets the parent_field of this NetFlowFieldDto.  # noqa: E501


        :return: The parent_field of this NetFlowFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_field

    @parent_field.setter
    def parent_field(self, parent_field):
        """Sets the parent_field of this NetFlowFieldDto.


        :param parent_field: The parent_field of this NetFlowFieldDto.  # noqa: E501
        :type: str
        """

        self._parent_field = parent_field

    @property
    def aggregation_method(self):
        """Gets the aggregation_method of this NetFlowFieldDto.  # noqa: E501


        :return: The aggregation_method of this NetFlowFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_method

    @aggregation_method.setter
    def aggregation_method(self, aggregation_method):
        """Sets the aggregation_method of this NetFlowFieldDto.


        :param aggregation_method: The aggregation_method of this NetFlowFieldDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Sum", "Average", "AverageNonZero", "Max", "None"]  # noqa: E501
        if aggregation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_method` ({0}), must be one of {1}"  # noqa: E501
                .format(aggregation_method, allowed_values)
            )

        self._aggregation_method = aggregation_method

    @property
    def aggregation_methods(self):
        """Gets the aggregation_methods of this NetFlowFieldDto.  # noqa: E501


        :return: The aggregation_methods of this NetFlowFieldDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._aggregation_methods

    @aggregation_methods.setter
    def aggregation_methods(self, aggregation_methods):
        """Sets the aggregation_methods of this NetFlowFieldDto.


        :param aggregation_methods: The aggregation_methods of this NetFlowFieldDto.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Sum", "Average", "AverageNonZero", "Max", "None"]  # noqa: E501
        if not set(aggregation_methods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `aggregation_methods` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(aggregation_methods) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._aggregation_methods = aggregation_methods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetFlowFieldDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetFlowFieldDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
