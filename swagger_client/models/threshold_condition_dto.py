# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ThresholdConditionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'threshold_id': 'int',
        'policy_id': 'int',
        'policy_condition_id': 'int',
        'device_id': 'int',
        'plugin_id': 'int',
        'object_id': 'int',
        'poll_id': 'int',
        'type': 'int',
        'value': 'float',
        'unit': 'str',
        'comparison': 'int',
        'aggregation': 'int',
        'duration': 'int',
        'message': 'str',
        'sigma_direction': 'int',
        'value2': 'float',
        'flow_dto': 'ThresholdConditionFlowfalconDto'
    }

    attribute_map = {
        'id': 'id',
        'threshold_id': 'thresholdId',
        'policy_id': 'policyId',
        'policy_condition_id': 'policyConditionId',
        'device_id': 'deviceId',
        'plugin_id': 'pluginId',
        'object_id': 'objectId',
        'poll_id': 'pollId',
        'type': 'type',
        'value': 'value',
        'unit': 'unit',
        'comparison': 'comparison',
        'aggregation': 'aggregation',
        'duration': 'duration',
        'message': 'message',
        'sigma_direction': 'sigmaDirection',
        'value2': 'value2',
        'flow_dto': 'flowDto'
    }

    def __init__(self, id=None, threshold_id=None, policy_id=None, policy_condition_id=None, device_id=None, plugin_id=None, object_id=None, poll_id=None, type=None, value=None, unit=None, comparison=None, aggregation=None, duration=None, message=None, sigma_direction=None, value2=None, flow_dto=None):  # noqa: E501
        """ThresholdConditionDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._threshold_id = None
        self._policy_id = None
        self._policy_condition_id = None
        self._device_id = None
        self._plugin_id = None
        self._object_id = None
        self._poll_id = None
        self._type = None
        self._value = None
        self._unit = None
        self._comparison = None
        self._aggregation = None
        self._duration = None
        self._message = None
        self._sigma_direction = None
        self._value2 = None
        self._flow_dto = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if threshold_id is not None:
            self.threshold_id = threshold_id
        if policy_id is not None:
            self.policy_id = policy_id
        if policy_condition_id is not None:
            self.policy_condition_id = policy_condition_id
        if device_id is not None:
            self.device_id = device_id
        if plugin_id is not None:
            self.plugin_id = plugin_id
        if object_id is not None:
            self.object_id = object_id
        if poll_id is not None:
            self.poll_id = poll_id
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value
        if unit is not None:
            self.unit = unit
        if comparison is not None:
            self.comparison = comparison
        if aggregation is not None:
            self.aggregation = aggregation
        if duration is not None:
            self.duration = duration
        if message is not None:
            self.message = message
        if sigma_direction is not None:
            self.sigma_direction = sigma_direction
        if value2 is not None:
            self.value2 = value2
        if flow_dto is not None:
            self.flow_dto = flow_dto

    @property
    def id(self):
        """Gets the id of this ThresholdConditionDto.  # noqa: E501

        This field is [OUTPUT ONLY] in all cases except the following one: when a threshold is created, it is required to assign a value to it as a placeholder so that triggerExpression/clearExpression can refer to the condition. Once the threshold is created, both this field and triggerExpression/clearExpression are populated with the real id.  # noqa: E501

        :return: The id of this ThresholdConditionDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ThresholdConditionDto.

        This field is [OUTPUT ONLY] in all cases except the following one: when a threshold is created, it is required to assign a value to it as a placeholder so that triggerExpression/clearExpression can refer to the condition. Once the threshold is created, both this field and triggerExpression/clearExpression are populated with the real id.  # noqa: E501

        :param id: The id of this ThresholdConditionDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def threshold_id(self):
        """Gets the threshold_id of this ThresholdConditionDto.  # noqa: E501

        [Output Only]  # noqa: E501

        :return: The threshold_id of this ThresholdConditionDto.  # noqa: E501
        :rtype: int
        """
        return self._threshold_id

    @threshold_id.setter
    def threshold_id(self, threshold_id):
        """Sets the threshold_id of this ThresholdConditionDto.

        [Output Only]  # noqa: E501

        :param threshold_id: The threshold_id of this ThresholdConditionDto.  # noqa: E501
        :type: int
        """

        self._threshold_id = threshold_id

    @property
    def policy_id(self):
        """Gets the policy_id of this ThresholdConditionDto.  # noqa: E501

        [Output Only]  # noqa: E501

        :return: The policy_id of this ThresholdConditionDto.  # noqa: E501
        :rtype: int
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this ThresholdConditionDto.

        [Output Only]  # noqa: E501

        :param policy_id: The policy_id of this ThresholdConditionDto.  # noqa: E501
        :type: int
        """

        self._policy_id = policy_id

    @property
    def policy_condition_id(self):
        """Gets the policy_condition_id of this ThresholdConditionDto.  # noqa: E501

        [Output Only]  # noqa: E501

        :return: The policy_condition_id of this ThresholdConditionDto.  # noqa: E501
        :rtype: int
        """
        return self._policy_condition_id

    @policy_condition_id.setter
    def policy_condition_id(self, policy_condition_id):
        """Sets the policy_condition_id of this ThresholdConditionDto.

        [Output Only]  # noqa: E501

        :param policy_condition_id: The policy_condition_id of this ThresholdConditionDto.  # noqa: E501
        :type: int
        """

        self._policy_condition_id = policy_condition_id

    @property
    def device_id(self):
        """Gets the device_id of this ThresholdConditionDto.  # noqa: E501


        :return: The device_id of this ThresholdConditionDto.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ThresholdConditionDto.


        :param device_id: The device_id of this ThresholdConditionDto.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def plugin_id(self):
        """Gets the plugin_id of this ThresholdConditionDto.  # noqa: E501


        :return: The plugin_id of this ThresholdConditionDto.  # noqa: E501
        :rtype: int
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this ThresholdConditionDto.


        :param plugin_id: The plugin_id of this ThresholdConditionDto.  # noqa: E501
        :type: int
        """

        self._plugin_id = plugin_id

    @property
    def object_id(self):
        """Gets the object_id of this ThresholdConditionDto.  # noqa: E501


        :return: The object_id of this ThresholdConditionDto.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ThresholdConditionDto.


        :param object_id: The object_id of this ThresholdConditionDto.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def poll_id(self):
        """Gets the poll_id of this ThresholdConditionDto.  # noqa: E501


        :return: The poll_id of this ThresholdConditionDto.  # noqa: E501
        :rtype: int
        """
        return self._poll_id

    @poll_id.setter
    def poll_id(self, poll_id):
        """Sets the poll_id of this ThresholdConditionDto.


        :param poll_id: The poll_id of this ThresholdConditionDto.  # noqa: E501
        :type: int
        """

        self._poll_id = poll_id

    @property
    def type(self):
        """Gets the type of this ThresholdConditionDto.  # noqa: E501


        :return: The type of this ThresholdConditionDto.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ThresholdConditionDto.


        :param type: The type of this ThresholdConditionDto.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this ThresholdConditionDto.  # noqa: E501


        :return: The value of this ThresholdConditionDto.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ThresholdConditionDto.


        :param value: The value of this ThresholdConditionDto.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def unit(self):
        """Gets the unit of this ThresholdConditionDto.  # noqa: E501


        :return: The unit of this ThresholdConditionDto.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ThresholdConditionDto.


        :param unit: The unit of this ThresholdConditionDto.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def comparison(self):
        """Gets the comparison of this ThresholdConditionDto.  # noqa: E501


        :return: The comparison of this ThresholdConditionDto.  # noqa: E501
        :rtype: int
        """
        return self._comparison

    @comparison.setter
    def comparison(self, comparison):
        """Sets the comparison of this ThresholdConditionDto.


        :param comparison: The comparison of this ThresholdConditionDto.  # noqa: E501
        :type: int
        """

        self._comparison = comparison

    @property
    def aggregation(self):
        """Gets the aggregation of this ThresholdConditionDto.  # noqa: E501


        :return: The aggregation of this ThresholdConditionDto.  # noqa: E501
        :rtype: int
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this ThresholdConditionDto.


        :param aggregation: The aggregation of this ThresholdConditionDto.  # noqa: E501
        :type: int
        """

        self._aggregation = aggregation

    @property
    def duration(self):
        """Gets the duration of this ThresholdConditionDto.  # noqa: E501


        :return: The duration of this ThresholdConditionDto.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ThresholdConditionDto.


        :param duration: The duration of this ThresholdConditionDto.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def message(self):
        """Gets the message of this ThresholdConditionDto.  # noqa: E501


        :return: The message of this ThresholdConditionDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ThresholdConditionDto.


        :param message: The message of this ThresholdConditionDto.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def sigma_direction(self):
        """Gets the sigma_direction of this ThresholdConditionDto.  # noqa: E501


        :return: The sigma_direction of this ThresholdConditionDto.  # noqa: E501
        :rtype: int
        """
        return self._sigma_direction

    @sigma_direction.setter
    def sigma_direction(self, sigma_direction):
        """Sets the sigma_direction of this ThresholdConditionDto.


        :param sigma_direction: The sigma_direction of this ThresholdConditionDto.  # noqa: E501
        :type: int
        """

        self._sigma_direction = sigma_direction

    @property
    def value2(self):
        """Gets the value2 of this ThresholdConditionDto.  # noqa: E501


        :return: The value2 of this ThresholdConditionDto.  # noqa: E501
        :rtype: float
        """
        return self._value2

    @value2.setter
    def value2(self, value2):
        """Sets the value2 of this ThresholdConditionDto.


        :param value2: The value2 of this ThresholdConditionDto.  # noqa: E501
        :type: float
        """

        self._value2 = value2

    @property
    def flow_dto(self):
        """Gets the flow_dto of this ThresholdConditionDto.  # noqa: E501


        :return: The flow_dto of this ThresholdConditionDto.  # noqa: E501
        :rtype: ThresholdConditionFlowfalconDto
        """
        return self._flow_dto

    @flow_dto.setter
    def flow_dto(self, flow_dto):
        """Sets the flow_dto of this ThresholdConditionDto.


        :param flow_dto: The flow_dto of this ThresholdConditionDto.  # noqa: E501
        :type: ThresholdConditionFlowfalconDto
        """

        self._flow_dto = flow_dto

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThresholdConditionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThresholdConditionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
