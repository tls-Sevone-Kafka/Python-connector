# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetFlowDirectionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'peer': 'int',
        'origin_ip': 'str',
        'direction': 'int',
        'visible': 'int',
        'allowed': 'bool',
        'interface': 'int'
    }

    attribute_map = {
        'id': 'id',
        'peer': 'peer',
        'origin_ip': 'originIp',
        'direction': 'direction',
        'visible': 'visible',
        'allowed': 'allowed',
        'interface': 'interface'
    }

    def __init__(self, id=None, peer=None, origin_ip=None, direction=None, visible=None, allowed=None, interface=None):  # noqa: E501
        """NetFlowDirectionDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._peer = None
        self._origin_ip = None
        self._direction = None
        self._visible = None
        self._allowed = None
        self._interface = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if peer is not None:
            self.peer = peer
        if origin_ip is not None:
            self.origin_ip = origin_ip
        if direction is not None:
            self.direction = direction
        if visible is not None:
            self.visible = visible
        if allowed is not None:
            self.allowed = allowed
        if interface is not None:
            self.interface = interface

    @property
    def id(self):
        """Gets the id of this NetFlowDirectionDto.  # noqa: E501


        :return: The id of this NetFlowDirectionDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetFlowDirectionDto.


        :param id: The id of this NetFlowDirectionDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def peer(self):
        """Gets the peer of this NetFlowDirectionDto.  # noqa: E501


        :return: The peer of this NetFlowDirectionDto.  # noqa: E501
        :rtype: int
        """
        return self._peer

    @peer.setter
    def peer(self, peer):
        """Sets the peer of this NetFlowDirectionDto.


        :param peer: The peer of this NetFlowDirectionDto.  # noqa: E501
        :type: int
        """

        self._peer = peer

    @property
    def origin_ip(self):
        """Gets the origin_ip of this NetFlowDirectionDto.  # noqa: E501


        :return: The origin_ip of this NetFlowDirectionDto.  # noqa: E501
        :rtype: str
        """
        return self._origin_ip

    @origin_ip.setter
    def origin_ip(self, origin_ip):
        """Sets the origin_ip of this NetFlowDirectionDto.


        :param origin_ip: The origin_ip of this NetFlowDirectionDto.  # noqa: E501
        :type: str
        """

        self._origin_ip = origin_ip

    @property
    def direction(self):
        """Gets the direction of this NetFlowDirectionDto.  # noqa: E501


        :return: The direction of this NetFlowDirectionDto.  # noqa: E501
        :rtype: int
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this NetFlowDirectionDto.


        :param direction: The direction of this NetFlowDirectionDto.  # noqa: E501
        :type: int
        """

        self._direction = direction

    @property
    def visible(self):
        """Gets the visible of this NetFlowDirectionDto.  # noqa: E501


        :return: The visible of this NetFlowDirectionDto.  # noqa: E501
        :rtype: int
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this NetFlowDirectionDto.


        :param visible: The visible of this NetFlowDirectionDto.  # noqa: E501
        :type: int
        """

        self._visible = visible

    @property
    def allowed(self):
        """Gets the allowed of this NetFlowDirectionDto.  # noqa: E501


        :return: The allowed of this NetFlowDirectionDto.  # noqa: E501
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this NetFlowDirectionDto.


        :param allowed: The allowed of this NetFlowDirectionDto.  # noqa: E501
        :type: bool
        """

        self._allowed = allowed

    @property
    def interface(self):
        """Gets the interface of this NetFlowDirectionDto.  # noqa: E501


        :return: The interface of this NetFlowDirectionDto.  # noqa: E501
        :rtype: int
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this NetFlowDirectionDto.


        :param interface: The interface of this NetFlowDirectionDto.  # noqa: E501
        :type: int
        """

        self._interface = interface

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetFlowDirectionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetFlowDirectionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
