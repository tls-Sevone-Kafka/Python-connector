# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hide_headers': 'bool',
        'block_vis': 'bool',
        'wrap_cells': 'bool'
    }

    attribute_map = {
        'hide_headers': 'hideHeaders',
        'block_vis': 'blockVis',
        'wrap_cells': 'wrapCells'
    }

    def __init__(self, hide_headers=None, block_vis=None, wrap_cells=None):  # noqa: E501
        """TableSetting - a model defined in Swagger"""  # noqa: E501
        self._hide_headers = None
        self._block_vis = None
        self._wrap_cells = None
        self.discriminator = None
        if hide_headers is not None:
            self.hide_headers = hide_headers
        if block_vis is not None:
            self.block_vis = block_vis
        if wrap_cells is not None:
            self.wrap_cells = wrap_cells

    @property
    def hide_headers(self):
        """Gets the hide_headers of this TableSetting.  # noqa: E501


        :return: The hide_headers of this TableSetting.  # noqa: E501
        :rtype: bool
        """
        return self._hide_headers

    @hide_headers.setter
    def hide_headers(self, hide_headers):
        """Sets the hide_headers of this TableSetting.


        :param hide_headers: The hide_headers of this TableSetting.  # noqa: E501
        :type: bool
        """

        self._hide_headers = hide_headers

    @property
    def block_vis(self):
        """Gets the block_vis of this TableSetting.  # noqa: E501


        :return: The block_vis of this TableSetting.  # noqa: E501
        :rtype: bool
        """
        return self._block_vis

    @block_vis.setter
    def block_vis(self, block_vis):
        """Sets the block_vis of this TableSetting.


        :param block_vis: The block_vis of this TableSetting.  # noqa: E501
        :type: bool
        """

        self._block_vis = block_vis

    @property
    def wrap_cells(self):
        """Gets the wrap_cells of this TableSetting.  # noqa: E501


        :return: The wrap_cells of this TableSetting.  # noqa: E501
        :rtype: bool
        """
        return self._wrap_cells

    @wrap_cells.setter
    def wrap_cells(self, wrap_cells):
        """Sets the wrap_cells of this TableSetting.


        :param wrap_cells: The wrap_cells of this TableSetting.  # noqa: E501
        :type: bool
        """

        self._wrap_cells = wrap_cells

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
