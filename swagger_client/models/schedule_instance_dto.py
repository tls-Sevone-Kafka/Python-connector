# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduleInstanceDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'begin_date_time': 'str',
        'end_date_time': 'str',
        'create_date_time': 'str',
        'is_retroactive': 'bool'
    }

    attribute_map = {
        'begin_date_time': 'beginDateTime',
        'end_date_time': 'endDateTime',
        'create_date_time': 'createDateTime',
        'is_retroactive': 'isRetroactive'
    }

    def __init__(self, begin_date_time='Start of maintenance window', end_date_time='End of maintenance window', create_date_time='Creation time of maintenance window -- readonly', is_retroactive=False):  # noqa: E501
        """ScheduleInstanceDto - a model defined in Swagger"""  # noqa: E501
        self._begin_date_time = None
        self._end_date_time = None
        self._create_date_time = None
        self._is_retroactive = None
        self.discriminator = None
        self.begin_date_time = begin_date_time
        self.end_date_time = end_date_time
        if create_date_time is not None:
            self.create_date_time = create_date_time
        if is_retroactive is not None:
            self.is_retroactive = is_retroactive

    @property
    def begin_date_time(self):
        """Gets the begin_date_time of this ScheduleInstanceDto.  # noqa: E501


        :return: The begin_date_time of this ScheduleInstanceDto.  # noqa: E501
        :rtype: str
        """
        return self._begin_date_time

    @begin_date_time.setter
    def begin_date_time(self, begin_date_time):
        """Sets the begin_date_time of this ScheduleInstanceDto.


        :param begin_date_time: The begin_date_time of this ScheduleInstanceDto.  # noqa: E501
        :type: str
        """
        if begin_date_time is None:
            raise ValueError("Invalid value for `begin_date_time`, must not be `None`")  # noqa: E501

        self._begin_date_time = begin_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ScheduleInstanceDto.  # noqa: E501


        :return: The end_date_time of this ScheduleInstanceDto.  # noqa: E501
        :rtype: str
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ScheduleInstanceDto.


        :param end_date_time: The end_date_time of this ScheduleInstanceDto.  # noqa: E501
        :type: str
        """
        if end_date_time is None:
            raise ValueError("Invalid value for `end_date_time`, must not be `None`")  # noqa: E501

        self._end_date_time = end_date_time

    @property
    def create_date_time(self):
        """Gets the create_date_time of this ScheduleInstanceDto.  # noqa: E501


        :return: The create_date_time of this ScheduleInstanceDto.  # noqa: E501
        :rtype: str
        """
        return self._create_date_time

    @create_date_time.setter
    def create_date_time(self, create_date_time):
        """Sets the create_date_time of this ScheduleInstanceDto.


        :param create_date_time: The create_date_time of this ScheduleInstanceDto.  # noqa: E501
        :type: str
        """

        self._create_date_time = create_date_time

    @property
    def is_retroactive(self):
        """Gets the is_retroactive of this ScheduleInstanceDto.  # noqa: E501


        :return: The is_retroactive of this ScheduleInstanceDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_retroactive

    @is_retroactive.setter
    def is_retroactive(self, is_retroactive):
        """Sets the is_retroactive of this ScheduleInstanceDto.


        :param is_retroactive: The is_retroactive of this ScheduleInstanceDto.  # noqa: E501
        :type: bool
        """

        self._is_retroactive = is_retroactive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleInstanceDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleInstanceDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
