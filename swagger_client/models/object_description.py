# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ObjectDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'plugin_name': 'str',
        'description': 'str',
        'automatic_creation': 'bool',
        'timestamps': 'list[TimestampDescription]'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'plugin_name': 'pluginName',
        'description': 'description',
        'automatic_creation': 'automaticCreation',
        'timestamps': 'timestamps'
    }

    def __init__(self, name='The name of the object', type='The object type for this object', plugin_name="The name of the object's plugin", description='The description of the object', automatic_creation=False, timestamps=None):  # noqa: E501
        """ObjectDescription - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._plugin_name = None
        self._description = None
        self._automatic_creation = None
        self._timestamps = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if plugin_name is not None:
            self.plugin_name = plugin_name
        if description is not None:
            self.description = description
        if automatic_creation is not None:
            self.automatic_creation = automatic_creation
        if timestamps is not None:
            self.timestamps = timestamps

    @property
    def name(self):
        """Gets the name of this ObjectDescription.  # noqa: E501


        :return: The name of this ObjectDescription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjectDescription.


        :param name: The name of this ObjectDescription.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ObjectDescription.  # noqa: E501


        :return: The type of this ObjectDescription.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ObjectDescription.


        :param type: The type of this ObjectDescription.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def plugin_name(self):
        """Gets the plugin_name of this ObjectDescription.  # noqa: E501


        :return: The plugin_name of this ObjectDescription.  # noqa: E501
        :rtype: str
        """
        return self._plugin_name

    @plugin_name.setter
    def plugin_name(self, plugin_name):
        """Sets the plugin_name of this ObjectDescription.


        :param plugin_name: The plugin_name of this ObjectDescription.  # noqa: E501
        :type: str
        """

        self._plugin_name = plugin_name

    @property
    def description(self):
        """Gets the description of this ObjectDescription.  # noqa: E501


        :return: The description of this ObjectDescription.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ObjectDescription.


        :param description: The description of this ObjectDescription.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def automatic_creation(self):
        """Gets the automatic_creation of this ObjectDescription.  # noqa: E501


        :return: The automatic_creation of this ObjectDescription.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_creation

    @automatic_creation.setter
    def automatic_creation(self, automatic_creation):
        """Sets the automatic_creation of this ObjectDescription.


        :param automatic_creation: The automatic_creation of this ObjectDescription.  # noqa: E501
        :type: bool
        """

        self._automatic_creation = automatic_creation

    @property
    def timestamps(self):
        """Gets the timestamps of this ObjectDescription.  # noqa: E501


        :return: The timestamps of this ObjectDescription.  # noqa: E501
        :rtype: list[TimestampDescription]
        """
        return self._timestamps

    @timestamps.setter
    def timestamps(self, timestamps):
        """Sets the timestamps of this ObjectDescription.


        :param timestamps: The timestamps of this ObjectDescription.  # noqa: E501
        :type: list[TimestampDescription]
        """

        self._timestamps = timestamps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ObjectDescription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
