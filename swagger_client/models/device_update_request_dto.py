# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceUpdateRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'alternate_name': 'str',
        'description': 'str',
        'ip_address': 'str',
        'poll_frequency': 'int',
        'allow_delete': 'bool',
        'disable_polling': 'bool',
        'disable_concurrent_polling': 'bool',
        'disable_thresholding': 'bool',
        'timezone': 'str',
        'workhours_group_id': 'int',
        'objects': 'list[DeviceObjectRequestDto]',
        'plugin_info': 'dict(str, PluginInfo)',
        'manual_ip': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'alternate_name': 'alternateName',
        'description': 'description',
        'ip_address': 'ipAddress',
        'poll_frequency': 'pollFrequency',
        'allow_delete': 'allowDelete',
        'disable_polling': 'disablePolling',
        'disable_concurrent_polling': 'disableConcurrentPolling',
        'disable_thresholding': 'disableThresholding',
        'timezone': 'timezone',
        'workhours_group_id': 'workhoursGroupId',
        'objects': 'objects',
        'plugin_info': 'pluginInfo',
        'manual_ip': 'manualIP'
    }

    def __init__(self, name=None, alternate_name=None, description=None, ip_address=None, poll_frequency=None, allow_delete=None, disable_polling=None, disable_concurrent_polling=None, disable_thresholding=None, timezone=None, workhours_group_id=None, objects=None, plugin_info=None, manual_ip=None):  # noqa: E501
        """DeviceUpdateRequestDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._alternate_name = None
        self._description = None
        self._ip_address = None
        self._poll_frequency = None
        self._allow_delete = None
        self._disable_polling = None
        self._disable_concurrent_polling = None
        self._disable_thresholding = None
        self._timezone = None
        self._workhours_group_id = None
        self._objects = None
        self._plugin_info = None
        self._manual_ip = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if alternate_name is not None:
            self.alternate_name = alternate_name
        if description is not None:
            self.description = description
        if ip_address is not None:
            self.ip_address = ip_address
        if poll_frequency is not None:
            self.poll_frequency = poll_frequency
        if allow_delete is not None:
            self.allow_delete = allow_delete
        if disable_polling is not None:
            self.disable_polling = disable_polling
        if disable_concurrent_polling is not None:
            self.disable_concurrent_polling = disable_concurrent_polling
        if disable_thresholding is not None:
            self.disable_thresholding = disable_thresholding
        if timezone is not None:
            self.timezone = timezone
        if workhours_group_id is not None:
            self.workhours_group_id = workhours_group_id
        if objects is not None:
            self.objects = objects
        if plugin_info is not None:
            self.plugin_info = plugin_info
        if manual_ip is not None:
            self.manual_ip = manual_ip

    @property
    def name(self):
        """Gets the name of this DeviceUpdateRequestDto.  # noqa: E501


        :return: The name of this DeviceUpdateRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceUpdateRequestDto.


        :param name: The name of this DeviceUpdateRequestDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def alternate_name(self):
        """Gets the alternate_name of this DeviceUpdateRequestDto.  # noqa: E501


        :return: The alternate_name of this DeviceUpdateRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this DeviceUpdateRequestDto.


        :param alternate_name: The alternate_name of this DeviceUpdateRequestDto.  # noqa: E501
        :type: str
        """

        self._alternate_name = alternate_name

    @property
    def description(self):
        """Gets the description of this DeviceUpdateRequestDto.  # noqa: E501


        :return: The description of this DeviceUpdateRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceUpdateRequestDto.


        :param description: The description of this DeviceUpdateRequestDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def ip_address(self):
        """Gets the ip_address of this DeviceUpdateRequestDto.  # noqa: E501


        :return: The ip_address of this DeviceUpdateRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this DeviceUpdateRequestDto.


        :param ip_address: The ip_address of this DeviceUpdateRequestDto.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def poll_frequency(self):
        """Gets the poll_frequency of this DeviceUpdateRequestDto.  # noqa: E501


        :return: The poll_frequency of this DeviceUpdateRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._poll_frequency

    @poll_frequency.setter
    def poll_frequency(self, poll_frequency):
        """Sets the poll_frequency of this DeviceUpdateRequestDto.


        :param poll_frequency: The poll_frequency of this DeviceUpdateRequestDto.  # noqa: E501
        :type: int
        """

        self._poll_frequency = poll_frequency

    @property
    def allow_delete(self):
        """Gets the allow_delete of this DeviceUpdateRequestDto.  # noqa: E501


        :return: The allow_delete of this DeviceUpdateRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._allow_delete

    @allow_delete.setter
    def allow_delete(self, allow_delete):
        """Sets the allow_delete of this DeviceUpdateRequestDto.


        :param allow_delete: The allow_delete of this DeviceUpdateRequestDto.  # noqa: E501
        :type: bool
        """

        self._allow_delete = allow_delete

    @property
    def disable_polling(self):
        """Gets the disable_polling of this DeviceUpdateRequestDto.  # noqa: E501


        :return: The disable_polling of this DeviceUpdateRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._disable_polling

    @disable_polling.setter
    def disable_polling(self, disable_polling):
        """Sets the disable_polling of this DeviceUpdateRequestDto.


        :param disable_polling: The disable_polling of this DeviceUpdateRequestDto.  # noqa: E501
        :type: bool
        """

        self._disable_polling = disable_polling

    @property
    def disable_concurrent_polling(self):
        """Gets the disable_concurrent_polling of this DeviceUpdateRequestDto.  # noqa: E501


        :return: The disable_concurrent_polling of this DeviceUpdateRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._disable_concurrent_polling

    @disable_concurrent_polling.setter
    def disable_concurrent_polling(self, disable_concurrent_polling):
        """Sets the disable_concurrent_polling of this DeviceUpdateRequestDto.


        :param disable_concurrent_polling: The disable_concurrent_polling of this DeviceUpdateRequestDto.  # noqa: E501
        :type: bool
        """

        self._disable_concurrent_polling = disable_concurrent_polling

    @property
    def disable_thresholding(self):
        """Gets the disable_thresholding of this DeviceUpdateRequestDto.  # noqa: E501


        :return: The disable_thresholding of this DeviceUpdateRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._disable_thresholding

    @disable_thresholding.setter
    def disable_thresholding(self, disable_thresholding):
        """Sets the disable_thresholding of this DeviceUpdateRequestDto.


        :param disable_thresholding: The disable_thresholding of this DeviceUpdateRequestDto.  # noqa: E501
        :type: bool
        """

        self._disable_thresholding = disable_thresholding

    @property
    def timezone(self):
        """Gets the timezone of this DeviceUpdateRequestDto.  # noqa: E501


        :return: The timezone of this DeviceUpdateRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this DeviceUpdateRequestDto.


        :param timezone: The timezone of this DeviceUpdateRequestDto.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def workhours_group_id(self):
        """Gets the workhours_group_id of this DeviceUpdateRequestDto.  # noqa: E501


        :return: The workhours_group_id of this DeviceUpdateRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._workhours_group_id

    @workhours_group_id.setter
    def workhours_group_id(self, workhours_group_id):
        """Sets the workhours_group_id of this DeviceUpdateRequestDto.


        :param workhours_group_id: The workhours_group_id of this DeviceUpdateRequestDto.  # noqa: E501
        :type: int
        """

        self._workhours_group_id = workhours_group_id

    @property
    def objects(self):
        """Gets the objects of this DeviceUpdateRequestDto.  # noqa: E501


        :return: The objects of this DeviceUpdateRequestDto.  # noqa: E501
        :rtype: list[DeviceObjectRequestDto]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """Sets the objects of this DeviceUpdateRequestDto.


        :param objects: The objects of this DeviceUpdateRequestDto.  # noqa: E501
        :type: list[DeviceObjectRequestDto]
        """

        self._objects = objects

    @property
    def plugin_info(self):
        """Gets the plugin_info of this DeviceUpdateRequestDto.  # noqa: E501


        :return: The plugin_info of this DeviceUpdateRequestDto.  # noqa: E501
        :rtype: dict(str, PluginInfo)
        """
        return self._plugin_info

    @plugin_info.setter
    def plugin_info(self, plugin_info):
        """Sets the plugin_info of this DeviceUpdateRequestDto.


        :param plugin_info: The plugin_info of this DeviceUpdateRequestDto.  # noqa: E501
        :type: dict(str, PluginInfo)
        """

        self._plugin_info = plugin_info

    @property
    def manual_ip(self):
        """Gets the manual_ip of this DeviceUpdateRequestDto.  # noqa: E501


        :return: The manual_ip of this DeviceUpdateRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._manual_ip

    @manual_ip.setter
    def manual_ip(self, manual_ip):
        """Sets the manual_ip of this DeviceUpdateRequestDto.


        :param manual_ip: The manual_ip of this DeviceUpdateRequestDto.  # noqa: E501
        :type: bool
        """

        self._manual_ip = manual_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceUpdateRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceUpdateRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
