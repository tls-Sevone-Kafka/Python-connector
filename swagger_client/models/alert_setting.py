# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlertSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_view': 'str',
        'event_summary': 'bool',
        'inlcude_maintenance_window_alerts': 'bool'
    }

    attribute_map = {
        'default_view': 'defaultView',
        'event_summary': 'eventSummary',
        'inlcude_maintenance_window_alerts': 'inlcudeMaintenanceWindowAlerts'
    }

    def __init__(self, default_view=None, event_summary=None, inlcude_maintenance_window_alerts=None):  # noqa: E501
        """AlertSetting - a model defined in Swagger"""  # noqa: E501
        self._default_view = None
        self._event_summary = None
        self._inlcude_maintenance_window_alerts = None
        self.discriminator = None
        if default_view is not None:
            self.default_view = default_view
        if event_summary is not None:
            self.event_summary = event_summary
        if inlcude_maintenance_window_alerts is not None:
            self.inlcude_maintenance_window_alerts = inlcude_maintenance_window_alerts

    @property
    def default_view(self):
        """Gets the default_view of this AlertSetting.  # noqa: E501


        :return: The default_view of this AlertSetting.  # noqa: E501
        :rtype: str
        """
        return self._default_view

    @default_view.setter
    def default_view(self, default_view):
        """Sets the default_view of this AlertSetting.


        :param default_view: The default_view of this AlertSetting.  # noqa: E501
        :type: str
        """
        allowed_values = ["devices", "groups", "objects"]  # noqa: E501
        if default_view not in allowed_values:
            raise ValueError(
                "Invalid value for `default_view` ({0}), must be one of {1}"  # noqa: E501
                .format(default_view, allowed_values)
            )

        self._default_view = default_view

    @property
    def event_summary(self):
        """Gets the event_summary of this AlertSetting.  # noqa: E501


        :return: The event_summary of this AlertSetting.  # noqa: E501
        :rtype: bool
        """
        return self._event_summary

    @event_summary.setter
    def event_summary(self, event_summary):
        """Sets the event_summary of this AlertSetting.


        :param event_summary: The event_summary of this AlertSetting.  # noqa: E501
        :type: bool
        """

        self._event_summary = event_summary

    @property
    def inlcude_maintenance_window_alerts(self):
        """Gets the inlcude_maintenance_window_alerts of this AlertSetting.  # noqa: E501


        :return: The inlcude_maintenance_window_alerts of this AlertSetting.  # noqa: E501
        :rtype: bool
        """
        return self._inlcude_maintenance_window_alerts

    @inlcude_maintenance_window_alerts.setter
    def inlcude_maintenance_window_alerts(self, inlcude_maintenance_window_alerts):
        """Sets the inlcude_maintenance_window_alerts of this AlertSetting.


        :param inlcude_maintenance_window_alerts: The inlcude_maintenance_window_alerts of this AlertSetting.  # noqa: E501
        :type: bool
        """

        self._inlcude_maintenance_window_alerts = inlcude_maintenance_window_alerts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
