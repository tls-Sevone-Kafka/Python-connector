# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Severity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'object_id': 'int',
        'active': 'bool',
        'assigned': 'bool',
        'severity': 'int',
        'num_alerts': 'int',
        'alert_id': 'int',
        'start_time': 'int',
        'end_time': 'int',
        'clear_time': 'int'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'object_id': 'objectId',
        'active': 'active',
        'assigned': 'assigned',
        'severity': 'severity',
        'num_alerts': 'numAlerts',
        'alert_id': 'alertId',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'clear_time': 'clearTime'
    }

    def __init__(self, device_id=None, object_id=None, active=None, assigned=None, severity=None, num_alerts=None, alert_id=None, start_time=None, end_time=None, clear_time=None):  # noqa: E501
        """Severity - a model defined in Swagger"""  # noqa: E501
        self._device_id = None
        self._object_id = None
        self._active = None
        self._assigned = None
        self._severity = None
        self._num_alerts = None
        self._alert_id = None
        self._start_time = None
        self._end_time = None
        self._clear_time = None
        self.discriminator = None
        if device_id is not None:
            self.device_id = device_id
        if object_id is not None:
            self.object_id = object_id
        if active is not None:
            self.active = active
        if assigned is not None:
            self.assigned = assigned
        if severity is not None:
            self.severity = severity
        if num_alerts is not None:
            self.num_alerts = num_alerts
        if alert_id is not None:
            self.alert_id = alert_id
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if clear_time is not None:
            self.clear_time = clear_time

    @property
    def device_id(self):
        """Gets the device_id of this Severity.  # noqa: E501


        :return: The device_id of this Severity.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Severity.


        :param device_id: The device_id of this Severity.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def object_id(self):
        """Gets the object_id of this Severity.  # noqa: E501


        :return: The object_id of this Severity.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this Severity.


        :param object_id: The object_id of this Severity.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def active(self):
        """Gets the active of this Severity.  # noqa: E501


        :return: The active of this Severity.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Severity.


        :param active: The active of this Severity.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def assigned(self):
        """Gets the assigned of this Severity.  # noqa: E501


        :return: The assigned of this Severity.  # noqa: E501
        :rtype: bool
        """
        return self._assigned

    @assigned.setter
    def assigned(self, assigned):
        """Sets the assigned of this Severity.


        :param assigned: The assigned of this Severity.  # noqa: E501
        :type: bool
        """

        self._assigned = assigned

    @property
    def severity(self):
        """Gets the severity of this Severity.  # noqa: E501


        :return: The severity of this Severity.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Severity.


        :param severity: The severity of this Severity.  # noqa: E501
        :type: int
        """

        self._severity = severity

    @property
    def num_alerts(self):
        """Gets the num_alerts of this Severity.  # noqa: E501


        :return: The num_alerts of this Severity.  # noqa: E501
        :rtype: int
        """
        return self._num_alerts

    @num_alerts.setter
    def num_alerts(self, num_alerts):
        """Sets the num_alerts of this Severity.


        :param num_alerts: The num_alerts of this Severity.  # noqa: E501
        :type: int
        """

        self._num_alerts = num_alerts

    @property
    def alert_id(self):
        """Gets the alert_id of this Severity.  # noqa: E501


        :return: The alert_id of this Severity.  # noqa: E501
        :rtype: int
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this Severity.


        :param alert_id: The alert_id of this Severity.  # noqa: E501
        :type: int
        """

        self._alert_id = alert_id

    @property
    def start_time(self):
        """Gets the start_time of this Severity.  # noqa: E501

        Unix timestamp with milliseconds proximity  # noqa: E501

        :return: The start_time of this Severity.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Severity.

        Unix timestamp with milliseconds proximity  # noqa: E501

        :param start_time: The start_time of this Severity.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this Severity.  # noqa: E501

        Unix timestamp with milliseconds proximity  # noqa: E501

        :return: The end_time of this Severity.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Severity.

        Unix timestamp with milliseconds proximity  # noqa: E501

        :param end_time: The end_time of this Severity.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def clear_time(self):
        """Gets the clear_time of this Severity.  # noqa: E501

        Unix timestamp with milliseconds proximity  # noqa: E501

        :return: The clear_time of this Severity.  # noqa: E501
        :rtype: int
        """
        return self._clear_time

    @clear_time.setter
    def clear_time(self, clear_time):
        """Sets the clear_time of this Severity.

        Unix timestamp with milliseconds proximity  # noqa: E501

        :param clear_time: The clear_time of this Severity.  # noqa: E501
        :type: int
        """

        self._clear_time = clear_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Severity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Severity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
