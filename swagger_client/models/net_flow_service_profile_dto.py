# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetFlowServiceProfileDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'service_name': 'str',
        'service_desc': 'str',
        'aggregation_port': 'int',
        'is_enable_agg_port': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'service_name': 'serviceName',
        'service_desc': 'serviceDesc',
        'aggregation_port': 'aggregationPort',
        'is_enable_agg_port': 'isEnableAggPort'
    }

    def __init__(self, id=None, service_name=None, service_desc=None, aggregation_port=None, is_enable_agg_port=None):  # noqa: E501
        """NetFlowServiceProfileDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._service_name = None
        self._service_desc = None
        self._aggregation_port = None
        self._is_enable_agg_port = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if service_name is not None:
            self.service_name = service_name
        if service_desc is not None:
            self.service_desc = service_desc
        if aggregation_port is not None:
            self.aggregation_port = aggregation_port
        if is_enable_agg_port is not None:
            self.is_enable_agg_port = is_enable_agg_port

    @property
    def id(self):
        """Gets the id of this NetFlowServiceProfileDto.  # noqa: E501


        :return: The id of this NetFlowServiceProfileDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetFlowServiceProfileDto.


        :param id: The id of this NetFlowServiceProfileDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def service_name(self):
        """Gets the service_name of this NetFlowServiceProfileDto.  # noqa: E501


        :return: The service_name of this NetFlowServiceProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this NetFlowServiceProfileDto.


        :param service_name: The service_name of this NetFlowServiceProfileDto.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def service_desc(self):
        """Gets the service_desc of this NetFlowServiceProfileDto.  # noqa: E501


        :return: The service_desc of this NetFlowServiceProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._service_desc

    @service_desc.setter
    def service_desc(self, service_desc):
        """Sets the service_desc of this NetFlowServiceProfileDto.


        :param service_desc: The service_desc of this NetFlowServiceProfileDto.  # noqa: E501
        :type: str
        """

        self._service_desc = service_desc

    @property
    def aggregation_port(self):
        """Gets the aggregation_port of this NetFlowServiceProfileDto.  # noqa: E501


        :return: The aggregation_port of this NetFlowServiceProfileDto.  # noqa: E501
        :rtype: int
        """
        return self._aggregation_port

    @aggregation_port.setter
    def aggregation_port(self, aggregation_port):
        """Sets the aggregation_port of this NetFlowServiceProfileDto.


        :param aggregation_port: The aggregation_port of this NetFlowServiceProfileDto.  # noqa: E501
        :type: int
        """

        self._aggregation_port = aggregation_port

    @property
    def is_enable_agg_port(self):
        """Gets the is_enable_agg_port of this NetFlowServiceProfileDto.  # noqa: E501


        :return: The is_enable_agg_port of this NetFlowServiceProfileDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_enable_agg_port

    @is_enable_agg_port.setter
    def is_enable_agg_port(self, is_enable_agg_port):
        """Sets the is_enable_agg_port of this NetFlowServiceProfileDto.


        :param is_enable_agg_port: The is_enable_agg_port of this NetFlowServiceProfileDto.  # noqa: E501
        :type: bool
        """

        self._is_enable_agg_port = is_enable_agg_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetFlowServiceProfileDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetFlowServiceProfileDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
