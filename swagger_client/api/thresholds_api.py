# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ThresholdsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_threshold(self, body, device_id, **kwargs):  # noqa: E501
        """Create threshold  # noqa: E501

        Create threshold  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_threshold(body, device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThresholdDto body: (required)
        :param int device_id: The flow device id (required)
        :return: ThresholdDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_threshold_with_http_info(body, device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_threshold_with_http_info(body, device_id, **kwargs)  # noqa: E501
            return data

    def create_threshold_with_http_info(self, body, device_id, **kwargs):  # noqa: E501
        """Create threshold  # noqa: E501

        Create threshold  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_threshold_with_http_info(body, device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThresholdDto body: (required)
        :param int device_id: The flow device id (required)
        :return: ThresholdDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'device_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_threshold" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_threshold`")  # noqa: E501
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `create_threshold`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/thresholds/flow/{deviceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThresholdDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_threshold_condition(self, body, device_id, threshold_id, trigger_type, **kwargs):  # noqa: E501
        """add a condition to a threshold  # noqa: E501

        add a threshold condition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_threshold_condition(body, device_id, threshold_id, trigger_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThresholdConditionDto body: (required)
        :param int device_id: (required)
        :param int threshold_id: (required)
        :param str trigger_type: (required)
        :return: ThresholdConditionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_threshold_condition_with_http_info(body, device_id, threshold_id, trigger_type, **kwargs)  # noqa: E501
        else:
            (data) = self.create_threshold_condition_with_http_info(body, device_id, threshold_id, trigger_type, **kwargs)  # noqa: E501
            return data

    def create_threshold_condition_with_http_info(self, body, device_id, threshold_id, trigger_type, **kwargs):  # noqa: E501
        """add a condition to a threshold  # noqa: E501

        add a threshold condition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_threshold_condition_with_http_info(body, device_id, threshold_id, trigger_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThresholdConditionDto body: (required)
        :param int device_id: (required)
        :param int threshold_id: (required)
        :param str trigger_type: (required)
        :return: ThresholdConditionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'device_id', 'threshold_id', 'trigger_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_threshold_condition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_threshold_condition`")  # noqa: E501
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `create_threshold_condition`")  # noqa: E501
        # verify the required parameter 'threshold_id' is set
        if ('threshold_id' not in params or
                params['threshold_id'] is None):
            raise ValueError("Missing the required parameter `threshold_id` when calling `create_threshold_condition`")  # noqa: E501
        # verify the required parameter 'trigger_type' is set
        if ('trigger_type' not in params or
                params['trigger_type'] is None):
            raise ValueError("Missing the required parameter `trigger_type` when calling `create_threshold_condition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'threshold_id' in params:
            path_params['thresholdId'] = params['threshold_id']  # noqa: E501
        if 'trigger_type' in params:
            path_params['triggerType'] = params['trigger_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/thresholds/flow/{deviceId}/{thresholdId}/{triggerType}/conditions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThresholdConditionDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_threshold_by_id(self, device_id, threshold_id, **kwargs):  # noqa: E501
        """Delete threshold by Id  # noqa: E501

        Delete a threshold  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_threshold_by_id(device_id, threshold_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The flow device id (required)
        :param int threshold_id: The threshold id (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_threshold_by_id_with_http_info(device_id, threshold_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_threshold_by_id_with_http_info(device_id, threshold_id, **kwargs)  # noqa: E501
            return data

    def delete_threshold_by_id_with_http_info(self, device_id, threshold_id, **kwargs):  # noqa: E501
        """Delete threshold by Id  # noqa: E501

        Delete a threshold  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_threshold_by_id_with_http_info(device_id, threshold_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The flow device id (required)
        :param int threshold_id: The threshold id (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'threshold_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_threshold_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `delete_threshold_by_id`")  # noqa: E501
        # verify the required parameter 'threshold_id' is set
        if ('threshold_id' not in params or
                params['threshold_id'] is None):
            raise ValueError("Missing the required parameter `threshold_id` when calling `delete_threshold_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'threshold_id' in params:
            path_params['thresholdId'] = params['threshold_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/thresholds/flow/{deviceId}/{thresholdId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_threshold_condition_by_id(self, device_id, threshold_id, trigger_type, condition_id, **kwargs):  # noqa: E501
        """delete a condition of a threshold  # noqa: E501

        delete a threshold condition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_threshold_condition_by_id(device_id, threshold_id, trigger_type, condition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: (required)
        :param int threshold_id: (required)
        :param str trigger_type: (required)
        :param int condition_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_threshold_condition_by_id_with_http_info(device_id, threshold_id, trigger_type, condition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_threshold_condition_by_id_with_http_info(device_id, threshold_id, trigger_type, condition_id, **kwargs)  # noqa: E501
            return data

    def delete_threshold_condition_by_id_with_http_info(self, device_id, threshold_id, trigger_type, condition_id, **kwargs):  # noqa: E501
        """delete a condition of a threshold  # noqa: E501

        delete a threshold condition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_threshold_condition_by_id_with_http_info(device_id, threshold_id, trigger_type, condition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: (required)
        :param int threshold_id: (required)
        :param str trigger_type: (required)
        :param int condition_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'threshold_id', 'trigger_type', 'condition_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_threshold_condition_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `delete_threshold_condition_by_id`")  # noqa: E501
        # verify the required parameter 'threshold_id' is set
        if ('threshold_id' not in params or
                params['threshold_id'] is None):
            raise ValueError("Missing the required parameter `threshold_id` when calling `delete_threshold_condition_by_id`")  # noqa: E501
        # verify the required parameter 'trigger_type' is set
        if ('trigger_type' not in params or
                params['trigger_type'] is None):
            raise ValueError("Missing the required parameter `trigger_type` when calling `delete_threshold_condition_by_id`")  # noqa: E501
        # verify the required parameter 'condition_id' is set
        if ('condition_id' not in params or
                params['condition_id'] is None):
            raise ValueError("Missing the required parameter `condition_id` when calling `delete_threshold_condition_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'threshold_id' in params:
            path_params['thresholdId'] = params['threshold_id']  # noqa: E501
        if 'trigger_type' in params:
            path_params['triggerType'] = params['trigger_type']  # noqa: E501
        if 'condition_id' in params:
            path_params['conditionId'] = params['condition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/thresholds/flow/{deviceId}/{thresholdId}/{triggerType}/conditions/{conditionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_threshold_by_id(self, device_id, threshold_id, **kwargs):  # noqa: E501
        """Get a threshold by id  # noqa: E501

        Get threshold  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_threshold_by_id(device_id, threshold_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The flow device id (required)
        :param int threshold_id: The threshold id (required)
        :return: ThresholdDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_threshold_by_id_with_http_info(device_id, threshold_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_threshold_by_id_with_http_info(device_id, threshold_id, **kwargs)  # noqa: E501
            return data

    def get_threshold_by_id_with_http_info(self, device_id, threshold_id, **kwargs):  # noqa: E501
        """Get a threshold by id  # noqa: E501

        Get threshold  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_threshold_by_id_with_http_info(device_id, threshold_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The flow device id (required)
        :param int threshold_id: The threshold id (required)
        :return: ThresholdDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'threshold_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_threshold_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_threshold_by_id`")  # noqa: E501
        # verify the required parameter 'threshold_id' is set
        if ('threshold_id' not in params or
                params['threshold_id'] is None):
            raise ValueError("Missing the required parameter `threshold_id` when calling `get_threshold_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'threshold_id' in params:
            path_params['thresholdId'] = params['threshold_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/thresholds/flow/{deviceId}/{thresholdId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThresholdDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_thresholds(self, **kwargs):  # noqa: E501
        """Get thresholds  # noqa: E501

        Get thresholds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_thresholds(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Threshold type filter. If not set, both other and flow thresholds are returned
        :param int page:
        :param int size:
        :param bool include_count:
        :return: PagerThresholdDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_thresholds_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_thresholds_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_thresholds_with_http_info(self, **kwargs):  # noqa: E501
        """Get thresholds  # noqa: E501

        Get thresholds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_thresholds_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Threshold type filter. If not set, both other and flow thresholds are returned
        :param int page:
        :param int size:
        :param bool include_count:
        :return: PagerThresholdDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'page', 'size', 'include_count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_thresholds" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'include_count' in params:
            query_params.append(('includeCount', params['include_count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/thresholds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerThresholdDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_threshold(self, body, device_id, threshold_id, **kwargs):  # noqa: E501
        """Update threshold by ID  # noqa: E501

        Update threshold  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_threshold(body, device_id, threshold_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThresholdDto body: (required)
        :param int device_id: The flow device id (required)
        :param int threshold_id: The threshold id to be updated (required)
        :return: ThresholdDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_threshold_with_http_info(body, device_id, threshold_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_threshold_with_http_info(body, device_id, threshold_id, **kwargs)  # noqa: E501
            return data

    def update_threshold_with_http_info(self, body, device_id, threshold_id, **kwargs):  # noqa: E501
        """Update threshold by ID  # noqa: E501

        Update threshold  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_threshold_with_http_info(body, device_id, threshold_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThresholdDto body: (required)
        :param int device_id: The flow device id (required)
        :param int threshold_id: The threshold id to be updated (required)
        :return: ThresholdDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'device_id', 'threshold_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_threshold" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_threshold`")  # noqa: E501
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `update_threshold`")  # noqa: E501
        # verify the required parameter 'threshold_id' is set
        if ('threshold_id' not in params or
                params['threshold_id'] is None):
            raise ValueError("Missing the required parameter `threshold_id` when calling `update_threshold`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'threshold_id' in params:
            path_params['thresholdId'] = params['threshold_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/thresholds/flow/{deviceId}/{thresholdId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThresholdDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_threshold_condition_by_id(self, body, device_id, threshold_id, trigger_type, condition_id, **kwargs):  # noqa: E501
        """update a condition of a threshold  # noqa: E501

        update a threshold condition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_threshold_condition_by_id(body, device_id, threshold_id, trigger_type, condition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThresholdConditionDto body: (required)
        :param int device_id: (required)
        :param int threshold_id: (required)
        :param str trigger_type: (required)
        :param int condition_id: (required)
        :return: ThresholdConditionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_threshold_condition_by_id_with_http_info(body, device_id, threshold_id, trigger_type, condition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_threshold_condition_by_id_with_http_info(body, device_id, threshold_id, trigger_type, condition_id, **kwargs)  # noqa: E501
            return data

    def update_threshold_condition_by_id_with_http_info(self, body, device_id, threshold_id, trigger_type, condition_id, **kwargs):  # noqa: E501
        """update a condition of a threshold  # noqa: E501

        update a threshold condition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_threshold_condition_by_id_with_http_info(body, device_id, threshold_id, trigger_type, condition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThresholdConditionDto body: (required)
        :param int device_id: (required)
        :param int threshold_id: (required)
        :param str trigger_type: (required)
        :param int condition_id: (required)
        :return: ThresholdConditionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'device_id', 'threshold_id', 'trigger_type', 'condition_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_threshold_condition_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_threshold_condition_by_id`")  # noqa: E501
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `update_threshold_condition_by_id`")  # noqa: E501
        # verify the required parameter 'threshold_id' is set
        if ('threshold_id' not in params or
                params['threshold_id'] is None):
            raise ValueError("Missing the required parameter `threshold_id` when calling `update_threshold_condition_by_id`")  # noqa: E501
        # verify the required parameter 'trigger_type' is set
        if ('trigger_type' not in params or
                params['trigger_type'] is None):
            raise ValueError("Missing the required parameter `trigger_type` when calling `update_threshold_condition_by_id`")  # noqa: E501
        # verify the required parameter 'condition_id' is set
        if ('condition_id' not in params or
                params['condition_id'] is None):
            raise ValueError("Missing the required parameter `condition_id` when calling `update_threshold_condition_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'threshold_id' in params:
            path_params['thresholdId'] = params['threshold_id']  # noqa: E501
        if 'trigger_type' in params:
            path_params['triggerType'] = params['trigger_type']  # noqa: E501
        if 'condition_id' in params:
            path_params['conditionId'] = params['condition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/thresholds/flow/{deviceId}/{thresholdId}/{triggerType}/conditions/{conditionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThresholdConditionDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
