# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PluginsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_plugin_indicator_type(self, body, **kwargs):  # noqa: E501
        """Creates a plugin indicator type  # noqa: E501

        Endpoint for creating plugin indicator types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plugin_indicator_type(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginIndicatorTypeRequestDto body: (required)
        :return: PluginIndicatorTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_plugin_indicator_type_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_plugin_indicator_type_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_plugin_indicator_type_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a plugin indicator type  # noqa: E501

        Endpoint for creating plugin indicator types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plugin_indicator_type_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginIndicatorTypeRequestDto body: (required)
        :return: PluginIndicatorTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_plugin_indicator_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_plugin_indicator_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/plugins/indicatortypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PluginIndicatorTypeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_plugin_indicator_type1(self, body, **kwargs):  # noqa: E501
        """Creates a plugin indicator type  # noqa: E501

        Endpoint for creating plugin indicator types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plugin_indicator_type1(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginIndicatorTypeRequestDtoV1 body: (required)
        :return: PluginIndicatorTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_plugin_indicator_type1_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_plugin_indicator_type1_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_plugin_indicator_type1_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a plugin indicator type  # noqa: E501

        Endpoint for creating plugin indicator types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plugin_indicator_type1_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginIndicatorTypeRequestDtoV1 body: (required)
        :return: PluginIndicatorTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_plugin_indicator_type1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_plugin_indicator_type1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/plugins/indicatortypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PluginIndicatorTypeDtoV1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_plugin_object_type(self, body, **kwargs):  # noqa: E501
        """Creates an plugin object type  # noqa: E501

        Endpoint for creating plugin object types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plugin_object_type(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginObjectTypeRequestDto body: (required)
        :return: PluginObjectTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_plugin_object_type_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_plugin_object_type_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_plugin_object_type_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates an plugin object type  # noqa: E501

        Endpoint for creating plugin object types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plugin_object_type_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginObjectTypeRequestDto body: (required)
        :return: PluginObjectTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_plugin_object_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_plugin_object_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/plugins/objecttypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PluginObjectTypeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_plugin_object_type1(self, body, **kwargs):  # noqa: E501
        """Creates an plugin object type  # noqa: E501

        Endpoint for creating plugin object types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plugin_object_type1(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginObjectTypeRequestDtoV1 body: (required)
        :return: PluginObjectTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_plugin_object_type1_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_plugin_object_type1_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_plugin_object_type1_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates an plugin object type  # noqa: E501

        Endpoint for creating plugin object types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plugin_object_type1_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginObjectTypeRequestDtoV1 body: (required)
        :return: PluginObjectTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_plugin_object_type1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_plugin_object_type1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/plugins/objecttypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PluginObjectTypeDtoV1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def filter_plugin_indicator_types(self, body, **kwargs):  # noqa: E501
        """Find plugin indicator types  # noqa: E501

        Filter plugin indicator types that match the criteria with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_plugin_indicator_types(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IndicatortypesFilterBody body: (required)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginIndicatorTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filter_plugin_indicator_types_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.filter_plugin_indicator_types_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def filter_plugin_indicator_types_with_http_info(self, body, **kwargs):  # noqa: E501
        """Find plugin indicator types  # noqa: E501

        Filter plugin indicator types that match the criteria with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_plugin_indicator_types_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IndicatortypesFilterBody body: (required)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginIndicatorTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'include_extended_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filter_plugin_indicator_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `filter_plugin_indicator_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/plugins/indicatortypes/filter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerPluginIndicatorTypeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def filter_plugin_indicator_types1(self, body, **kwargs):  # noqa: E501
        """Find plugin indicator types  # noqa: E501

        Filter plugin indicator types that match the criteria with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_plugin_indicator_types1(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginIndicatorTypeFilterDto body: (required)
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginIndicatorTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filter_plugin_indicator_types1_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.filter_plugin_indicator_types1_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def filter_plugin_indicator_types1_with_http_info(self, body, **kwargs):  # noqa: E501
        """Find plugin indicator types  # noqa: E501

        Filter plugin indicator types that match the criteria with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_plugin_indicator_types1_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginIndicatorTypeFilterDto body: (required)
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginIndicatorTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'page', 'size', 'include_extended_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filter_plugin_indicator_types1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `filter_plugin_indicator_types1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/plugins/indicatortypes/filter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerPluginIndicatorTypeDtoV1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def filter_plugin_object_types(self, body, **kwargs):  # noqa: E501
        """Find plugin object types  # noqa: E501

        Filter plugin object types that match the criteria with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_plugin_object_types(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ObjecttypesFilterBody body: (required)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginObjectTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filter_plugin_object_types_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.filter_plugin_object_types_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def filter_plugin_object_types_with_http_info(self, body, **kwargs):  # noqa: E501
        """Find plugin object types  # noqa: E501

        Filter plugin object types that match the criteria with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_plugin_object_types_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ObjecttypesFilterBody body: (required)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginObjectTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'include_extended_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filter_plugin_object_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `filter_plugin_object_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/plugins/objecttypes/filter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerPluginObjectTypeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def filter_plugin_object_types1(self, body, **kwargs):  # noqa: E501
        """Find plugin object types  # noqa: E501

        Filter plugin object types that match the criteria with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_plugin_object_types1(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginObjectTypeFilterDto body: (required)
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginObjectTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filter_plugin_object_types1_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.filter_plugin_object_types1_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def filter_plugin_object_types1_with_http_info(self, body, **kwargs):  # noqa: E501
        """Find plugin object types  # noqa: E501

        Filter plugin object types that match the criteria with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_plugin_object_types1_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginObjectTypeFilterDto body: (required)
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginObjectTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'page', 'size', 'include_extended_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filter_plugin_object_types1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `filter_plugin_object_types1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/plugins/objecttypes/filter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerPluginObjectTypeDtoV1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_plugin_indicator_types(self, options, **kwargs):  # noqa: E501
        """Get all plugin indicator types  # noqa: E501

        Endpoint for retrieving all plugin indicator types with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_plugin_indicator_types(options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageAndSortOptions options: (required)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginIndicatorTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_plugin_indicator_types_with_http_info(options, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_plugin_indicator_types_with_http_info(options, **kwargs)  # noqa: E501
            return data

    def get_all_plugin_indicator_types_with_http_info(self, options, **kwargs):  # noqa: E501
        """Get all plugin indicator types  # noqa: E501

        Endpoint for retrieving all plugin indicator types with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_plugin_indicator_types_with_http_info(options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageAndSortOptions options: (required)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginIndicatorTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['options', 'include_extended_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_plugin_indicator_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'options' is set
        if ('options' not in params or
                params['options'] is None):
            raise ValueError("Missing the required parameter `options` when calling `get_all_plugin_indicator_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501
        if 'options' in params:
            query_params.append(('options', params['options']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/plugins/indicatortypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerPluginIndicatorTypeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_plugin_indicator_types1(self, **kwargs):  # noqa: E501
        """Get all plugin indicator types  # noqa: E501

        Endpoint for retrieving all plugin indicator types with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_plugin_indicator_types1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginIndicatorTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_plugin_indicator_types1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_plugin_indicator_types1_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_plugin_indicator_types1_with_http_info(self, **kwargs):  # noqa: E501
        """Get all plugin indicator types  # noqa: E501

        Endpoint for retrieving all plugin indicator types with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_plugin_indicator_types1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginIndicatorTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'size', 'include_extended_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_plugin_indicator_types1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/plugins/indicatortypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerPluginIndicatorTypeDtoV1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_plugin_object_types(self, options, **kwargs):  # noqa: E501
        """Get all plugin object types  # noqa: E501

        Endpoint for retrieving all plugin object types with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_plugin_object_types(options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageAndSortOptions options: (required)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginObjectTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_plugin_object_types_with_http_info(options, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_plugin_object_types_with_http_info(options, **kwargs)  # noqa: E501
            return data

    def get_all_plugin_object_types_with_http_info(self, options, **kwargs):  # noqa: E501
        """Get all plugin object types  # noqa: E501

        Endpoint for retrieving all plugin object types with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_plugin_object_types_with_http_info(options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageAndSortOptions options: (required)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginObjectTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['options', 'include_extended_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_plugin_object_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'options' is set
        if ('options' not in params or
                params['options'] is None):
            raise ValueError("Missing the required parameter `options` when calling `get_all_plugin_object_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501
        if 'options' in params:
            query_params.append(('options', params['options']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/plugins/objecttypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerPluginObjectTypeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_plugin_object_types1(self, **kwargs):  # noqa: E501
        """Get all plugin object types  # noqa: E501

        Endpoint for retrieving all plugin object types with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_plugin_object_types1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginObjectTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_plugin_object_types1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_plugin_object_types1_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_plugin_object_types1_with_http_info(self, **kwargs):  # noqa: E501
        """Get all plugin object types  # noqa: E501

        Endpoint for retrieving all plugin object types with support for pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_plugin_object_types1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerPluginObjectTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'size', 'include_extended_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_plugin_object_types1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/plugins/objecttypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerPluginObjectTypeDtoV1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_plugins(self, plugin, options, **kwargs):  # noqa: E501
        """Get all plugins  # noqa: E501

        Endpoint for retrieving all plugins with support for filters and pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_plugins(plugin, options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginFilterDto plugin: (required)
        :param PageAndSortOptions options: (required)
        :return: PagerPluginDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_plugins_with_http_info(plugin, options, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_plugins_with_http_info(plugin, options, **kwargs)  # noqa: E501
            return data

    def get_all_plugins_with_http_info(self, plugin, options, **kwargs):  # noqa: E501
        """Get all plugins  # noqa: E501

        Endpoint for retrieving all plugins with support for filters and pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_plugins_with_http_info(plugin, options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginFilterDto plugin: (required)
        :param PageAndSortOptions options: (required)
        :return: PagerPluginDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plugin', 'options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_plugins" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plugin' is set
        if ('plugin' not in params or
                params['plugin'] is None):
            raise ValueError("Missing the required parameter `plugin` when calling `get_all_plugins`")  # noqa: E501
        # verify the required parameter 'options' is set
        if ('options' not in params or
                params['options'] is None):
            raise ValueError("Missing the required parameter `options` when calling `get_all_plugins`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'plugin' in params:
            query_params.append(('plugin', params['plugin']))  # noqa: E501
        if 'options' in params:
            query_params.append(('options', params['options']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/plugins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerPluginDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_plugins1(self, **kwargs):  # noqa: E501
        """Get all plugins  # noqa: E501

        Endpoint for retrieving all plugins with support for filters and pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_plugins1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :return: PagerPluginDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_plugins1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_plugins1_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_plugins1_with_http_info(self, **kwargs):  # noqa: E501
        """Get all plugins  # noqa: E501

        Endpoint for retrieving all plugins with support for filters and pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_plugins1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :return: PagerPluginDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_plugins1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/plugins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerPluginDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_plugin_info_schema(self, **kwargs):  # noqa: E501
        """Get all device extended plugin info schema  # noqa: E501

        Endpoint for retrieving a template of plugin info for device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_plugin_info_schema(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, PluginInfo)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_plugin_info_schema_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_device_plugin_info_schema_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_device_plugin_info_schema_with_http_info(self, **kwargs):  # noqa: E501
        """Get all device extended plugin info schema  # noqa: E501

        Endpoint for retrieving a template of plugin info for device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_plugin_info_schema_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, PluginInfo)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_plugin_info_schema" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/plugins/device/schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, PluginInfo)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_plugin_info_schema1(self, **kwargs):  # noqa: E501
        """Get all device extended plugin info schema  # noqa: E501

        Endpoint for retrieving a template of plugin info for device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_plugin_info_schema1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, PluginInfo)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_plugin_info_schema1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_device_plugin_info_schema1_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_device_plugin_info_schema1_with_http_info(self, **kwargs):  # noqa: E501
        """Get all device extended plugin info schema  # noqa: E501

        Endpoint for retrieving a template of plugin info for device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_plugin_info_schema1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, PluginInfo)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_plugin_info_schema1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/plugins/device/schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, PluginInfo)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_indicator_extended_info_schema(self, plugin_id, **kwargs):  # noqa: E501
        """Get indicator extended info schema by plugin Id  # noqa: E501

        Gets schema for Indicator extended info by provided plugin Id if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator_extended_info_schema(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested indicator extended info schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_indicator_extended_info_schema_with_http_info(plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_indicator_extended_info_schema_with_http_info(plugin_id, **kwargs)  # noqa: E501
            return data

    def get_indicator_extended_info_schema_with_http_info(self, plugin_id, **kwargs):  # noqa: E501
        """Get indicator extended info schema by plugin Id  # noqa: E501

        Gets schema for Indicator extended info by provided plugin Id if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator_extended_info_schema_with_http_info(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested indicator extended info schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plugin_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_indicator_extended_info_schema" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plugin_id' is set
        if ('plugin_id' not in params or
                params['plugin_id'] is None):
            raise ValueError("Missing the required parameter `plugin_id` when calling `get_indicator_extended_info_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plugin_id' in params:
            path_params['pluginId'] = params['plugin_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/plugins/indicator/schema/{pluginId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_indicator_extended_info_schema1(self, plugin_id, **kwargs):  # noqa: E501
        """Get indicator extended info schema by plugin Id  # noqa: E501

        Gets schema for Indicator extended info by provided plugin Id if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator_extended_info_schema1(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested indicator extended info schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_indicator_extended_info_schema1_with_http_info(plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_indicator_extended_info_schema1_with_http_info(plugin_id, **kwargs)  # noqa: E501
            return data

    def get_indicator_extended_info_schema1_with_http_info(self, plugin_id, **kwargs):  # noqa: E501
        """Get indicator extended info schema by plugin Id  # noqa: E501

        Gets schema for Indicator extended info by provided plugin Id if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator_extended_info_schema1_with_http_info(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested indicator extended info schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plugin_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_indicator_extended_info_schema1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plugin_id' is set
        if ('plugin_id' not in params or
                params['plugin_id'] is None):
            raise ValueError("Missing the required parameter `plugin_id` when calling `get_indicator_extended_info_schema1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plugin_id' in params:
            path_params['pluginId'] = params['plugin_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/plugins/indicator/schema/{pluginId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_object_extended_info_schema(self, plugin_id, **kwargs):  # noqa: E501
        """Get object extended info schema by plugin Id  # noqa: E501

        Gets schema for object extended info by provided plugin Id if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_extended_info_schema(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested object extended info schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_object_extended_info_schema_with_http_info(plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_object_extended_info_schema_with_http_info(plugin_id, **kwargs)  # noqa: E501
            return data

    def get_object_extended_info_schema_with_http_info(self, plugin_id, **kwargs):  # noqa: E501
        """Get object extended info schema by plugin Id  # noqa: E501

        Gets schema for object extended info by provided plugin Id if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_extended_info_schema_with_http_info(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested object extended info schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plugin_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_object_extended_info_schema" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plugin_id' is set
        if ('plugin_id' not in params or
                params['plugin_id'] is None):
            raise ValueError("Missing the required parameter `plugin_id` when calling `get_object_extended_info_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plugin_id' in params:
            path_params['pluginId'] = params['plugin_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/plugins/object/schema/{pluginId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_object_extended_info_schema1(self, plugin_id, **kwargs):  # noqa: E501
        """Get object extended info schema by plugin Id  # noqa: E501

        Gets schema for object extended info by provided plugin Id if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_extended_info_schema1(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested object extended info schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_object_extended_info_schema1_with_http_info(plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_object_extended_info_schema1_with_http_info(plugin_id, **kwargs)  # noqa: E501
            return data

    def get_object_extended_info_schema1_with_http_info(self, plugin_id, **kwargs):  # noqa: E501
        """Get object extended info schema by plugin Id  # noqa: E501

        Gets schema for object extended info by provided plugin Id if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_extended_info_schema1_with_http_info(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested object extended info schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plugin_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_object_extended_info_schema1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plugin_id' is set
        if ('plugin_id' not in params or
                params['plugin_id'] is None):
            raise ValueError("Missing the required parameter `plugin_id` when calling `get_object_extended_info_schema1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plugin_id' in params:
            path_params['pluginId'] = params['plugin_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/plugins/object/schema/{pluginId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_schema_for_all_plugin_indicator_types(self, plugin_id, **kwargs):  # noqa: E501
        """Get schema for plugin indicator type extended info  # noqa: E501

        Endpoint for retrieving schema for plugin indicator types extended info by plugin id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_for_all_plugin_indicator_types(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested plugin indicator type schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_schema_for_all_plugin_indicator_types_with_http_info(plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_schema_for_all_plugin_indicator_types_with_http_info(plugin_id, **kwargs)  # noqa: E501
            return data

    def get_schema_for_all_plugin_indicator_types_with_http_info(self, plugin_id, **kwargs):  # noqa: E501
        """Get schema for plugin indicator type extended info  # noqa: E501

        Endpoint for retrieving schema for plugin indicator types extended info by plugin id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_for_all_plugin_indicator_types_with_http_info(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested plugin indicator type schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plugin_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schema_for_all_plugin_indicator_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plugin_id' is set
        if ('plugin_id' not in params or
                params['plugin_id'] is None):
            raise ValueError("Missing the required parameter `plugin_id` when calling `get_schema_for_all_plugin_indicator_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plugin_id' in params:
            path_params['pluginId'] = params['plugin_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/plugins/indicatortypes/schema/{pluginId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_schema_for_all_plugin_indicator_types1(self, plugin_id, **kwargs):  # noqa: E501
        """Get schema for plugin indicator type extended info  # noqa: E501

        Endpoint for retrieving schema for plugin indicator types extended info by plugin id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_for_all_plugin_indicator_types1(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested plugin indicator type schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_schema_for_all_plugin_indicator_types1_with_http_info(plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_schema_for_all_plugin_indicator_types1_with_http_info(plugin_id, **kwargs)  # noqa: E501
            return data

    def get_schema_for_all_plugin_indicator_types1_with_http_info(self, plugin_id, **kwargs):  # noqa: E501
        """Get schema for plugin indicator type extended info  # noqa: E501

        Endpoint for retrieving schema for plugin indicator types extended info by plugin id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_for_all_plugin_indicator_types1_with_http_info(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested plugin indicator type schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plugin_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schema_for_all_plugin_indicator_types1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plugin_id' is set
        if ('plugin_id' not in params or
                params['plugin_id'] is None):
            raise ValueError("Missing the required parameter `plugin_id` when calling `get_schema_for_all_plugin_indicator_types1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plugin_id' in params:
            path_params['pluginId'] = params['plugin_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/plugins/indicatortypes/schema/{pluginId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_schema_for_all_plugin_object_types(self, plugin_id, **kwargs):  # noqa: E501
        """Get schema for plugin object type extended info  # noqa: E501

        Endpoint for retrieving schema for plugin object types extended info by plugin id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_for_all_plugin_object_types(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested plugin object type schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_schema_for_all_plugin_object_types_with_http_info(plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_schema_for_all_plugin_object_types_with_http_info(plugin_id, **kwargs)  # noqa: E501
            return data

    def get_schema_for_all_plugin_object_types_with_http_info(self, plugin_id, **kwargs):  # noqa: E501
        """Get schema for plugin object type extended info  # noqa: E501

        Endpoint for retrieving schema for plugin object types extended info by plugin id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_for_all_plugin_object_types_with_http_info(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested plugin object type schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plugin_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schema_for_all_plugin_object_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plugin_id' is set
        if ('plugin_id' not in params or
                params['plugin_id'] is None):
            raise ValueError("Missing the required parameter `plugin_id` when calling `get_schema_for_all_plugin_object_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plugin_id' in params:
            path_params['pluginId'] = params['plugin_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/plugins/objecttypes/schema/{pluginId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_schema_for_all_plugin_object_types1(self, plugin_id, **kwargs):  # noqa: E501
        """Get schema for plugin object type extended info  # noqa: E501

        Endpoint for retrieving schema for plugin object types extended info by plugin id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_for_all_plugin_object_types1(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested plugin object type schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_schema_for_all_plugin_object_types1_with_http_info(plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_schema_for_all_plugin_object_types1_with_http_info(plugin_id, **kwargs)  # noqa: E501
            return data

    def get_schema_for_all_plugin_object_types1_with_http_info(self, plugin_id, **kwargs):  # noqa: E501
        """Get schema for plugin object type extended info  # noqa: E501

        Endpoint for retrieving schema for plugin object types extended info by plugin id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_for_all_plugin_object_types1_with_http_info(plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plugin_id: The plugin id of the requested plugin object type schema (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plugin_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schema_for_all_plugin_object_types1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plugin_id' is set
        if ('plugin_id' not in params or
                params['plugin_id'] is None):
            raise ValueError("Missing the required parameter `plugin_id` when calling `get_schema_for_all_plugin_object_types1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plugin_id' in params:
            path_params['pluginId'] = params['plugin_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/plugins/objecttypes/schema/{pluginId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_plugin_indicator_type(self, body, id, **kwargs):  # noqa: E501
        """Updates a plugin indicator type  # noqa: E501

        Endpoint for updating plugin indicator types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_plugin_indicator_type(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginIndicatorTypeRequestDto body: (required)
        :param int id: The id of the indicator type to be updated (required)
        :return: PluginIndicatorTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_plugin_indicator_type_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_plugin_indicator_type_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_plugin_indicator_type_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Updates a plugin indicator type  # noqa: E501

        Endpoint for updating plugin indicator types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_plugin_indicator_type_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginIndicatorTypeRequestDto body: (required)
        :param int id: The id of the indicator type to be updated (required)
        :return: PluginIndicatorTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_plugin_indicator_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_plugin_indicator_type`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_plugin_indicator_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/plugins/indicatortypes/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PluginIndicatorTypeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_plugin_indicator_type1(self, body, id, **kwargs):  # noqa: E501
        """Updates a plugin indicator type  # noqa: E501

        Endpoint for updating plugin indicator types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_plugin_indicator_type1(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginIndicatorTypeRequestDtoV1 body: (required)
        :param int id: The id of the indicator type to be updated (required)
        :return: PluginIndicatorTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_plugin_indicator_type1_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_plugin_indicator_type1_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_plugin_indicator_type1_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Updates a plugin indicator type  # noqa: E501

        Endpoint for updating plugin indicator types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_plugin_indicator_type1_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginIndicatorTypeRequestDtoV1 body: (required)
        :param int id: The id of the indicator type to be updated (required)
        :return: PluginIndicatorTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_plugin_indicator_type1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_plugin_indicator_type1`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_plugin_indicator_type1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/plugins/indicatortypes/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PluginIndicatorTypeDtoV1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_plugin_object_type(self, body, id, **kwargs):  # noqa: E501
        """Updates an plugin object type  # noqa: E501

        Endpoint for updating plugin object types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_plugin_object_type(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginObjectTypeRequestDto body: (required)
        :param int id: The id of the object type to be updated (required)
        :return: PluginObjectTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_plugin_object_type_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_plugin_object_type_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_plugin_object_type_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Updates an plugin object type  # noqa: E501

        Endpoint for updating plugin object types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_plugin_object_type_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginObjectTypeRequestDto body: (required)
        :param int id: The id of the object type to be updated (required)
        :return: PluginObjectTypeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_plugin_object_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_plugin_object_type`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_plugin_object_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/plugins/objecttypes/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PluginObjectTypeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_plugin_object_type1(self, body, id, **kwargs):  # noqa: E501
        """Updates an plugin object type  # noqa: E501

        Endpoint for updating plugin object types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_plugin_object_type1(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginObjectTypeRequestDtoV1 body: (required)
        :param int id: The id of the object type to be updated (required)
        :return: PluginObjectTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_plugin_object_type1_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_plugin_object_type1_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_plugin_object_type1_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Updates an plugin object type  # noqa: E501

        Endpoint for updating plugin object types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_plugin_object_type1_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PluginObjectTypeRequestDtoV1 body: (required)
        :param int id: The id of the object type to be updated (required)
        :return: PluginObjectTypeDtoV1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_plugin_object_type1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_plugin_object_type1`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_plugin_object_type1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/plugins/objecttypes/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PluginObjectTypeDtoV1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
