# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class IndicatorsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_device_indicator_data(self, body, **kwargs):  # noqa: E501
        """Create device indicator data  # noqa: E501

        Creates a new device indicator data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_device_indicator_data(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ObjectDataDto] body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_device_indicator_data_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_device_indicator_data_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_device_indicator_data_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create device indicator data  # noqa: E501

        Creates a new device indicator data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_device_indicator_data_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ObjectDataDto] body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_device_indicator_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_device_indicator_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/device-indicators/data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_device_indicator_data1(self, body, **kwargs):  # noqa: E501
        """Create device indicator data  # noqa: E501

        Creates a new device indicator data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_device_indicator_data1(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ObjectDataDto] body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_device_indicator_data1_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_device_indicator_data1_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_device_indicator_data1_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create device indicator data  # noqa: E501

        Creates a new device indicator data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_device_indicator_data1_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ObjectDataDto] body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_device_indicator_data1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_device_indicator_data1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/device-indicators/data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_indicator(self, device_id, object_id, indicator_id, **kwargs):  # noqa: E501
        """Get indicator by deviceId, objectId and indicatorId  # noqa: E501

        Endpoint for retrieving a single indicator for given deviceId, objectId and indicatorId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator(device_id, object_id, indicator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The Id of the device (required)
        :param int object_id: The Id of the object (required)
        :param int indicator_id: The Id of the indicator (required)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: IndicatorDtoIncludeMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_indicator_with_http_info(device_id, object_id, indicator_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_indicator_with_http_info(device_id, object_id, indicator_id, **kwargs)  # noqa: E501
            return data

    def get_indicator_with_http_info(self, device_id, object_id, indicator_id, **kwargs):  # noqa: E501
        """Get indicator by deviceId, objectId and indicatorId  # noqa: E501

        Endpoint for retrieving a single indicator for given deviceId, objectId and indicatorId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator_with_http_info(device_id, object_id, indicator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The Id of the device (required)
        :param int object_id: The Id of the object (required)
        :param int indicator_id: The Id of the indicator (required)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: IndicatorDtoIncludeMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'object_id', 'indicator_id', 'include_extended_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_indicator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_indicator`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `get_indicator`")  # noqa: E501
        # verify the required parameter 'indicator_id' is set
        if ('indicator_id' not in params or
                params['indicator_id'] is None):
            raise ValueError("Missing the required parameter `indicator_id` when calling `get_indicator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'indicator_id' in params:
            path_params['indicatorId'] = params['indicator_id']  # noqa: E501

        query_params = []
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{deviceId}/objects/{objectId}/indicators/{indicatorId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndicatorDtoIncludeMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_indicator1(self, device_id, object_id, indicator_id, **kwargs):  # noqa: E501
        """Get indicator by deviceId, objectId and indicatorId  # noqa: E501

        Endpoint for retrieving a single indicator for given deviceId, objectId and indicatorId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator1(device_id, object_id, indicator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The Id of the device (required)
        :param int object_id: The Id of the object (required)
        :param int indicator_id: The Id of the indicator (required)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: IndicatorDtoNoMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_indicator1_with_http_info(device_id, object_id, indicator_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_indicator1_with_http_info(device_id, object_id, indicator_id, **kwargs)  # noqa: E501
            return data

    def get_indicator1_with_http_info(self, device_id, object_id, indicator_id, **kwargs):  # noqa: E501
        """Get indicator by deviceId, objectId and indicatorId  # noqa: E501

        Endpoint for retrieving a single indicator for given deviceId, objectId and indicatorId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator1_with_http_info(device_id, object_id, indicator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The Id of the device (required)
        :param int object_id: The Id of the object (required)
        :param int indicator_id: The Id of the indicator (required)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: IndicatorDtoNoMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'object_id', 'indicator_id', 'include_extended_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_indicator1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_indicator1`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `get_indicator1`")  # noqa: E501
        # verify the required parameter 'indicator_id' is set
        if ('indicator_id' not in params or
                params['indicator_id'] is None):
            raise ValueError("Missing the required parameter `indicator_id` when calling `get_indicator1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'indicator_id' in params:
            path_params['indicatorId'] = params['indicator_id']  # noqa: E501

        query_params = []
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/devices/{deviceId}/objects/{objectId}/indicators/{indicatorId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndicatorDtoNoMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_indicator_data(self, device_id, object_id, indicator_id, start_time, end_time, **kwargs):  # noqa: E501
        """Get indicator data by deviceId, objectId and indicatorId  # noqa: E501

        Endpoint for retrieving indicators data for a given indicatorId and period of time  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator_data(device_id, object_id, indicator_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The Id of the device (required)
        :param int object_id: The Id of the object (required)
        :param int indicator_id: The Id of the indicator (required)
        :param int start_time: Start time for the data, unix timestamp with milliseconds proximity (required)
        :param int end_time: End time for the data, unix timestamp with milliseconds proximity (required)
        :param bool raw_data: Determines whether to return raw data
        :return: list[DataPointDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_indicator_data_with_http_info(device_id, object_id, indicator_id, start_time, end_time, **kwargs)  # noqa: E501
        else:
            (data) = self.get_indicator_data_with_http_info(device_id, object_id, indicator_id, start_time, end_time, **kwargs)  # noqa: E501
            return data

    def get_indicator_data_with_http_info(self, device_id, object_id, indicator_id, start_time, end_time, **kwargs):  # noqa: E501
        """Get indicator data by deviceId, objectId and indicatorId  # noqa: E501

        Endpoint for retrieving indicators data for a given indicatorId and period of time  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator_data_with_http_info(device_id, object_id, indicator_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The Id of the device (required)
        :param int object_id: The Id of the object (required)
        :param int indicator_id: The Id of the indicator (required)
        :param int start_time: Start time for the data, unix timestamp with milliseconds proximity (required)
        :param int end_time: End time for the data, unix timestamp with milliseconds proximity (required)
        :param bool raw_data: Determines whether to return raw data
        :return: list[DataPointDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'object_id', 'indicator_id', 'start_time', 'end_time', 'raw_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_indicator_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_indicator_data`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `get_indicator_data`")  # noqa: E501
        # verify the required parameter 'indicator_id' is set
        if ('indicator_id' not in params or
                params['indicator_id'] is None):
            raise ValueError("Missing the required parameter `indicator_id` when calling `get_indicator_data`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `get_indicator_data`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `get_indicator_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'indicator_id' in params:
            path_params['indicatorId'] = params['indicator_id']  # noqa: E501

        query_params = []
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'raw_data' in params:
            query_params.append(('rawData', params['raw_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{deviceId}/objects/{objectId}/indicators/{indicatorId}/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataPointDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_indicator_data1(self, device_id, object_id, indicator_id, start_time, end_time, **kwargs):  # noqa: E501
        """Get indicator data by deviceId, objectId and indicatorId  # noqa: E501

        Endpoint for retrieving indicators data for a given indicatorId and period of time  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator_data1(device_id, object_id, indicator_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The Id of the device (required)
        :param int object_id: The Id of the object (required)
        :param int indicator_id: The Id of the indicator (required)
        :param int start_time: Start time for the data, unix timestamp with milliseconds proximity (required)
        :param int end_time: End time for the data, unix timestamp with milliseconds proximity (required)
        :return: list[DataPointDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_indicator_data1_with_http_info(device_id, object_id, indicator_id, start_time, end_time, **kwargs)  # noqa: E501
        else:
            (data) = self.get_indicator_data1_with_http_info(device_id, object_id, indicator_id, start_time, end_time, **kwargs)  # noqa: E501
            return data

    def get_indicator_data1_with_http_info(self, device_id, object_id, indicator_id, start_time, end_time, **kwargs):  # noqa: E501
        """Get indicator data by deviceId, objectId and indicatorId  # noqa: E501

        Endpoint for retrieving indicators data for a given indicatorId and period of time  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator_data1_with_http_info(device_id, object_id, indicator_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The Id of the device (required)
        :param int object_id: The Id of the object (required)
        :param int indicator_id: The Id of the indicator (required)
        :param int start_time: Start time for the data, unix timestamp with milliseconds proximity (required)
        :param int end_time: End time for the data, unix timestamp with milliseconds proximity (required)
        :return: list[DataPointDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'object_id', 'indicator_id', 'start_time', 'end_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_indicator_data1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_indicator_data1`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `get_indicator_data1`")  # noqa: E501
        # verify the required parameter 'indicator_id' is set
        if ('indicator_id' not in params or
                params['indicator_id'] is None):
            raise ValueError("Missing the required parameter `indicator_id` when calling `get_indicator_data1`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `get_indicator_data1`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `get_indicator_data1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501
        if 'indicator_id' in params:
            path_params['indicatorId'] = params['indicator_id']  # noqa: E501

        query_params = []
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/devices/{deviceId}/objects/{objectId}/indicators/{indicatorId}/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataPointDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_indicators(self, device_id, object_id, options, **kwargs):  # noqa: E501
        """Get indicators by deviceId and objectId  # noqa: E501

        Endpoint for retrieving all indicators for a given deviceId and objectId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicators(device_id, object_id, options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The Id of the device (required)
        :param int object_id: The Id of the object (required)
        :param PageAndSortOptionsIncludeMetadata options: (required)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :param bool include_indicator_metadata: Determines whether to include indicator metadata
        :return: PagerIndicatorDtoIncludeMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_indicators_with_http_info(device_id, object_id, options, **kwargs)  # noqa: E501
        else:
            (data) = self.get_indicators_with_http_info(device_id, object_id, options, **kwargs)  # noqa: E501
            return data

    def get_indicators_with_http_info(self, device_id, object_id, options, **kwargs):  # noqa: E501
        """Get indicators by deviceId and objectId  # noqa: E501

        Endpoint for retrieving all indicators for a given deviceId and objectId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicators_with_http_info(device_id, object_id, options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The Id of the device (required)
        :param int object_id: The Id of the object (required)
        :param PageAndSortOptionsIncludeMetadata options: (required)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :param bool include_indicator_metadata: Determines whether to include indicator metadata
        :return: PagerIndicatorDtoIncludeMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'object_id', 'options', 'include_extended_info', 'include_indicator_metadata']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_indicators" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_indicators`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `get_indicators`")  # noqa: E501
        # verify the required parameter 'options' is set
        if ('options' not in params or
                params['options'] is None):
            raise ValueError("Missing the required parameter `options` when calling `get_indicators`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501
        if 'include_indicator_metadata' in params:
            query_params.append(('includeIndicatorMetadata', params['include_indicator_metadata']))  # noqa: E501
        if 'options' in params:
            query_params.append(('options', params['options']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{deviceId}/objects/{objectId}/indicators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerIndicatorDtoIncludeMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_indicators1(self, device_id, object_id, **kwargs):  # noqa: E501
        """Get indicators by deviceId and objectId  # noqa: E501

        Endpoint for retrieving all indicators for a given deviceId and objectId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicators1(device_id, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The Id of the device (required)
        :param int object_id: The Id of the object (required)
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerIndicatorDtoNoMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_indicators1_with_http_info(device_id, object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_indicators1_with_http_info(device_id, object_id, **kwargs)  # noqa: E501
            return data

    def get_indicators1_with_http_info(self, device_id, object_id, **kwargs):  # noqa: E501
        """Get indicators by deviceId and objectId  # noqa: E501

        Endpoint for retrieving all indicators for a given deviceId and objectId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicators1_with_http_info(device_id, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The Id of the device (required)
        :param int object_id: The Id of the object (required)
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerIndicatorDtoNoMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'object_id', 'page', 'size', 'include_extended_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_indicators1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_indicators1`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `get_indicators1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/devices/{deviceId}/objects/{objectId}/indicators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerIndicatorDtoNoMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_last_seen_timestamp_for_indicators(self, body, **kwargs):  # noqa: E501
        """Get the timestamp of the most recent data point for indicators  # noqa: E501

        Endpoint for retrieving the timestamp of the most recent data point for indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_last_seen_timestamp_for_indicators(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LastSeenRequestDto body: (required)
        :return: LastSeenResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_last_seen_timestamp_for_indicators_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_last_seen_timestamp_for_indicators_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def get_last_seen_timestamp_for_indicators_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get the timestamp of the most recent data point for indicators  # noqa: E501

        Endpoint for retrieving the timestamp of the most recent data point for indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_last_seen_timestamp_for_indicators_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LastSeenRequestDto body: (required)
        :return: LastSeenResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_last_seen_timestamp_for_indicators" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_last_seen_timestamp_for_indicators`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/device-indicators/last-seen', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LastSeenResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
