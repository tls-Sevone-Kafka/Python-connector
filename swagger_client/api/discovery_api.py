# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.42, Hash: 719f8be
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DiscoveryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def filter_devices_in_discovery(self, body, **kwargs):  # noqa: E501
        """Filter devices currently in the discovery queue  # noqa: E501

        Find all devices that match the criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_devices_in_discovery(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiscoveryFilterBody body: (required)
        :param bool include_members: Determines whether to include devices
        :param bool include_objects: Determines whether to include objects
        :param bool include_indicators: Determines whether to include indicators
        :return: PagerDeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filter_devices_in_discovery_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.filter_devices_in_discovery_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def filter_devices_in_discovery_with_http_info(self, body, **kwargs):  # noqa: E501
        """Filter devices currently in the discovery queue  # noqa: E501

        Find all devices that match the criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_devices_in_discovery_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiscoveryFilterBody body: (required)
        :param bool include_members: Determines whether to include devices
        :param bool include_objects: Determines whether to include objects
        :param bool include_indicators: Determines whether to include indicators
        :return: PagerDeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'include_members', 'include_objects', 'include_indicators']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filter_devices_in_discovery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `filter_devices_in_discovery`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_members' in params:
            query_params.append(('includeMembers', params['include_members']))  # noqa: E501
        if 'include_objects' in params:
            query_params.append(('includeObjects', params['include_objects']))  # noqa: E501
        if 'include_indicators' in params:
            query_params.append(('includeIndicators', params['include_indicators']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/discovery/filter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerDeviceDiscoveryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def filter_devices_in_discovery1(self, body, **kwargs):  # noqa: E501
        """Filter devices currently in the discovery queue  # noqa: E501

        Find all devices that match the criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_devices_in_discovery1(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceDiscoveryFilter body: (required)
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_members: Determines whether to include devices
        :param bool include_objects: Determines whether to include objects
        :param bool include_indicators: Determines whether to include indicators
        :return: PagerDeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filter_devices_in_discovery1_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.filter_devices_in_discovery1_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def filter_devices_in_discovery1_with_http_info(self, body, **kwargs):  # noqa: E501
        """Filter devices currently in the discovery queue  # noqa: E501

        Find all devices that match the criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_devices_in_discovery1_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceDiscoveryFilter body: (required)
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_members: Determines whether to include devices
        :param bool include_objects: Determines whether to include objects
        :param bool include_indicators: Determines whether to include indicators
        :return: PagerDeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'page', 'size', 'include_members', 'include_objects', 'include_indicators']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filter_devices_in_discovery1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `filter_devices_in_discovery1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'include_members' in params:
            query_params.append(('includeMembers', params['include_members']))  # noqa: E501
        if 'include_objects' in params:
            query_params.append(('includeObjects', params['include_objects']))  # noqa: E501
        if 'include_indicators' in params:
            query_params.append(('includeIndicators', params['include_indicators']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/filter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerDeviceDiscoveryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_status_by_id(self, id, **kwargs):  # noqa: E501
        """Get device status from the discovery queue by Id  # noqa: E501

        Gets a single device status object by provided Id from the discovery queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_status_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id of the device (required)
        :param bool include_members: Determines whether to include devices in the response
        :return: DeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_status_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_status_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_device_status_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get device status from the discovery queue by Id  # noqa: E501

        Gets a single device status object by provided Id from the discovery queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_status_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id of the device (required)
        :param bool include_members: Determines whether to include devices in the response
        :return: DeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include_members']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_status_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_device_status_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include_members' in params:
            query_params.append(('includeMembers', params['include_members']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/discovery/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceDiscoveryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_status_by_id1(self, id, **kwargs):  # noqa: E501
        """Get device status from the discovery queue by Id  # noqa: E501

        Gets a single device status object by provided Id from the discovery queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_status_by_id1(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id of the device (required)
        :param bool include_members: Determines whether to include devices in the response
        :return: DeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_status_by_id1_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_status_by_id1_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_device_status_by_id1_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get device status from the discovery queue by Id  # noqa: E501

        Gets a single device status object by provided Id from the discovery queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_status_by_id1_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id of the device (required)
        :param bool include_members: Determines whether to include devices in the response
        :return: DeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include_members']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_status_by_id1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_device_status_by_id1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include_members' in params:
            query_params.append(('includeMembers', params['include_members']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceDiscoveryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_devices_in_discovery(self, options, **kwargs):  # noqa: E501
        """Get all devices currently in the discovery queue  # noqa: E501

        Endpoint for retrieving all devices currently in the discovery queue that supports pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_devices_in_discovery(options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageAndSortOptions options: (required)
        :param bool include_members: Determines whether to include devices in the response
        :return: PagerDeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_devices_in_discovery_with_http_info(options, **kwargs)  # noqa: E501
        else:
            (data) = self.get_devices_in_discovery_with_http_info(options, **kwargs)  # noqa: E501
            return data

    def get_devices_in_discovery_with_http_info(self, options, **kwargs):  # noqa: E501
        """Get all devices currently in the discovery queue  # noqa: E501

        Endpoint for retrieving all devices currently in the discovery queue that supports pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_devices_in_discovery_with_http_info(options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageAndSortOptions options: (required)
        :param bool include_members: Determines whether to include devices in the response
        :return: PagerDeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['options', 'include_members']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_devices_in_discovery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'options' is set
        if ('options' not in params or
                params['options'] is None):
            raise ValueError("Missing the required parameter `options` when calling `get_devices_in_discovery`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_members' in params:
            query_params.append(('includeMembers', params['include_members']))  # noqa: E501
        if 'options' in params:
            query_params.append(('options', params['options']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/discovery', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerDeviceDiscoveryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_devices_in_discovery1(self, **kwargs):  # noqa: E501
        """Get all devices currently in the discovery queue  # noqa: E501

        Endpoint for retrieving all devices currently in the discovery queue that supports pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_devices_in_discovery1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_members: Determines whether to include devices in the response
        :return: PagerDeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_devices_in_discovery1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_devices_in_discovery1_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_devices_in_discovery1_with_http_info(self, **kwargs):  # noqa: E501
        """Get all devices currently in the discovery queue  # noqa: E501

        Endpoint for retrieving all devices currently in the discovery queue that supports pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_devices_in_discovery1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_members: Determines whether to include devices in the response
        :return: PagerDeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'size', 'include_members']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_devices_in_discovery1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'include_members' in params:
            query_params.append(('includeMembers', params['include_members']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerDeviceDiscoveryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_discover_device(self, id, **kwargs):  # noqa: E501
        """Run discovery for a concrete device  # noqa: E501

        Needed Edit access to the concrete device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_discover_device(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id of the device (required)
        :param bool local_only: Run discovery on local Peer only. If set to true, device of other peer will not be discovered. If set to false and device is not on same peer,it will be set for discovery and will be discovered in the next discovery.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.run_discover_device_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.run_discover_device_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def run_discover_device_with_http_info(self, id, **kwargs):  # noqa: E501
        """Run discovery for a concrete device  # noqa: E501

        Needed Edit access to the concrete device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_discover_device_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id of the device (required)
        :param bool local_only: Run discovery on local Peer only. If set to true, device of other peer will not be discovered. If set to false and device is not on same peer,it will be set for discovery and will be discovered in the next discovery.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'local_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_discover_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `run_discover_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'local_only' in params:
            query_params.append(('localOnly', params['local_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/discovery/{id}/run', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_discovery_all_devices(self, **kwargs):  # noqa: E501
        """Run discovery for all devices (of the peer on which API is running) in the discovery queue  # noqa: E501

        Can be executed only from system administrators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_discovery_all_devices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.run_discovery_all_devices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.run_discovery_all_devices_with_http_info(**kwargs)  # noqa: E501
            return data

    def run_discovery_all_devices_with_http_info(self, **kwargs):  # noqa: E501
        """Run discovery for all devices (of the peer on which API is running) in the discovery queue  # noqa: E501

        Can be executed only from system administrators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_discovery_all_devices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_discovery_all_devices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/discovery/run', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_device_priority(self, body, id, **kwargs):  # noqa: E501
        """Update an existing task for this device in the discovery queue  # noqa: E501

        Updates an existing task for this device in the discovery queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_device_priority(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiscoveryRequestDto body: (required)
        :param int id: The id of the device (required)
        :return: DeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_device_priority_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_device_priority_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_device_priority_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update an existing task for this device in the discovery queue  # noqa: E501

        Updates an existing task for this device in the discovery queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_device_priority_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiscoveryRequestDto body: (required)
        :param int id: The id of the device (required)
        :return: DeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_device_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_device_priority`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_device_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/discovery/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceDiscoveryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_device_priority1(self, body, id, **kwargs):  # noqa: E501
        """Update an existing task for this device in the discovery queue  # noqa: E501

        Updates an existing task for this device in the discovery queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_device_priority1(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiscoveryRequestDto body: (required)
        :param int id: The id of the device (required)
        :return: DeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_device_priority1_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_device_priority1_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_device_priority1_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update an existing task for this device in the discovery queue  # noqa: E501

        Updates an existing task for this device in the discovery queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_device_priority1_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiscoveryRequestDto body: (required)
        :param int id: The id of the device (required)
        :return: DeviceDiscoveryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_device_priority1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_device_priority1`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_device_priority1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceDiscoveryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
